{
  "address": "0xc6ec791F3F9A83A88b01A8793eD3055aC3016DA6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBridge",
          "name": "delayedBridge",
          "type": "address"
        },
        {
          "internalType": "contract ISequencerInbox",
          "name": "sequencerInbox",
          "type": "address"
        }
      ],
      "name": "getCountsAndAccumulators",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "counts",
          "type": "uint256[2]"
        },
        {
          "internalType": "bytes32[2]",
          "name": "accs",
          "type": "bytes32[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x326a7e84dc59cd2d6bd9760450aea68e5fa3aa144bba45e5b5862710b0a4f3e2",
  "receipt": {
    "to": null,
    "from": "0x7D3D3955Fd31f22709335474e80736dd0D433cF3",
    "contractAddress": "0xc6ec791F3F9A83A88b01A8793eD3055aC3016DA6",
    "transactionIndex": 0,
    "gasUsed": "243656",
    "logsBloom": "0x
    "blockHash": "0xffb6fb8ec7d559d3c985ebdd6f0d9cd7d359bba0bbbce30df329d1ee8296e4c8",
    "transactionHash": "0x326a7e84dc59cd2d6bd9760450aea68e5fa3aa144bba45e5b5862710b0a4f3e2",
    "logs": [],
    "blockNumber": 3239885,
    "cumulativeGasUsed": "243656",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5f404ffad369d1e6fd2cf1f0ce010b90",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"delayedBridge\",\"type\":\"address\"},{\"internalType\":\"contract ISequencerInbox\",\"name\":\"sequencerInbox\",\"type\":\"address\"}],\"name\":\"getCountsAndAccumulators\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"counts\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/BridgeUtils.sol\":\"BridgeUtils\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/bridge/BridgeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./interfaces/IBridge.sol\\\";\\nimport \\\"./interfaces/ISequencerInbox.sol\\\";\\n\\ncontract BridgeUtils {\\n    function getCountsAndAccumulators(IBridge delayedBridge, ISequencerInbox sequencerInbox)\\n        external\\n        view\\n        returns (uint256[2] memory counts, bytes32[2] memory accs)\\n    {\\n        uint256 delayedCount = delayedBridge.messageCount();\\n        if (delayedCount > 0) {\\n            counts[0] = delayedCount;\\n            accs[0] = delayedBridge.inboxAccs(delayedCount - 1);\\n        }\\n        uint256 sequencerBatchCount = sequencerInbox.getInboxAccsLength();\\n        if (sequencerBatchCount > 0) {\\n            counts[1] = sequencerInbox.messageCount();\\n            accs[1] = sequencerInbox.inboxAccs(sequencerBatchCount - 1);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09682d2619f00907238ac8f3ae6ba7cd682b5d3b2f8fb186c3bbcd33ca503902\",\"license\":\"Apache-2.0\"},\"contracts/bridge/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    );\\n\\n    event BridgeCallTriggered(\\n        address indexed outbox,\\n        address indexed destAddr,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    event InboxToggle(address indexed inbox, bool enabled);\\n\\n    event OutboxToggle(address indexed outbox, bool enabled);\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5a30299074a31b02824bdf7fe779c8baed4385a0a340c8294de6669a2c77d478\",\"license\":\"Apache-2.0\"},\"contracts/bridge/interfaces/ISequencerInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface ISequencerInbox {\\n    event SequencerBatchDelivered(\\n        uint256 indexed firstMessageNum,\\n        bytes32 indexed beforeAcc,\\n        uint256 newMessageCount,\\n        bytes32 afterAcc,\\n        bytes transactions,\\n        uint256[] lengths,\\n        uint256[] sectionsMetadata,\\n        uint256 seqBatchIndex,\\n        address sequencer\\n    );\\n\\n    event SequencerBatchDeliveredFromOrigin(\\n        uint256 indexed firstMessageNum,\\n        bytes32 indexed beforeAcc,\\n        uint256 newMessageCount,\\n        bytes32 afterAcc,\\n        uint256 seqBatchIndex\\n    );\\n\\n    event DelayedInboxForced(\\n        uint256 indexed firstMessageNum,\\n        bytes32 indexed beforeAcc,\\n        uint256 newMessageCount,\\n        uint256 totalDelayedMessagesRead,\\n        bytes32[2] afterAccAndDelayed,\\n        uint256 seqBatchIndex\\n    );\\n\\n    /// @notice DEPRECATED - look at IsSequencerUpdated for new updates\\n    // event SequencerAddressUpdated(address newAddress);\\n\\n    event IsSequencerUpdated(address addr, bool isSequencer);\\n    event MaxDelayUpdated(uint256 newMaxDelayBlocks, uint256 newMaxDelaySeconds);\\n\\n    /// @notice DEPRECATED - look at MaxDelayUpdated for new updates\\n    // event MaxDelayBlocksUpdated(uint256 newValue);\\n    /// @notice DEPRECATED - look at MaxDelayUpdated for new updates\\n    // event MaxDelaySecondsUpdated(uint256 newValue);\\n\\n    function setMaxDelay(uint256 newMaxDelayBlocks, uint256 newMaxDelaySeconds) external;\\n\\n    function setIsSequencer(address addr, bool isSequencer) external;\\n\\n    function messageCount() external view returns (uint256);\\n\\n    function maxDelayBlocks() external view returns (uint256);\\n\\n    function maxDelaySeconds() external view returns (uint256);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function getInboxAccsLength() external view returns (uint256);\\n\\n    function proveInboxContainsMessage(bytes calldata proof, uint256 inboxCount)\\n        external\\n        view\\n        returns (uint256, bytes32);\\n\\n    /// @notice DEPRECATED - use isSequencer instead\\n    function sequencer() external view returns (address);\\n\\n    function isSequencer(address seq) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7bd1af4a70730841feaa73e6113f14048e3bb2edf168cb4e96083d5432a98688\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610372806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806301ccad0214610030575b600080fd5b61005e6004803603604081101561004657600080fd5b506001600160a01b03813581169160200135166100c5565b6040518083600260200280838360005b8381101561008657818101518382015260200161006e565b5050505090500182600260200280838360005b838110156100b1578181015183820152602001610099565b505050509050019250505060405180910390f35b6100cd61031e565b6100d561031e565b6000846001600160a01b0316633dbcc8d16040518163ffffffff1660e01b815260040160206040518083038186803b15801561011057600080fd5b505afa158015610124573d6000803e3d6000fd5b505050506040513d602081101561013a57600080fd5b5051905080156101c0578083526040805163d9dd67ab60e01b81526000198301600482015290516001600160a01b0387169163d9dd67ab916024808301926020929190829003018186803b15801561019157600080fd5b505afa1580156101a5573d6000803e3d6000fd5b505050506040513d60208110156101bb57600080fd5b505182525b6000846001600160a01b031663d9b141ff6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101fb57600080fd5b505afa15801561020f573d6000803e3d6000fd5b505050506040513d602081101561022557600080fd5b50519050801561031557846001600160a01b0316633dbcc8d16040518163ffffffff1660e01b815260040160206040518083038186803b15801561026857600080fd5b505afa15801561027c573d6000803e3d6000fd5b505050506040513d602081101561029257600080fd5b50516020808601919091526040805163d9dd67ab60e01b81526000198401600482015290516001600160a01b0388169263d9dd67ab9260248082019391829003018186803b1580156102e357600080fd5b505afa1580156102f7573d6000803e3d6000fd5b505050506040513d602081101561030d57600080fd5b505160208401525b50509250929050565b6040518060400160405280600290602082028036833750919291505056fea26469706673582212200c0d468756a7ae89f98a65897cfb93b1dc8da1550726a7b112877c243689b69e64736f6c634300060b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806301ccad0214610030575b600080fd5b61005e6004803603604081101561004657600080fd5b506001600160a01b03813581169160200135166100c5565b6040518083600260200280838360005b8381101561008657818101518382015260200161006e565b5050505090500182600260200280838360005b838110156100b1578181015183820152602001610099565b505050509050019250505060405180910390f35b6100cd61031e565b6100d561031e565b6000846001600160a01b0316633dbcc8d16040518163ffffffff1660e01b815260040160206040518083038186803b15801561011057600080fd5b505afa158015610124573d6000803e3d6000fd5b505050506040513d602081101561013a57600080fd5b5051905080156101c0578083526040805163d9dd67ab60e01b81526000198301600482015290516001600160a01b0387169163d9dd67ab916024808301926020929190829003018186803b15801561019157600080fd5b505afa1580156101a5573d6000803e3d6000fd5b505050506040513d60208110156101bb57600080fd5b505182525b6000846001600160a01b031663d9b141ff6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101fb57600080fd5b505afa15801561020f573d6000803e3d6000fd5b505050506040513d602081101561022557600080fd5b50519050801561031557846001600160a01b0316633dbcc8d16040518163ffffffff1660e01b815260040160206040518083038186803b15801561026857600080fd5b505afa15801561027c573d6000803e3d6000fd5b505050506040513d602081101561029257600080fd5b50516020808601919091526040805163d9dd67ab60e01b81526000198401600482015290516001600160a01b0388169263d9dd67ab9260248082019391829003018186803b1580156102e357600080fd5b505afa1580156102f7573d6000803e3d6000fd5b505050506040513d602081101561030d57600080fd5b505160208401525b50509250929050565b6040518060400160405280600290602082028036833750919291505056fea26469706673582212200c0d468756a7ae89f98a65897cfb93b1dc8da1550726a7b112877c243689b69e64736f6c634300060b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}