{
  "address": "0x4821C36C03E8d178e0cde67e5B46C55D46d38eb5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "TemplatesUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adminProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rollup",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sequencer",
          "type": "address"
        }
      ],
      "name": "createBridge",
      "outputs": [
        {
          "internalType": "contract Bridge",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract SequencerInbox",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract Inbox",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract RollupEventBridge",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract Outbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delayedBridgeTemplate",
      "outputs": [
        {
          "internalType": "contract Bridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inboxTemplate",
      "outputs": [
        {
          "internalType": "contract Inbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "outboxTemplate",
      "outputs": [
        {
          "internalType": "contract Outbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rollupEventBridgeTemplate",
      "outputs": [
        {
          "internalType": "contract RollupEventBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerInboxTemplate",
      "outputs": [
        {
          "internalType": "contract SequencerInbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delayedBridgeTemplate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sequencerInboxTemplate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_inboxTemplate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rollupEventBridgeTemplate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outboxTemplate",
          "type": "address"
        }
      ],
      "name": "updateTemplates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5ea4314fe000ace1b398184f2e085ae1a7c81c6a8fb9a757c7862098f47c37b5",
  "receipt": {
    "to": null,
    "from": "0x7D3D3955Fd31f22709335474e80736dd0D433cF3",
    "contractAddress": "0x4821C36C03E8d178e0cde67e5B46C55D46d38eb5",
    "transactionIndex": 0,
    "gasUsed": "8150877",
    "logsBloom": "0x
    "blockHash": "0xb5c0256520acf8d79fc285733a4ecd0961bbaa91c17d110a72661fe362aa4149",
    "transactionHash": "0x5ea4314fe000ace1b398184f2e085ae1a7c81c6a8fb9a757c7862098f47c37b5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3239884,
        "transactionHash": "0x5ea4314fe000ace1b398184f2e085ae1a7c81c6a8fb9a757c7862098f47c37b5",
        "address": "0x4821C36C03E8d178e0cde67e5B46C55D46d38eb5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007d3d3955fd31f22709335474e80736dd0d433cf3"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb5c0256520acf8d79fc285733a4ecd0961bbaa91c17d110a72661fe362aa4149"
      }
    ],
    "blockNumber": 3239884,
    "cumulativeGasUsed": "8150877",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5f404ffad369d1e6fd2cf1f0ce010b90",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TemplatesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sequencer\",\"type\":\"address\"}],\"name\":\"createBridge\",\"outputs\":[{\"internalType\":\"contract Bridge\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract SequencerInbox\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract Inbox\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract RollupEventBridge\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract Outbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayedBridgeTemplate\",\"outputs\":[{\"internalType\":\"contract Bridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inboxTemplate\",\"outputs\":[{\"internalType\":\"contract Inbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outboxTemplate\",\"outputs\":[{\"internalType\":\"contract Outbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventBridgeTemplate\",\"outputs\":[{\"internalType\":\"contract RollupEventBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerInboxTemplate\",\"outputs\":[{\"internalType\":\"contract SequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delayedBridgeTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sequencerInboxTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inboxTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rollupEventBridgeTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outboxTemplate\",\"type\":\"address\"}],\"name\":\"updateTemplates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rollup/BridgeCreator.sol\":\"BridgeCreator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"./IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy {\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 private constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) public payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _setBeacon(beacon, data);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address beacon) {\\n        bytes32 slot = _BEACON_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            beacon := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_beacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        require(\\n            Address.isContract(beacon),\\n            \\\"BeaconProxy: beacon is not a contract\\\"\\n        );\\n        require(\\n            Address.isContract(IBeacon(beacon).implementation()),\\n            \\\"BeaconProxy: beacon implementation is not a contract\\\"\\n        );\\n        bytes32 slot = _BEACON_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, beacon)\\n        }\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(_implementation(), data, \\\"BeaconProxy: function call failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4bc4f87445593e5c371454feb723d6977609c20958dfcd032668b476477a0ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x77c167740c8227e2569064dabdb2d683800f409743bda1bab8d66d5a2dae3674\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\",\"keccak256\":\"0x0414d54056b3d8f9102ae1142264e9361408397878148203ab7a25cbf6248f08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\",\"keccak256\":\"0x36cc024d326dd48b4ec20983ec4b9335b8edf44ae45ebdd5a2ea8217f872f9f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./UpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is UpgradeableProxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\\n     */\\n    constructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _setAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _admin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _admin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        require(newAdmin != address(0), \\\"TransparentUpgradeableProxy: new admin is the zero address\\\");\\n        emit AdminChanged(_admin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external virtual ifAdmin {\\n        _upgradeTo(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtual ifAdmin {\\n        _upgradeTo(newImplementation);\\n        Address.functionDelegateCall(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address adm) {\\n        bytes32 slot = _ADMIN_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            adm := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        bytes32 slot = _ADMIN_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newAdmin)\\n        }\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _admin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xf852214ea286716082f3ba480ff70bda2cbe2d11238091d2a440767d0ed49e61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) public {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0xf847ef1384c87c1484b3989ce81c6dab106a9b4e519eb587ad0e897bdf62c3f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/UpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n *\\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\n * {TransparentUpgradeableProxy}.\\n */\\ncontract UpgradeableProxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) public payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _setImplementation(_logic);\\n        if(_data.length > 0) {\\n            Address.functionDelegateCall(_logic, _data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal virtual {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\n\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x81af1059a5bd5fb25cb0351499e1d4110416f5b0000ffad6427cbf6088b193a4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"contracts/arch/Hashing.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./Value.sol\\\";\\n\\nlibrary Hashing {\\n    using Hashing for Value.Data;\\n    using Value for Value.CodePoint;\\n\\n    function keccak1(bytes32 b) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(b));\\n    }\\n\\n    function keccak2(bytes32 a, bytes32 b) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(a, b));\\n    }\\n\\n    function bytes32FromArray(\\n        bytes memory arr,\\n        uint256 offset,\\n        uint256 arrLength\\n    ) internal pure returns (uint256) {\\n        uint256 res = 0;\\n        for (uint256 i = 0; i < 32; i++) {\\n            res = res << 8;\\n            bytes1 b = arrLength > offset + i ? arr[offset + i] : bytes1(0);\\n            res = res | uint256(uint8(b));\\n        }\\n        return res;\\n    }\\n\\n    /*\\n     * !! Note that dataLength must be a power of two !!\\n     *\\n     * If you have an arbitrary data length, you can round it up with roundUpToPow2.\\n     * The boolean return value tells if the data segment data[startOffset..startOffset+dataLength] only included zeroes.\\n     * If pack is true, the returned value is the merkle hash where trailing zeroes are ignored, that is,\\n     *   if h is the smallest height for which all data[startOffset+2**h..] are zero, merkle hash of data[startOffset..startOffset+2**h] is returned.\\n     * If all elements in the data segment are zero (and pack is true), keccak1(bytes32(0)) is returned.\\n     */\\n    function merkleRoot(\\n        bytes memory data,\\n        uint256 rawDataLength,\\n        uint256 startOffset,\\n        uint256 dataLength,\\n        bool pack\\n    ) internal pure returns (bytes32, bool) {\\n        if (dataLength <= 32) {\\n            if (startOffset >= rawDataLength) {\\n                return (keccak1(bytes32(0)), true);\\n            }\\n            bytes32 res = keccak1(bytes32(bytes32FromArray(data, startOffset, rawDataLength)));\\n            return (res, res == keccak1(bytes32(0)));\\n        }\\n        (bytes32 h2, bool zero2) = merkleRoot(\\n            data,\\n            rawDataLength,\\n            startOffset + dataLength / 2,\\n            dataLength / 2,\\n            false\\n        );\\n        if (zero2 && pack) {\\n            return merkleRoot(data, rawDataLength, startOffset, dataLength / 2, pack);\\n        }\\n        (bytes32 h1, bool zero1) = merkleRoot(\\n            data,\\n            rawDataLength,\\n            startOffset,\\n            dataLength / 2,\\n            false\\n        );\\n        return (keccak2(h1, h2), zero1 && zero2);\\n    }\\n\\n    function roundUpToPow2(uint256 len) internal pure returns (uint256) {\\n        if (len <= 1) return 1;\\n        else return 2 * roundUpToPow2((len + 1) / 2);\\n    }\\n\\n    function bytesToBufferHash(\\n        bytes memory buf,\\n        uint256 startOffset,\\n        uint256 length\\n    ) internal pure returns (bytes32) {\\n        (bytes32 mhash, ) = merkleRoot(\\n            buf,\\n            startOffset + length,\\n            startOffset,\\n            roundUpToPow2(length),\\n            true\\n        );\\n        return keccak2(bytes32(uint256(123)), mhash);\\n    }\\n\\n    function hashInt(uint256 val) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(val));\\n    }\\n\\n    function hashCodePoint(Value.CodePoint memory cp) internal pure returns (bytes32) {\\n        assert(cp.immediate.length < 2);\\n        if (cp.immediate.length == 0) {\\n            return\\n                keccak256(abi.encodePacked(Value.codePointTypeCode(), cp.opcode, cp.nextCodePoint));\\n        }\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    Value.codePointTypeCode(),\\n                    cp.opcode,\\n                    cp.immediate[0].hash(),\\n                    cp.nextCodePoint\\n                )\\n            );\\n    }\\n\\n    function hashTuplePreImage(bytes32 innerHash, uint256 valueSize)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(uint8(Value.tupleTypeCode()), innerHash, valueSize));\\n    }\\n\\n    function hash(Value.Data memory val) internal pure returns (bytes32) {\\n        if (val.typeCode == Value.intTypeCode()) {\\n            return hashInt(val.intVal);\\n        } else if (val.typeCode == Value.codePointTypeCode()) {\\n            return hashCodePoint(val.cpVal);\\n        } else if (val.typeCode == Value.tuplePreImageTypeCode()) {\\n            return hashTuplePreImage(bytes32(val.intVal), val.size);\\n        } else if (val.typeCode == Value.tupleTypeCode()) {\\n            Value.Data memory preImage = getTuplePreImage(val.tupleVal);\\n            return preImage.hash();\\n        } else if (val.typeCode == Value.hashOnlyTypeCode()) {\\n            return bytes32(val.intVal);\\n        } else if (val.typeCode == Value.bufferTypeCode()) {\\n            return keccak256(abi.encodePacked(uint256(123), val.bufferHash));\\n        } else {\\n            require(false, \\\"Invalid type code\\\");\\n        }\\n    }\\n\\n    function getTuplePreImage(Value.Data[] memory vals) internal pure returns (Value.Data memory) {\\n        require(vals.length <= 8, \\\"Invalid tuple length\\\");\\n        bytes32[] memory hashes = new bytes32[](vals.length);\\n        uint256 hashCount = hashes.length;\\n        uint256 size = 1;\\n        for (uint256 i = 0; i < hashCount; i++) {\\n            hashes[i] = vals[i].hash();\\n            size += vals[i].size;\\n        }\\n        bytes32 firstHash = keccak256(abi.encodePacked(uint8(hashes.length), hashes));\\n        return Value.newTuplePreImage(firstHash, size);\\n    }\\n}\\n\",\"keccak256\":\"0x33b99b7bca64988d96b8b2390ffc6b87265b8172b70883fb90091ca447384670\",\"license\":\"Apache-2.0\"},\"contracts/arch/IOneStepProof.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"../bridge/interfaces/IBridge.sol\\\";\\nimport \\\"../bridge/interfaces/ISequencerInbox.sol\\\";\\n\\ninterface IOneStepProof {\\n    // Bridges is sequencer bridge then delayed bridge\\n    function executeStep(\\n        address[2] calldata bridges,\\n        uint256 initialMessagesRead,\\n        bytes32[2] calldata accs,\\n        bytes calldata proof,\\n        bytes calldata bproof\\n    )\\n        external\\n        view\\n        returns (\\n            uint64 gas,\\n            uint256 afterMessagesRead,\\n            bytes32[4] memory fields\\n        );\\n\\n    function executeStepDebug(\\n        address[2] calldata bridges,\\n        uint256 initialMessagesRead,\\n        bytes32[2] calldata accs,\\n        bytes calldata proof,\\n        bytes calldata bproof\\n    ) external view returns (string memory startMachine, string memory afterMachine);\\n}\\n\",\"keccak256\":\"0xfe54321c0cc929daa79d94c379630ac3106c0e040e7cfd1db4821257b4919808\",\"license\":\"Apache-2.0\"},\"contracts/arch/Marshaling.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./Value.sol\\\";\\nimport \\\"./Hashing.sol\\\";\\n\\nimport \\\"../libraries/BytesLib.sol\\\";\\n\\nlibrary Marshaling {\\n    using BytesLib for bytes;\\n    using Value for Value.Data;\\n\\n    function deserializeHashPreImage(bytes memory data, uint256 startOffset)\\n        internal\\n        pure\\n        returns (uint256 offset, Value.Data memory value)\\n    {\\n        require(data.length >= startOffset && data.length - startOffset >= 64, \\\"too short\\\");\\n        bytes32 hashData;\\n        uint256 size;\\n        (offset, hashData) = extractBytes32(data, startOffset);\\n        (offset, size) = deserializeInt(data, offset);\\n        return (offset, Value.newTuplePreImage(hashData, size));\\n    }\\n\\n    function deserializeInt(bytes memory data, uint256 startOffset)\\n        internal\\n        pure\\n        returns (\\n            uint256, // offset\\n            uint256 // val\\n        )\\n    {\\n        require(data.length >= startOffset && data.length - startOffset >= 32, \\\"too short\\\");\\n        return (startOffset + 32, data.toUint(startOffset));\\n    }\\n\\n    function deserializeBytes32(bytes memory data, uint256 startOffset)\\n        internal\\n        pure\\n        returns (\\n            uint256, // offset\\n            bytes32 // val\\n        )\\n    {\\n        require(data.length >= startOffset && data.length - startOffset >= 32, \\\"too short\\\");\\n        return (startOffset + 32, data.toBytes32(startOffset));\\n    }\\n\\n    function deserializeCodePoint(bytes memory data, uint256 startOffset)\\n        internal\\n        pure\\n        returns (\\n            uint256, // offset\\n            Value.Data memory // val\\n        )\\n    {\\n        uint256 offset = startOffset;\\n        uint8 immediateType;\\n        uint8 opCode;\\n        Value.Data memory immediate;\\n        bytes32 nextHash;\\n\\n        (offset, immediateType) = extractUint8(data, offset);\\n        (offset, opCode) = extractUint8(data, offset);\\n        if (immediateType == 1) {\\n            (offset, immediate) = deserialize(data, offset);\\n        }\\n        (offset, nextHash) = extractBytes32(data, offset);\\n        if (immediateType == 1) {\\n            return (offset, Value.newCodePoint(opCode, nextHash, immediate));\\n        }\\n        return (offset, Value.newCodePoint(opCode, nextHash));\\n    }\\n\\n    function deserializeTuple(\\n        uint8 memberCount,\\n        bytes memory data,\\n        uint256 startOffset\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256, // offset\\n            Value.Data[] memory // val\\n        )\\n    {\\n        uint256 offset = startOffset;\\n        Value.Data[] memory members = new Value.Data[](memberCount);\\n        for (uint8 i = 0; i < memberCount; i++) {\\n            (offset, members[i]) = deserialize(data, offset);\\n        }\\n        return (offset, members);\\n    }\\n\\n    function deserialize(bytes memory data, uint256 startOffset)\\n        internal\\n        pure\\n        returns (\\n            uint256, // offset\\n            Value.Data memory // val\\n        )\\n    {\\n        require(startOffset < data.length, \\\"invalid offset\\\");\\n        (uint256 offset, uint8 valType) = extractUint8(data, startOffset);\\n        if (valType == Value.intTypeCode()) {\\n            uint256 intVal;\\n            (offset, intVal) = deserializeInt(data, offset);\\n            return (offset, Value.newInt(intVal));\\n        } else if (valType == Value.codePointTypeCode()) {\\n            return deserializeCodePoint(data, offset);\\n        } else if (valType == Value.bufferTypeCode()) {\\n            bytes32 hashVal;\\n            (offset, hashVal) = deserializeBytes32(data, offset);\\n            return (offset, Value.newBuffer(hashVal));\\n        } else if (valType == Value.tuplePreImageTypeCode()) {\\n            return deserializeHashPreImage(data, offset);\\n        } else if (valType >= Value.tupleTypeCode() && valType < Value.valueTypeCode()) {\\n            uint8 tupLength = uint8(valType - Value.tupleTypeCode());\\n            Value.Data[] memory tupleVal;\\n            (offset, tupleVal) = deserializeTuple(tupLength, data, offset);\\n            return (offset, Value.newTuple(tupleVal));\\n        }\\n        require(false, \\\"invalid typecode\\\");\\n    }\\n\\n    function extractUint8(bytes memory data, uint256 startOffset)\\n        private\\n        pure\\n        returns (\\n            uint256, // offset\\n            uint8 // val\\n        )\\n    {\\n        return (startOffset + 1, uint8(data[startOffset]));\\n    }\\n\\n    function extractBytes32(bytes memory data, uint256 startOffset)\\n        private\\n        pure\\n        returns (\\n            uint256, // offset\\n            bytes32 // val\\n        )\\n    {\\n        return (startOffset + 32, data.toBytes32(startOffset));\\n    }\\n}\\n\",\"keccak256\":\"0x151d631c4637a22e96caff6af30e52b143a305117a07274549eaf77f6a9dcc62\",\"license\":\"Apache-2.0\"},\"contracts/arch/Value.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nlibrary Value {\\n    uint8 internal constant INT_TYPECODE = 0;\\n    uint8 internal constant CODE_POINT_TYPECODE = 1;\\n    uint8 internal constant HASH_PRE_IMAGE_TYPECODE = 2;\\n    uint8 internal constant TUPLE_TYPECODE = 3;\\n    uint8 internal constant BUFFER_TYPECODE = TUPLE_TYPECODE + 9;\\n    // All values received from clients will have type codes less than the VALUE_TYPE_COUNT\\n    uint8 internal constant VALUE_TYPE_COUNT = TUPLE_TYPECODE + 10;\\n\\n    // The following types do not show up in the marshalled format and is\\n    // only used for internal tracking purposes\\n    uint8 internal constant HASH_ONLY = 100;\\n\\n    struct CodePoint {\\n        uint8 opcode;\\n        bytes32 nextCodePoint;\\n        Data[] immediate;\\n    }\\n\\n    struct Data {\\n        uint256 intVal;\\n        CodePoint cpVal;\\n        Data[] tupleVal;\\n        bytes32 bufferHash;\\n        uint8 typeCode;\\n        uint256 size;\\n    }\\n\\n    function tupleTypeCode() internal pure returns (uint8) {\\n        return TUPLE_TYPECODE;\\n    }\\n\\n    function tuplePreImageTypeCode() internal pure returns (uint8) {\\n        return HASH_PRE_IMAGE_TYPECODE;\\n    }\\n\\n    function intTypeCode() internal pure returns (uint8) {\\n        return INT_TYPECODE;\\n    }\\n\\n    function bufferTypeCode() internal pure returns (uint8) {\\n        return BUFFER_TYPECODE;\\n    }\\n\\n    function codePointTypeCode() internal pure returns (uint8) {\\n        return CODE_POINT_TYPECODE;\\n    }\\n\\n    function valueTypeCode() internal pure returns (uint8) {\\n        return VALUE_TYPE_COUNT;\\n    }\\n\\n    function hashOnlyTypeCode() internal pure returns (uint8) {\\n        return HASH_ONLY;\\n    }\\n\\n    function isValidTupleSize(uint256 size) internal pure returns (bool) {\\n        return size <= 8;\\n    }\\n\\n    function typeCodeVal(Data memory val) internal pure returns (Data memory) {\\n        if (val.typeCode == 2) {\\n            // Map HashPreImage to Tuple\\n            return newInt(TUPLE_TYPECODE);\\n        }\\n        return newInt(val.typeCode);\\n    }\\n\\n    function valLength(Data memory val) internal pure returns (uint8) {\\n        if (val.typeCode == TUPLE_TYPECODE) {\\n            return uint8(val.tupleVal.length);\\n        } else {\\n            return 1;\\n        }\\n    }\\n\\n    function isInt(Data memory val) internal pure returns (bool) {\\n        return val.typeCode == INT_TYPECODE;\\n    }\\n\\n    function isInt64(Data memory val) internal pure returns (bool) {\\n        return val.typeCode == INT_TYPECODE && val.intVal < (1 << 64);\\n    }\\n\\n    function isCodePoint(Data memory val) internal pure returns (bool) {\\n        return val.typeCode == CODE_POINT_TYPECODE;\\n    }\\n\\n    function isTuple(Data memory val) internal pure returns (bool) {\\n        return val.typeCode == TUPLE_TYPECODE;\\n    }\\n\\n    function isBuffer(Data memory val) internal pure returns (bool) {\\n        return val.typeCode == BUFFER_TYPECODE;\\n    }\\n\\n    function newEmptyTuple() internal pure returns (Data memory) {\\n        return newTuple(new Data[](0));\\n    }\\n\\n    function newBoolean(bool val) internal pure returns (Data memory) {\\n        if (val) {\\n            return newInt(1);\\n        } else {\\n            return newInt(0);\\n        }\\n    }\\n\\n    function newInt(uint256 _val) internal pure returns (Data memory) {\\n        return\\n            Data(_val, CodePoint(0, 0, new Data[](0)), new Data[](0), 0, INT_TYPECODE, uint256(1));\\n    }\\n\\n    function newHashedValue(bytes32 valueHash, uint256 valueSize)\\n        internal\\n        pure\\n        returns (Data memory)\\n    {\\n        return\\n            Data(\\n                uint256(valueHash),\\n                CodePoint(0, 0, new Data[](0)),\\n                new Data[](0),\\n                0,\\n                HASH_ONLY,\\n                valueSize\\n            );\\n    }\\n\\n    function newTuple(Data[] memory _val) internal pure returns (Data memory) {\\n        require(isValidTupleSize(_val.length), \\\"Tuple must have valid size\\\");\\n        uint256 size = 1;\\n\\n        for (uint256 i = 0; i < _val.length; i++) {\\n            size += _val[i].size;\\n        }\\n\\n        return Data(0, CodePoint(0, 0, new Data[](0)), _val, 0, TUPLE_TYPECODE, size);\\n    }\\n\\n    function newTuplePreImage(bytes32 preImageHash, uint256 size)\\n        internal\\n        pure\\n        returns (Data memory)\\n    {\\n        return\\n            Data(\\n                uint256(preImageHash),\\n                CodePoint(0, 0, new Data[](0)),\\n                new Data[](0),\\n                0,\\n                HASH_PRE_IMAGE_TYPECODE,\\n                size\\n            );\\n    }\\n\\n    function newCodePoint(uint8 opCode, bytes32 nextHash) internal pure returns (Data memory) {\\n        return newCodePoint(CodePoint(opCode, nextHash, new Data[](0)));\\n    }\\n\\n    function newCodePoint(\\n        uint8 opCode,\\n        bytes32 nextHash,\\n        Data memory immediate\\n    ) internal pure returns (Data memory) {\\n        Data[] memory imm = new Data[](1);\\n        imm[0] = immediate;\\n        return newCodePoint(CodePoint(opCode, nextHash, imm));\\n    }\\n\\n    function newCodePoint(CodePoint memory _val) private pure returns (Data memory) {\\n        return Data(0, _val, new Data[](0), 0, CODE_POINT_TYPECODE, uint256(1));\\n    }\\n\\n    function newBuffer(bytes32 bufHash) internal pure returns (Data memory) {\\n        return\\n            Data(\\n                uint256(0),\\n                CodePoint(0, 0, new Data[](0)),\\n                new Data[](0),\\n                bufHash,\\n                BUFFER_TYPECODE,\\n                uint256(1)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x942c53ec15cf5b85cdf62cd8781f89d9981a489126cca1be44bc526fff865765\",\"license\":\"Apache-2.0\"},\"contracts/bridge/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./Inbox.sol\\\";\\nimport \\\"./Outbox.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./interfaces/IBridge.sol\\\";\\n\\ncontract Bridge is OwnableUpgradeable, IBridge {\\n    using Address for address;\\n    struct InOutInfo {\\n        uint256 index;\\n        bool allowed;\\n    }\\n\\n    mapping(address => InOutInfo) private allowedInboxesMap;\\n    mapping(address => InOutInfo) private allowedOutboxesMap;\\n\\n    address[] public allowedInboxList;\\n    address[] public allowedOutboxList;\\n\\n    address public override activeOutbox;\\n\\n    // Accumulator for delayed inbox; tail represents hash of the current state; each element represents the inclusion of a new message.\\n    bytes32[] public override inboxAccs;\\n\\n    function initialize() external initializer {\\n        __Ownable_init();\\n    }\\n\\n    function allowedInboxes(address inbox) external view override returns (bool) {\\n        return allowedInboxesMap[inbox].allowed;\\n    }\\n\\n    function allowedOutboxes(address outbox) external view override returns (bool) {\\n        return allowedOutboxesMap[outbox].allowed;\\n    }\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable override returns (uint256) {\\n        require(allowedInboxesMap[msg.sender].allowed, \\\"NOT_FROM_INBOX\\\");\\n        return\\n            addMessageToInbox(\\n                kind,\\n                sender,\\n                block.number,\\n                block.timestamp, // solhint-disable-line not-rely-on-time\\n                tx.gasprice,\\n                messageDataHash\\n            );\\n    }\\n\\n    function addMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        uint256 blockNumber,\\n        uint256 blockTimestamp,\\n        uint256 gasPrice,\\n        bytes32 messageDataHash\\n    ) internal returns (uint256) {\\n        uint256 count = inboxAccs.length;\\n        bytes32 messageHash = Messages.messageHash(\\n            kind,\\n            sender,\\n            blockNumber,\\n            blockTimestamp,\\n            count,\\n            gasPrice,\\n            messageDataHash\\n        );\\n        bytes32 prevAcc = 0;\\n        if (count > 0) {\\n            prevAcc = inboxAccs[count - 1];\\n        }\\n        inboxAccs.push(Messages.addMessageToInbox(prevAcc, messageHash));\\n        emit MessageDelivered(count, prevAcc, msg.sender, kind, sender, messageDataHash);\\n        return count;\\n    }\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external override returns (bool success, bytes memory returnData) {\\n        require(allowedOutboxesMap[msg.sender].allowed, \\\"NOT_FROM_OUTBOX\\\");\\n        if (data.length > 0) require(destAddr.isContract(), \\\"NO_CODE_AT_DEST\\\");\\n        address currentOutbox = activeOutbox;\\n        activeOutbox = msg.sender;\\n        // We set and reset active outbox around external call so activeOutbox remains valid during call\\n        (success, returnData) = destAddr.call{ value: amount }(data);\\n        activeOutbox = currentOutbox;\\n        emit BridgeCallTriggered(msg.sender, destAddr, amount, data);\\n    }\\n\\n    function setInbox(address inbox, bool enabled) external override onlyOwner {\\n        InOutInfo storage info = allowedInboxesMap[inbox];\\n        bool alreadyEnabled = info.allowed;\\n        emit InboxToggle(inbox, enabled);\\n        if ((alreadyEnabled && enabled) || (!alreadyEnabled && !enabled)) {\\n            return;\\n        }\\n        if (enabled) {\\n            allowedInboxesMap[inbox] = InOutInfo(allowedInboxList.length, true);\\n            allowedInboxList.push(inbox);\\n        } else {\\n            allowedInboxList[info.index] = allowedInboxList[allowedInboxList.length - 1];\\n            allowedInboxesMap[allowedInboxList[info.index]].index = info.index;\\n            allowedInboxList.pop();\\n            delete allowedInboxesMap[inbox];\\n        }\\n    }\\n\\n    function setOutbox(address outbox, bool enabled) external override onlyOwner {\\n        InOutInfo storage info = allowedOutboxesMap[outbox];\\n        bool alreadyEnabled = info.allowed;\\n        emit OutboxToggle(outbox, enabled);\\n        if ((alreadyEnabled && enabled) || (!alreadyEnabled && !enabled)) {\\n            return;\\n        }\\n        if (enabled) {\\n            allowedOutboxesMap[outbox] = InOutInfo(allowedOutboxList.length, true);\\n            allowedOutboxList.push(outbox);\\n        } else {\\n            allowedOutboxList[info.index] = allowedOutboxList[allowedOutboxList.length - 1];\\n            allowedOutboxesMap[allowedOutboxList[info.index]].index = info.index;\\n            allowedOutboxList.pop();\\n            delete allowedOutboxesMap[outbox];\\n        }\\n    }\\n\\n    function messageCount() external view override returns (uint256) {\\n        return inboxAccs.length;\\n    }\\n}\\n\",\"keccak256\":\"0x8ad4ca347bf2b2a2a7ca23c26d1ee7394b7fe455a1ff673256052c75ed1fb55a\",\"license\":\"Apache-2.0\"},\"contracts/bridge/Inbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./interfaces/IInbox.sol\\\";\\nimport \\\"./interfaces/IBridge.sol\\\";\\nimport \\\"../rollup/Rollup.sol\\\";\\n\\nimport \\\"./Messages.sol\\\";\\nimport \\\"../libraries/Cloneable.sol\\\";\\nimport \\\"../libraries/Whitelist.sol\\\";\\nimport \\\"../libraries/ProxyUtil.sol\\\";\\nimport \\\"../libraries/AddressAliasHelper.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./Bridge.sol\\\";\\n\\ncontract Inbox is IInbox, WhitelistConsumer, Cloneable {\\n    uint8 internal constant ETH_TRANSFER = 0;\\n    uint8 internal constant L2_MSG = 3;\\n    uint8 internal constant L1MessageType_L2FundedByL1 = 7;\\n    uint8 internal constant L1MessageType_submitRetryableTx = 9;\\n\\n    uint8 internal constant L2MessageType_unsignedEOATx = 0;\\n    uint8 internal constant L2MessageType_unsignedContractTx = 1;\\n\\n    IBridge public override bridge;\\n\\n    bool public isCreateRetryablePaused;\\n    bool public shouldRewriteSender;\\n\\n    function initialize(IBridge _bridge, address _whitelist) external {\\n        require(address(bridge) == address(0), \\\"ALREADY_INIT\\\");\\n        bridge = _bridge;\\n        WhitelistConsumer.whitelist = _whitelist;\\n    }\\n\\n    /**\\n     * @notice Send a generic L2 message to the chain\\n     * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\\n     * @param messageData Data of the message being sent\\n     */\\n    function sendL2MessageFromOrigin(bytes calldata messageData)\\n        external\\n        onlyWhitelisted\\n        returns (uint256)\\n    {\\n        // solhint-disable-next-line avoid-tx-origin\\n        require(msg.sender == tx.origin, \\\"origin only\\\");\\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\\n        emit InboxMessageDeliveredFromOrigin(msgNum);\\n        return msgNum;\\n    }\\n\\n    /**\\n     * @notice Send a generic L2 message to the chain\\n     * @dev This method can be used to send any type of message that doesn't require L1 validation\\n     * @param messageData Data of the message being sent\\n     */\\n    function sendL2Message(bytes calldata messageData)\\n        external\\n        override\\n        onlyWhitelisted\\n        returns (uint256)\\n    {\\n        uint256 msgNum = deliverToBridge(L2_MSG, msg.sender, keccak256(messageData));\\n        emit InboxMessageDelivered(msgNum, messageData);\\n        return msgNum;\\n    }\\n\\n    function sendL1FundedUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable virtual override onlyWhitelisted returns (uint256) {\\n        return\\n            _deliverMessage(\\n                L1MessageType_L2FundedByL1,\\n                msg.sender,\\n                abi.encodePacked(\\n                    L2MessageType_unsignedEOATx,\\n                    maxGas,\\n                    gasPriceBid,\\n                    nonce,\\n                    uint256(uint160(bytes20(destAddr))),\\n                    msg.value,\\n                    data\\n                )\\n            );\\n    }\\n\\n    function sendL1FundedContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable virtual override onlyWhitelisted returns (uint256) {\\n        return\\n            _deliverMessage(\\n                L1MessageType_L2FundedByL1,\\n                msg.sender,\\n                abi.encodePacked(\\n                    L2MessageType_unsignedContractTx,\\n                    maxGas,\\n                    gasPriceBid,\\n                    uint256(uint160(bytes20(destAddr))),\\n                    msg.value,\\n                    data\\n                )\\n            );\\n    }\\n\\n    function sendUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external virtual override onlyWhitelisted returns (uint256) {\\n        return\\n            _deliverMessage(\\n                L2_MSG,\\n                msg.sender,\\n                abi.encodePacked(\\n                    L2MessageType_unsignedEOATx,\\n                    maxGas,\\n                    gasPriceBid,\\n                    nonce,\\n                    uint256(uint160(bytes20(destAddr))),\\n                    amount,\\n                    data\\n                )\\n            );\\n    }\\n\\n    function sendContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external virtual override onlyWhitelisted returns (uint256) {\\n        return\\n            _deliverMessage(\\n                L2_MSG,\\n                msg.sender,\\n                abi.encodePacked(\\n                    L2MessageType_unsignedContractTx,\\n                    maxGas,\\n                    gasPriceBid,\\n                    uint256(uint160(bytes20(destAddr))),\\n                    amount,\\n                    data\\n                )\\n            );\\n    }\\n\\n    modifier onlyOwner() {\\n        // the rollup contract owns the bridge\\n        address rollup = Bridge(address(bridge)).owner();\\n        // we want to validate the owner of the rollup\\n        address owner = RollupBase(rollup).owner();\\n        require(msg.sender == owner, \\\"NOT_ROLLUP\\\");\\n        _;\\n    }\\n\\n    event PauseToggled(bool enabled);\\n\\n    /// @notice pauses creating retryables\\n    function pauseCreateRetryables() external override onlyOwner {\\n        require(!isCreateRetryablePaused, \\\"ALREADY_PAUSED\\\");\\n        isCreateRetryablePaused = true;\\n        emit PauseToggled(true);\\n    }\\n\\n    /// @notice unpauses creating retryables\\n    function unpauseCreateRetryables() external override onlyOwner {\\n        require(isCreateRetryablePaused, \\\"NOT_PAUSED\\\");\\n        isCreateRetryablePaused = false;\\n        emit PauseToggled(false);\\n    }\\n\\n    event RewriteToggled(bool enabled);\\n\\n    /// @notice start rewriting addresses in eth deposits\\n    function startRewriteAddress() external override onlyOwner {\\n        require(!shouldRewriteSender, \\\"ALREADY_REWRITING\\\");\\n        shouldRewriteSender = true;\\n        emit RewriteToggled(true);\\n    }\\n\\n    /// @notice stop rewriting addresses in eth deposits\\n    function stopRewriteAddress() external override onlyOwner {\\n        require(shouldRewriteSender, \\\"NOT_REWRITING\\\");\\n        shouldRewriteSender = false;\\n        emit RewriteToggled(false);\\n    }\\n\\n    /// @notice deposit eth from L1 to L2\\n    /// @dev this function should not be called inside contract constructors\\n    function depositEth(uint256 maxSubmissionCost)\\n        external\\n        payable\\n        virtual\\n        override\\n        onlyWhitelisted\\n        returns (uint256)\\n    {\\n        require(!isCreateRetryablePaused, \\\"CREATE_RETRYABLES_PAUSED\\\");\\n        address sender = msg.sender;\\n        address destinationAddress = msg.sender;\\n\\n        if (shouldRewriteSender) {\\n            if (!Address.isContract(sender) && tx.origin == msg.sender) {\\n                // isContract check fails if this function is called during a contract's constructor.\\n                // We don't adjust the address for calls coming from L1 contracts since their addresses get remapped\\n                // If the caller is an EOA, we adjust the address.\\n                // This is needed because unsigned messages to the L2 (such as retryables)\\n                // have the L1 sender address mapped.\\n                // Here we preemptively reverse the mapping for EOAs so deposits work as expected\\n                sender = AddressAliasHelper.undoL1ToL2Alias(sender);\\n            } else {\\n                destinationAddress = AddressAliasHelper.applyL1ToL2Alias(destinationAddress);\\n            }\\n        }\\n\\n        return\\n            _deliverMessage(\\n                L1MessageType_submitRetryableTx,\\n                sender,\\n                abi.encodePacked(\\n                    // the beneficiary and other refund addresses don't get rewritten by arb-os\\n                    // so we use the original msg.sender value\\n                    uint256(uint160(bytes20(destinationAddress))),\\n                    uint256(0),\\n                    msg.value,\\n                    maxSubmissionCost,\\n                    uint256(uint160(bytes20(destinationAddress))),\\n                    uint256(uint160(bytes20(destinationAddress))),\\n                    uint256(0),\\n                    uint256(0),\\n                    uint256(0),\\n                    \\\"\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress). createRetryableTicket method is the recommended standard.\\n     * @param destAddr destination L2 contract address\\n     * @param l2CallValue call value for retryable L2 message\\n     * @param  maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\\n     * @param excessFeeRefundAddress maxgas x gasprice - execution cost gets credited here on L2 balance\\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\\n     * @param maxGas Max gas deducted from user's L2 balance to cover L2 execution\\n     * @param gasPriceBid price bid for L2 execution\\n     * @param data ABI encoded data of L2 message\\n     * @return unique id for retryable transaction (keccak256(requestID, uint(0) )\\n     */\\n    function createRetryableTicketNoRefundAliasRewrite(\\n        address destAddr,\\n        uint256 l2CallValue,\\n        uint256 maxSubmissionCost,\\n        address excessFeeRefundAddress,\\n        address callValueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) public payable virtual onlyWhitelisted returns (uint256) {\\n        require(!isCreateRetryablePaused, \\\"CREATE_RETRYABLES_PAUSED\\\");\\n\\n        return\\n            _deliverMessage(\\n                L1MessageType_submitRetryableTx,\\n                msg.sender,\\n                abi.encodePacked(\\n                    uint256(uint160(bytes20(destAddr))),\\n                    l2CallValue,\\n                    msg.value,\\n                    maxSubmissionCost,\\n                    uint256(uint160(bytes20(excessFeeRefundAddress))),\\n                    uint256(uint160(bytes20(callValueRefundAddress))),\\n                    maxGas,\\n                    gasPriceBid,\\n                    data.length,\\n                    data\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\\n     * @param destAddr destination L2 contract address\\n     * @param l2CallValue call value for retryable L2 message\\n     * @param  maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\\n     * @param excessFeeRefundAddress maxgas x gasprice - execution cost gets credited here on L2 balance\\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\\n     * @param maxGas Max gas deducted from user's L2 balance to cover L2 execution\\n     * @param gasPriceBid price bid for L2 execution\\n     * @param data ABI encoded data of L2 message\\n     * @return unique id for retryable transaction (keccak256(requestID, uint(0) )\\n     */\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 l2CallValue,\\n        uint256 maxSubmissionCost,\\n        address excessFeeRefundAddress,\\n        address callValueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable virtual override onlyWhitelisted returns (uint256) {\\n        // if a refund address is a contract, we apply the alias to it\\n        // so that it can access its funds on the L2\\n        // since the beneficiary and other refund addresses don't get rewritten by arb-os\\n        if (shouldRewriteSender && Address.isContract(excessFeeRefundAddress)) {\\n            excessFeeRefundAddress = AddressAliasHelper.applyL1ToL2Alias(excessFeeRefundAddress);\\n        }\\n        if (shouldRewriteSender && Address.isContract(callValueRefundAddress)) {\\n            // this is the beneficiary. be careful since this is the address that can cancel the retryable in the L2\\n            callValueRefundAddress = AddressAliasHelper.applyL1ToL2Alias(callValueRefundAddress);\\n        }\\n\\n        return\\n            createRetryableTicketNoRefundAliasRewrite(\\n                destAddr,\\n                l2CallValue,\\n                maxSubmissionCost,\\n                excessFeeRefundAddress,\\n                callValueRefundAddress,\\n                maxGas,\\n                gasPriceBid,\\n                data\\n            );\\n    }\\n\\n    function _deliverMessage(\\n        uint8 _kind,\\n        address _sender,\\n        bytes memory _messageData\\n    ) internal returns (uint256) {\\n        uint256 msgNum = deliverToBridge(_kind, _sender, keccak256(_messageData));\\n        emit InboxMessageDelivered(msgNum, _messageData);\\n        return msgNum;\\n    }\\n\\n    function deliverToBridge(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) internal returns (uint256) {\\n        return bridge.deliverMessageToInbox{ value: msg.value }(kind, sender, messageDataHash);\\n    }\\n}\\n\",\"keccak256\":\"0x56fcf4e23a4a4519dca1f7defebfbfa64c0d73b9303b1cec459e0c6375781d57\",\"license\":\"Apache-2.0\"},\"contracts/bridge/Messages.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nlibrary Messages {\\n    function messageHash(\\n        uint8 kind,\\n        address sender,\\n        uint256 blockNumber,\\n        uint256 timestamp,\\n        uint256 inboxSeqNum,\\n        uint256 gasPriceL1,\\n        bytes32 messageDataHash\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    kind,\\n                    sender,\\n                    blockNumber,\\n                    timestamp,\\n                    inboxSeqNum,\\n                    gasPriceL1,\\n                    messageDataHash\\n                )\\n            );\\n    }\\n\\n    function addMessageToInbox(bytes32 inbox, bytes32 message) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(inbox, message));\\n    }\\n}\\n\",\"keccak256\":\"0xb552340ca4b43016b6bc1fb09345319f6b5e372661d5356f228489ee9a40e79f\",\"license\":\"Apache-2.0\"},\"contracts/bridge/Outbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./interfaces/IOutbox.sol\\\";\\nimport \\\"./interfaces/IBridge.sol\\\";\\n\\nimport \\\"./Messages.sol\\\";\\nimport \\\"../libraries/MerkleLib.sol\\\";\\nimport \\\"../libraries/BytesLib.sol\\\";\\nimport \\\"../libraries/Cloneable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/proxy/BeaconProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/UpgradeableBeacon.sol\\\";\\n\\ncontract Outbox is IOutbox, Cloneable {\\n    using BytesLib for bytes;\\n\\n    struct OutboxEntry {\\n        // merkle root of outputs\\n        bytes32 root;\\n        // mapping from output id => is spent\\n        mapping(bytes32 => bool) spentOutput;\\n    }\\n\\n    bytes1 internal constant MSG_ROOT = 0;\\n\\n    uint8 internal constant SendType_sendTxToL1 = 3;\\n\\n    address public rollup;\\n    IBridge public bridge;\\n\\n    mapping(uint256 => OutboxEntry) public outboxEntries;\\n\\n    struct L2ToL1Context {\\n        uint128 l2Block;\\n        uint128 l1Block;\\n        uint128 timestamp;\\n        uint128 batchNum;\\n        bytes32 outputId;\\n        address sender;\\n    }\\n    // Note, these variables are set and then wiped during a single transaction.\\n    // Therefore their values don't need to be maintained, and their slots will\\n    // be empty outside of transactions\\n    L2ToL1Context internal context;\\n    uint128 public constant OUTBOX_VERSION = 1;\\n\\n    function initialize(address _rollup, IBridge _bridge) external {\\n        require(rollup == address(0), \\\"ALREADY_INIT\\\");\\n        rollup = _rollup;\\n        bridge = _bridge;\\n    }\\n\\n    /// @notice When l2ToL1Sender returns a nonzero address, the message was originated by an L2 account\\n    /// When the return value is zero, that means this is a system message\\n    /// @dev the l2ToL1Sender behaves as the tx.origin, the msg.sender should be validated to protect against reentrancies\\n    function l2ToL1Sender() external view override returns (address) {\\n        return context.sender;\\n    }\\n\\n    function l2ToL1Block() external view override returns (uint256) {\\n        return uint256(context.l2Block);\\n    }\\n\\n    function l2ToL1EthBlock() external view override returns (uint256) {\\n        return uint256(context.l1Block);\\n    }\\n\\n    function l2ToL1Timestamp() external view override returns (uint256) {\\n        return uint256(context.timestamp);\\n    }\\n\\n    function l2ToL1BatchNum() external view override returns (uint256) {\\n        return uint256(context.batchNum);\\n    }\\n\\n    function l2ToL1OutputId() external view override returns (bytes32) {\\n        return context.outputId;\\n    }\\n\\n    function processOutgoingMessages(bytes calldata sendsData, uint256[] calldata sendLengths)\\n        external\\n        override\\n    {\\n        require(msg.sender == rollup, \\\"ONLY_ROLLUP\\\");\\n        // If we've reached here, we've already confirmed that sum(sendLengths) == sendsData.length\\n        uint256 messageCount = sendLengths.length;\\n        uint256 offset = 0;\\n        for (uint256 i = 0; i < messageCount; i++) {\\n            handleOutgoingMessage(bytes(sendsData[offset:offset + sendLengths[i]]));\\n            offset += sendLengths[i];\\n        }\\n    }\\n\\n    function handleOutgoingMessage(bytes memory data) private {\\n        // Otherwise we have an unsupported message type and we skip the message\\n        if (data[0] == MSG_ROOT) {\\n            require(data.length == 97, \\\"BAD_LENGTH\\\");\\n            uint256 batchNum = data.toUint(1);\\n            // Ensure no outbox entry already exists w/ batch number\\n            require(!outboxEntryExists(batchNum), \\\"ENTRY_ALREADY_EXISTS\\\");\\n\\n            // This is the total number of msgs included in the root, it can be used to\\n            // detect when all msgs were executed against a root.\\n            // It currently isn't stored, but instead emitted in an event for utility\\n            uint256 numInBatch = data.toUint(33);\\n            bytes32 outputRoot = data.toBytes32(65);\\n\\n            OutboxEntry memory newOutboxEntry = OutboxEntry(outputRoot);\\n            outboxEntries[batchNum] = newOutboxEntry;\\n            // keeping redundant batchnum in event (batchnum and old outboxindex field) for outbox version interface compatibility\\n            emit OutboxEntryCreated(batchNum, batchNum, outputRoot, numInBatch);\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a messages in an Outbox entry.\\n     * @dev Reverts if dispute period hasn't expired, since the outbox entry\\n     * is only created once the rollup confirms the respective assertion.\\n     * @param batchNum Index of OutboxEntry in outboxEntries array\\n     * @param proof Merkle proof of message inclusion in outbox entry\\n     * @param index Merkle path to message\\n     * @param l2Sender sender if original message (i.e., caller of ArbSys.sendTxToL1)\\n     * @param destAddr destination address for L1 contract call\\n     * @param l2Block l2 block number at which sendTxToL1 call was made\\n     * @param l1Block l1 block number at which sendTxToL1 call was made\\n     * @param l2Timestamp l2 Timestamp at which sendTxToL1 call was made\\n     * @param amount value in L1 message in wei\\n     * @param calldataForL1 abi-encoded L1 message data\\n     */\\n    function executeTransaction(\\n        uint256 batchNum,\\n        bytes32[] calldata proof,\\n        uint256 index,\\n        address l2Sender,\\n        address destAddr,\\n        uint256 l2Block,\\n        uint256 l1Block,\\n        uint256 l2Timestamp,\\n        uint256 amount,\\n        bytes calldata calldataForL1\\n    ) external virtual {\\n        bytes32 outputId;\\n        {\\n            bytes32 userTx = calculateItemHash(\\n                l2Sender,\\n                destAddr,\\n                l2Block,\\n                l1Block,\\n                l2Timestamp,\\n                amount,\\n                calldataForL1\\n            );\\n\\n            outputId = recordOutputAsSpent(batchNum, proof, index, userTx);\\n            emit OutBoxTransactionExecuted(destAddr, l2Sender, batchNum, index);\\n        }\\n\\n        // we temporarily store the previous values so the outbox can naturally\\n        // unwind itself when there are nested calls to `executeTransaction`\\n        L2ToL1Context memory prevContext = context;\\n\\n        context = L2ToL1Context({\\n            sender: l2Sender,\\n            l2Block: uint128(l2Block),\\n            l1Block: uint128(l1Block),\\n            timestamp: uint128(l2Timestamp),\\n            batchNum: uint128(batchNum),\\n            outputId: outputId\\n        });\\n\\n        // set and reset vars around execution so they remain valid during call\\n        executeBridgeCall(destAddr, amount, calldataForL1);\\n\\n        context = prevContext;\\n    }\\n\\n    function recordOutputAsSpent(\\n        uint256 batchNum,\\n        bytes32[] memory proof,\\n        uint256 path,\\n        bytes32 item\\n    ) internal returns (bytes32) {\\n        require(proof.length < 256, \\\"PROOF_TOO_LONG\\\");\\n        require(path < 2**proof.length, \\\"PATH_NOT_MINIMAL\\\");\\n\\n        // Hash the leaf an extra time to prove it's a leaf\\n        bytes32 calcRoot = calculateMerkleRoot(proof, path, item);\\n        OutboxEntry storage outboxEntry = outboxEntries[batchNum];\\n        require(outboxEntry.root != bytes32(0), \\\"NO_OUTBOX_ENTRY\\\");\\n\\n        // With a minimal path, the pair of path and proof length should always identify\\n        // a unique leaf. The path itself is not enough since the path length to different\\n        // leaves could potentially be different\\n        bytes32 uniqueKey = keccak256(abi.encodePacked(path, proof.length));\\n\\n        require(!outboxEntry.spentOutput[uniqueKey], \\\"ALREADY_SPENT\\\");\\n        require(calcRoot == outboxEntry.root, \\\"BAD_ROOT\\\");\\n\\n        outboxEntry.spentOutput[uniqueKey] = true;\\n        return uniqueKey;\\n    }\\n\\n    function executeBridgeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        (bool success, bytes memory returndata) = bridge.executeCall(destAddr, amount, data);\\n        if (!success) {\\n            if (returndata.length > 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(\\\"BRIDGE_CALL_FAILED\\\");\\n            }\\n        }\\n    }\\n\\n    function calculateItemHash(\\n        address l2Sender,\\n        address destAddr,\\n        uint256 l2Block,\\n        uint256 l1Block,\\n        uint256 l2Timestamp,\\n        uint256 amount,\\n        bytes calldata calldataForL1\\n    ) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    SendType_sendTxToL1,\\n                    uint256(uint160(bytes20(l2Sender))),\\n                    uint256(uint160(bytes20(destAddr))),\\n                    l2Block,\\n                    l1Block,\\n                    l2Timestamp,\\n                    amount,\\n                    calldataForL1\\n                )\\n            );\\n    }\\n\\n    function calculateMerkleRoot(\\n        bytes32[] memory proof,\\n        uint256 path,\\n        bytes32 item\\n    ) public pure returns (bytes32) {\\n        return MerkleLib.calculateRoot(proof, path, keccak256(abi.encodePacked(item)));\\n    }\\n\\n    function outboxEntryExists(uint256 batchNum) public view override returns (bool) {\\n        return outboxEntries[batchNum].root != bytes32(0);\\n    }\\n}\\n\",\"keccak256\":\"0xb1e0fcf5bc87b6daa2cd351b45c6956b4d94c1745c686a835e3f1ca37f10f07c\",\"license\":\"Apache-2.0\"},\"contracts/bridge/SequencerInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./interfaces/ISequencerInbox.sol\\\";\\nimport \\\"./interfaces/IBridge.sol\\\";\\nimport \\\"../arch/Marshaling.sol\\\";\\nimport \\\"../libraries/Cloneable.sol\\\";\\nimport \\\"../rollup/Rollup.sol\\\";\\nimport \\\"../validator/IGasRefunder.sol\\\";\\n\\nimport \\\"./Messages.sol\\\";\\n\\ninterface OldRollup {\\n    function sequencerInboxMaxDelayBlocks() external view returns (uint256);\\n\\n    function sequencerInboxMaxDelaySeconds() external view returns (uint256);\\n}\\n\\ncontract SequencerInbox is ISequencerInbox, Cloneable {\\n    // Sequencer-Inbox state accumulator\\n    bytes32[] public override inboxAccs;\\n\\n    // Number of messages included in the sequencer-inbox; tracked seperately from inboxAccs since multiple messages can be included in a single inboxAcc update (i.e., many messages in a batch, many batches in a single inboxAccs update, etc)\\n    uint256 public override messageCount;\\n\\n    // count of messages read from the delayedInbox\\n    uint256 public totalDelayedMessagesRead;\\n\\n    IBridge public delayedInbox;\\n    address private deprecatedSequencer;\\n    address public rollup;\\n    mapping(address => bool) public override isSequencer;\\n\\n    // Window in which only the Sequencer can update the Inbox; this delay is what allows the Sequencer to give receipts with sub-blocktime latency.\\n    uint256 public override maxDelayBlocks;\\n    uint256 public override maxDelaySeconds;\\n\\n    function initialize(\\n        IBridge _delayedInbox,\\n        address _sequencer,\\n        address _rollup\\n    ) external {\\n        require(address(delayedInbox) == address(0), \\\"ALREADY_INIT\\\");\\n        delayedInbox = _delayedInbox;\\n        isSequencer[_sequencer] = true;\\n        rollup = _rollup;\\n        // it is assumed that maxDelayBlocks and maxDelaySeconds are set by the rollup\\n    }\\n\\n    function postUpgradeInit() external view {\\n        // it is assumed the sequencer inbox contract is behind a Proxy controlled by a\\n        // proxy admin. this function can only be called by the proxy admin contract\\n        address proxyAdmin = ProxyUtil.getProxyAdmin();\\n        require(msg.sender == proxyAdmin, \\\"NOT_FROM_ADMIN\\\");\\n    }\\n\\n    /// @notice DEPRECATED - use isSequencer instead\\n    function sequencer() external view override returns (address) {\\n        return deprecatedSequencer;\\n    }\\n\\n    function setIsSequencer(address addr, bool newIsSequencer) external override {\\n        require(msg.sender == rollup, \\\"ONLY_ROLLUP\\\");\\n        isSequencer[addr] = newIsSequencer;\\n        emit IsSequencerUpdated(addr, newIsSequencer);\\n    }\\n\\n    function setMaxDelay(uint256 newMaxDelayBlocks, uint256 newMaxDelaySeconds) external override {\\n        require(msg.sender == rollup, \\\"ONLY_ROLLUP\\\");\\n        maxDelayBlocks = newMaxDelayBlocks;\\n        maxDelaySeconds = newMaxDelaySeconds;\\n        emit MaxDelayUpdated(newMaxDelayBlocks, newMaxDelaySeconds);\\n    }\\n\\n    /**\\n     * @notice Move messages from the delayed inbox into the Sequencer inbox. Callable by any address. Necessary iff Sequencer hasn't included them before delay period expired.\\n     */\\n\\n    function forceInclusion(\\n        uint256 _totalDelayedMessagesRead,\\n        uint8 kind,\\n        uint256[2] calldata l1BlockAndTimestamp,\\n        uint256 inboxSeqNum,\\n        uint256 gasPriceL1,\\n        address sender,\\n        bytes32 messageDataHash,\\n        bytes32 delayedAcc\\n    ) external {\\n        require(_totalDelayedMessagesRead > totalDelayedMessagesRead, \\\"DELAYED_BACKWARDS\\\");\\n        {\\n            bytes32 messageHash = Messages.messageHash(\\n                kind,\\n                sender,\\n                l1BlockAndTimestamp[0],\\n                l1BlockAndTimestamp[1],\\n                inboxSeqNum,\\n                gasPriceL1,\\n                messageDataHash\\n            );\\n            // Can only force-include after the Sequencer-only window has expired.\\n            require(l1BlockAndTimestamp[0] + maxDelayBlocks < block.number, \\\"MAX_DELAY_BLOCKS\\\");\\n            require(l1BlockAndTimestamp[1] + maxDelaySeconds < block.timestamp, \\\"MAX_DELAY_TIME\\\");\\n\\n            // Verify that message hash represents the last message sequence of delayed message to be included\\n            bytes32 prevDelayedAcc = 0;\\n            if (_totalDelayedMessagesRead > 1) {\\n                prevDelayedAcc = delayedInbox.inboxAccs(_totalDelayedMessagesRead - 2);\\n            }\\n            require(\\n                delayedInbox.inboxAccs(_totalDelayedMessagesRead - 1) ==\\n                    Messages.addMessageToInbox(prevDelayedAcc, messageHash),\\n                \\\"DELAYED_ACCUMULATOR\\\"\\n            );\\n        }\\n\\n        uint256 startNum = messageCount;\\n        bytes32 beforeAcc = 0;\\n        if (inboxAccs.length > 0) {\\n            beforeAcc = inboxAccs[inboxAccs.length - 1];\\n        }\\n\\n        (bytes32 acc, uint256 count) = includeDelayedMessages(\\n            beforeAcc,\\n            startNum,\\n            _totalDelayedMessagesRead,\\n            block.number,\\n            block.timestamp,\\n            delayedAcc\\n        );\\n        inboxAccs.push(acc);\\n        messageCount = count;\\n        emit DelayedInboxForced(\\n            startNum,\\n            beforeAcc,\\n            count,\\n            _totalDelayedMessagesRead,\\n            [acc, delayedAcc],\\n            inboxAccs.length - 1\\n        );\\n    }\\n\\n    function addSequencerL2BatchFromOrigin(\\n        bytes calldata transactions,\\n        uint256[] calldata lengths,\\n        uint256[] calldata sectionsMetadata,\\n        bytes32 afterAcc\\n    ) external {\\n        // solhint-disable-next-line avoid-tx-origin\\n        require(msg.sender == tx.origin, \\\"origin only\\\");\\n        uint256 startNum = messageCount;\\n        bytes32 beforeAcc = addSequencerL2BatchImpl(\\n            transactions,\\n            lengths,\\n            sectionsMetadata,\\n            afterAcc\\n        );\\n        emit SequencerBatchDeliveredFromOrigin(\\n            startNum,\\n            beforeAcc,\\n            messageCount,\\n            afterAcc,\\n            inboxAccs.length - 1\\n        );\\n    }\\n\\n    function addSequencerL2BatchFromOriginWithGasRefunder(\\n        bytes calldata transactions,\\n        uint256[] calldata lengths,\\n        uint256[] calldata sectionsMetadata,\\n        bytes32 afterAcc,\\n        IGasRefunder gasRefunder\\n    ) external {\\n        // solhint-disable-next-line avoid-tx-origin\\n        require(msg.sender == tx.origin, \\\"origin only\\\");\\n\\n        uint256 startGasLeft = gasleft();\\n        uint256 calldataSize;\\n        assembly {\\n            calldataSize := calldatasize()\\n        }\\n\\n        uint256 startNum = messageCount;\\n        bytes32 beforeAcc = addSequencerL2BatchImpl(\\n            transactions,\\n            lengths,\\n            sectionsMetadata,\\n            afterAcc\\n        );\\n        emit SequencerBatchDeliveredFromOrigin(\\n            startNum,\\n            beforeAcc,\\n            messageCount,\\n            afterAcc,\\n            inboxAccs.length - 1\\n        );\\n\\n        if (gasRefunder != IGasRefunder(0)) {\\n            gasRefunder.onGasSpent(msg.sender, startGasLeft - gasleft(), calldataSize);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sequencer adds a batch to inbox.\\n     * @param transactions concatenated bytes of L2 messages\\n     * @param lengths length of each txn in transctions (for parsing)\\n     * @param sectionsMetadata Each consists of [numItems, l1BlockNumber, l1Timestamp, newTotalDelayedMessagesRead, newDelayedAcc]\\n     * @param afterAcc Expected inbox hash after batch is added\\n     * @dev sectionsMetadata lets the sequencer delineate new l1Block numbers and l1Timestamps within a given batch; this lets the sequencer minimize the number of batches created (and thus amortizing cost) while still giving timely receipts\\n     */\\n    function addSequencerL2Batch(\\n        bytes calldata transactions,\\n        uint256[] calldata lengths,\\n        uint256[] calldata sectionsMetadata,\\n        bytes32 afterAcc\\n    ) external {\\n        uint256 startNum = messageCount;\\n        bytes32 beforeAcc = addSequencerL2BatchImpl(\\n            transactions,\\n            lengths,\\n            sectionsMetadata,\\n            afterAcc\\n        );\\n        emit SequencerBatchDelivered(\\n            startNum,\\n            beforeAcc,\\n            messageCount,\\n            afterAcc,\\n            transactions,\\n            lengths,\\n            sectionsMetadata,\\n            inboxAccs.length - 1,\\n            msg.sender\\n        );\\n    }\\n\\n    function addSequencerL2BatchImpl(\\n        bytes memory transactions,\\n        uint256[] calldata lengths,\\n        uint256[] calldata sectionsMetadata,\\n        bytes32 afterAcc\\n    ) private returns (bytes32 beforeAcc) {\\n        require(isSequencer[msg.sender], \\\"ONLY_SEQUENCER\\\");\\n\\n        if (inboxAccs.length > 0) {\\n            beforeAcc = inboxAccs[inboxAccs.length - 1];\\n        }\\n\\n        uint256 runningCount = messageCount;\\n        bytes32 runningAcc = beforeAcc;\\n        uint256 processedItems = 0;\\n        uint256 dataOffset;\\n        assembly {\\n            dataOffset := add(transactions, 32)\\n        }\\n        for (uint256 i = 0; i + 5 <= sectionsMetadata.length; i += 5) {\\n            // Each metadata section consists of:\\n            // [numItems, l1BlockNumber, l1Timestamp, newTotalDelayedMessagesRead, newDelayedAcc]\\n            {\\n                uint256 l1BlockNumber = sectionsMetadata[i + 1];\\n                require(l1BlockNumber + maxDelayBlocks >= block.number, \\\"BLOCK_TOO_OLD\\\");\\n                require(l1BlockNumber <= block.number, \\\"BLOCK_TOO_NEW\\\");\\n            }\\n            {\\n                uint256 l1Timestamp = sectionsMetadata[i + 2];\\n                require(l1Timestamp + maxDelaySeconds >= block.timestamp, \\\"TIME_TOO_OLD\\\");\\n                require(l1Timestamp <= block.timestamp, \\\"TIME_TOO_NEW\\\");\\n            }\\n\\n            {\\n                bytes32 prefixHash = keccak256(\\n                    abi.encodePacked(msg.sender, sectionsMetadata[i + 1], sectionsMetadata[i + 2])\\n                );\\n                uint256 numItems = sectionsMetadata[i];\\n                (runningAcc, runningCount, dataOffset) = calcL2Batch(\\n                    dataOffset,\\n                    lengths,\\n                    processedItems,\\n                    numItems,\\n                    prefixHash,\\n                    runningCount,\\n                    runningAcc\\n                );\\n                processedItems += numItems;\\n            }\\n\\n            uint256 newTotalDelayedMessagesRead = sectionsMetadata[i + 3];\\n            require(newTotalDelayedMessagesRead >= totalDelayedMessagesRead, \\\"DELAYED_BACKWARDS\\\");\\n            require(newTotalDelayedMessagesRead >= 1, \\\"MUST_DELAYED_INIT\\\");\\n            require(\\n                totalDelayedMessagesRead >= 1 || sectionsMetadata[i] == 0,\\n                \\\"MUST_DELAYED_INIT_START\\\"\\n            );\\n            // Sequencer decides how many messages (if any) to include from the delayed inbox\\n            if (newTotalDelayedMessagesRead > totalDelayedMessagesRead) {\\n                (runningAcc, runningCount) = includeDelayedMessages(\\n                    runningAcc,\\n                    runningCount,\\n                    newTotalDelayedMessagesRead,\\n                    sectionsMetadata[i + 1], // block number\\n                    sectionsMetadata[i + 2], // timestamp\\n                    bytes32(sectionsMetadata[i + 4]) // delayed accumulator\\n                );\\n            }\\n        }\\n\\n        uint256 startOffset;\\n        assembly {\\n            startOffset := add(transactions, 32)\\n        }\\n        require(dataOffset >= startOffset, \\\"OFFSET_OVERFLOW\\\");\\n        require(dataOffset <= startOffset + transactions.length, \\\"TRANSACTIONS_OVERRUN\\\");\\n\\n        require(runningCount > messageCount, \\\"EMPTY_BATCH\\\");\\n        inboxAccs.push(runningAcc);\\n        messageCount = runningCount;\\n\\n        require(runningAcc == afterAcc, \\\"AFTER_ACC\\\");\\n    }\\n\\n    function calcL2Batch(\\n        uint256 beforeOffset,\\n        uint256[] calldata lengths,\\n        uint256 lengthsOffset,\\n        uint256 itemCount,\\n        bytes32 prefixHash,\\n        uint256 beforeCount,\\n        bytes32 beforeAcc\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes32 acc,\\n            uint256 count,\\n            uint256 offset\\n        )\\n    {\\n        offset = beforeOffset;\\n        count = beforeCount;\\n        acc = beforeAcc;\\n        itemCount += lengthsOffset;\\n        for (uint256 i = lengthsOffset; i < itemCount; i++) {\\n            uint256 length = lengths[i];\\n            bytes32 messageDataHash;\\n            assembly {\\n                messageDataHash := keccak256(offset, length)\\n            }\\n            acc = keccak256(abi.encodePacked(acc, count, prefixHash, messageDataHash));\\n            offset += length;\\n            count++;\\n        }\\n        return (acc, count, offset);\\n    }\\n\\n    // Precondition: _totalDelayedMessagesRead > totalDelayedMessagesRead\\n    function includeDelayedMessages(\\n        bytes32 acc,\\n        uint256 count,\\n        uint256 _totalDelayedMessagesRead,\\n        uint256 l1BlockNumber,\\n        uint256 timestamp,\\n        bytes32 delayedAcc\\n    ) private returns (bytes32, uint256) {\\n        require(_totalDelayedMessagesRead <= delayedInbox.messageCount(), \\\"DELAYED_TOO_FAR\\\");\\n        require(delayedAcc == delayedInbox.inboxAccs(_totalDelayedMessagesRead - 1), \\\"DELAYED_ACC\\\");\\n        acc = keccak256(\\n            abi.encodePacked(\\n                \\\"Delayed messages:\\\",\\n                acc,\\n                count,\\n                totalDelayedMessagesRead,\\n                _totalDelayedMessagesRead,\\n                delayedAcc\\n            )\\n        );\\n        count += _totalDelayedMessagesRead - totalDelayedMessagesRead;\\n        bytes memory emptyBytes;\\n        acc = keccak256(\\n            abi.encodePacked(\\n                acc,\\n                count,\\n                keccak256(abi.encodePacked(address(0), l1BlockNumber, timestamp)),\\n                keccak256(emptyBytes)\\n            )\\n        );\\n        count++;\\n        totalDelayedMessagesRead = _totalDelayedMessagesRead;\\n        return (acc, count);\\n    }\\n\\n    /**\\n     * @notice Prove message count as of provided inbox state hash\\n     * @param proof proof data\\n     * @param offset offset for parsing proof data\\n     * @param inboxAcc target inbox state hash\\n     */\\n    function proveSeqBatchMsgCount(\\n        bytes calldata proof,\\n        uint256 offset,\\n        bytes32 inboxAcc\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 endMessageCount;\\n\\n        bytes32 buildingAcc;\\n        uint256 seqNum;\\n        bytes32 messageHeaderHash;\\n        bytes32 messageDataHash;\\n        (offset, buildingAcc) = Marshaling.deserializeBytes32(proof, offset);\\n        (offset, seqNum) = Marshaling.deserializeInt(proof, offset);\\n        (offset, messageHeaderHash) = Marshaling.deserializeBytes32(proof, offset);\\n        (offset, messageDataHash) = Marshaling.deserializeBytes32(proof, offset);\\n        buildingAcc = keccak256(\\n            abi.encodePacked(buildingAcc, seqNum, messageHeaderHash, messageDataHash)\\n        );\\n        endMessageCount = seqNum + 1;\\n        require(buildingAcc == inboxAcc, \\\"BATCH_ACC\\\");\\n\\n        return (offset, endMessageCount);\\n    }\\n\\n    /**\\n     * @notice Show that given messageCount falls inside of some batch and prove/return inboxAcc state. This is used to ensure that the creation of new nodes are replay protected to the state of the inbox, thereby ensuring their validity/invalidy can't be modified upon reorging the inbox contents.\\n     * @dev (wrapper in leiu of proveBatchContainsSequenceNumber for sementics)\\n     * @return (message count at end of target batch, inbox hash as of target batch)\\n     */\\n    function proveInboxContainsMessage(bytes calldata proof, uint256 _messageCount)\\n        external\\n        view\\n        override\\n        returns (uint256, bytes32)\\n    {\\n        return proveInboxContainsMessageImp(proof, _messageCount);\\n    }\\n\\n    // deprecated in favor of proveInboxContainsMessage\\n    function proveBatchContainsSequenceNumber(bytes calldata proof, uint256 _messageCount)\\n        external\\n        view\\n        returns (uint256, bytes32)\\n    {\\n        return proveInboxContainsMessageImp(proof, _messageCount);\\n    }\\n\\n    function proveInboxContainsMessageImp(bytes calldata proof, uint256 _messageCount)\\n        internal\\n        view\\n        returns (uint256, bytes32)\\n    {\\n        if (_messageCount == 0) {\\n            return (0, 0);\\n        }\\n\\n        (uint256 offset, uint256 targetInboxStateIndex) = Marshaling.deserializeInt(proof, 0);\\n\\n        uint256 messageCountAsOfPreviousInboxState = 0;\\n        if (targetInboxStateIndex > 0) {\\n            (offset, messageCountAsOfPreviousInboxState) = proveSeqBatchMsgCount(\\n                proof,\\n                offset,\\n                inboxAccs[targetInboxStateIndex - 1]\\n            );\\n        }\\n\\n        bytes32 targetInboxState = inboxAccs[targetInboxStateIndex];\\n        uint256 messageCountAsOfTargetInboxState;\\n        (offset, messageCountAsOfTargetInboxState) = proveSeqBatchMsgCount(\\n            proof,\\n            offset,\\n            targetInboxState\\n        );\\n\\n        require(_messageCount > messageCountAsOfPreviousInboxState, \\\"BATCH_START\\\");\\n        require(_messageCount <= messageCountAsOfTargetInboxState, \\\"BATCH_END\\\");\\n\\n        return (messageCountAsOfTargetInboxState, targetInboxState);\\n    }\\n\\n    function getInboxAccsLength() external view override returns (uint256) {\\n        return inboxAccs.length;\\n    }\\n}\\n\",\"keccak256\":\"0x790fd23664a36a8316689082f74404545af2240649d15aab601aa89c7c8ba873\",\"license\":\"Apache-2.0\"},\"contracts/bridge/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    );\\n\\n    event BridgeCallTriggered(\\n        address indexed outbox,\\n        address indexed destAddr,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    event InboxToggle(address indexed inbox, bool enabled);\\n\\n    event OutboxToggle(address indexed outbox, bool enabled);\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5a30299074a31b02824bdf7fe779c8baed4385a0a340c8294de6669a2c77d478\",\"license\":\"Apache-2.0\"},\"contracts/bridge/interfaces/IInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./IBridge.sol\\\";\\nimport \\\"./IMessageProvider.sol\\\";\\n\\ninterface IInbox is IMessageProvider {\\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\\n\\n    function sendUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendL1FundedUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function sendL1FundedContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function depositEth(uint256 maxSubmissionCost) external payable returns (uint256);\\n\\n    function bridge() external view returns (IBridge);\\n\\n    function pauseCreateRetryables() external;\\n\\n    function unpauseCreateRetryables() external;\\n\\n    function startRewriteAddress() external;\\n\\n    function stopRewriteAddress() external;\\n}\\n\",\"keccak256\":\"0x4d53940ea542e45c3901dfb740f44ff6ef2dc1679ff445a4f6c45ad7bb8d7867\",\"license\":\"Apache-2.0\"},\"contracts/bridge/interfaces/IMessageProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IMessageProvider {\\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\\n\\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\\n}\\n\",\"keccak256\":\"0x24dcb49eccb029b7bd2a398919c05227cc87d0ead7f07d524c97944873a898f6\",\"license\":\"Apache-2.0\"},\"contracts/bridge/interfaces/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IOutbox {\\n    event OutboxEntryCreated(\\n        uint256 indexed batchNum,\\n        uint256 outboxEntryIndex,\\n        bytes32 outputRoot,\\n        uint256 numInBatch\\n    );\\n    event OutBoxTransactionExecuted(\\n        address indexed destAddr,\\n        address indexed l2Sender,\\n        uint256 indexed outboxEntryIndex,\\n        uint256 transactionIndex\\n    );\\n\\n    function l2ToL1Sender() external view returns (address);\\n\\n    function l2ToL1Block() external view returns (uint256);\\n\\n    function l2ToL1EthBlock() external view returns (uint256);\\n\\n    function l2ToL1Timestamp() external view returns (uint256);\\n\\n    function l2ToL1BatchNum() external view returns (uint256);\\n\\n    function l2ToL1OutputId() external view returns (bytes32);\\n\\n    function processOutgoingMessages(bytes calldata sendsData, uint256[] calldata sendLengths)\\n        external;\\n\\n    function outboxEntryExists(uint256 batchNum) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc9afce24d902eb8617dc6d31d7ea5afcb22c7d4ce1988d744bbae5b2445d8f22\",\"license\":\"Apache-2.0\"},\"contracts/bridge/interfaces/ISequencerInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface ISequencerInbox {\\n    event SequencerBatchDelivered(\\n        uint256 indexed firstMessageNum,\\n        bytes32 indexed beforeAcc,\\n        uint256 newMessageCount,\\n        bytes32 afterAcc,\\n        bytes transactions,\\n        uint256[] lengths,\\n        uint256[] sectionsMetadata,\\n        uint256 seqBatchIndex,\\n        address sequencer\\n    );\\n\\n    event SequencerBatchDeliveredFromOrigin(\\n        uint256 indexed firstMessageNum,\\n        bytes32 indexed beforeAcc,\\n        uint256 newMessageCount,\\n        bytes32 afterAcc,\\n        uint256 seqBatchIndex\\n    );\\n\\n    event DelayedInboxForced(\\n        uint256 indexed firstMessageNum,\\n        bytes32 indexed beforeAcc,\\n        uint256 newMessageCount,\\n        uint256 totalDelayedMessagesRead,\\n        bytes32[2] afterAccAndDelayed,\\n        uint256 seqBatchIndex\\n    );\\n\\n    /// @notice DEPRECATED - look at IsSequencerUpdated for new updates\\n    // event SequencerAddressUpdated(address newAddress);\\n\\n    event IsSequencerUpdated(address addr, bool isSequencer);\\n    event MaxDelayUpdated(uint256 newMaxDelayBlocks, uint256 newMaxDelaySeconds);\\n\\n    /// @notice DEPRECATED - look at MaxDelayUpdated for new updates\\n    // event MaxDelayBlocksUpdated(uint256 newValue);\\n    /// @notice DEPRECATED - look at MaxDelayUpdated for new updates\\n    // event MaxDelaySecondsUpdated(uint256 newValue);\\n\\n    function setMaxDelay(uint256 newMaxDelayBlocks, uint256 newMaxDelaySeconds) external;\\n\\n    function setIsSequencer(address addr, bool isSequencer) external;\\n\\n    function messageCount() external view returns (uint256);\\n\\n    function maxDelayBlocks() external view returns (uint256);\\n\\n    function maxDelaySeconds() external view returns (uint256);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function getInboxAccsLength() external view returns (uint256);\\n\\n    function proveInboxContainsMessage(bytes calldata proof, uint256 inboxCount)\\n        external\\n        view\\n        returns (uint256, bytes32);\\n\\n    /// @notice DEPRECATED - use isSequencer instead\\n    function sequencer() external view returns (address);\\n\\n    function isSequencer(address seq) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7bd1af4a70730841feaa73e6113f14048e3bb2edf168cb4e96083d5432a98688\",\"license\":\"Apache-2.0\"},\"contracts/challenge/ChallengeLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"../libraries/MerkleLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary ChallengeLib {\\n    using SafeMath for uint256;\\n\\n    function firstSegmentSize(uint256 totalCount, uint256 bisectionCount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return totalCount / bisectionCount + (totalCount % bisectionCount);\\n    }\\n\\n    function otherSegmentSize(uint256 totalCount, uint256 bisectionCount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return totalCount / bisectionCount;\\n    }\\n\\n    function bisectionChunkHash(\\n        uint256 _segmentStart,\\n        uint256 _segmentLength,\\n        bytes32 _startHash,\\n        bytes32 _endHash\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_segmentStart, _segmentLength, _startHash, _endHash));\\n    }\\n\\n    function assertionHash(uint256 _avmGasUsed, bytes32 _restHash) internal pure returns (bytes32) {\\n        // Note: make sure this doesn't return Challenge.UNREACHABLE_ASSERTION (currently 0)\\n        return keccak256(abi.encodePacked(_avmGasUsed, _restHash));\\n    }\\n\\n    function assertionRestHash(\\n        uint256 _totalMessagesRead,\\n        bytes32 _machineState,\\n        bytes32 _sendAcc,\\n        uint256 _sendCount,\\n        bytes32 _logAcc,\\n        uint256 _logCount\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    _totalMessagesRead,\\n                    _machineState,\\n                    _sendAcc,\\n                    _sendCount,\\n                    _logAcc,\\n                    _logCount\\n                )\\n            );\\n    }\\n\\n    function updatedBisectionRoot(\\n        bytes32[] memory _chainHashes,\\n        uint256 _challengedSegmentStart,\\n        uint256 _challengedSegmentLength\\n    ) internal pure returns (bytes32) {\\n        uint256 bisectionCount = _chainHashes.length - 1;\\n        bytes32[] memory hashes = new bytes32[](bisectionCount);\\n        uint256 chunkSize = ChallengeLib.firstSegmentSize(_challengedSegmentLength, bisectionCount);\\n        uint256 segmentStart = _challengedSegmentStart;\\n        hashes[0] = ChallengeLib.bisectionChunkHash(\\n            segmentStart,\\n            chunkSize,\\n            _chainHashes[0],\\n            _chainHashes[1]\\n        );\\n        segmentStart = segmentStart.add(chunkSize);\\n        chunkSize = ChallengeLib.otherSegmentSize(_challengedSegmentLength, bisectionCount);\\n        for (uint256 i = 1; i < bisectionCount; i++) {\\n            hashes[i] = ChallengeLib.bisectionChunkHash(\\n                segmentStart,\\n                chunkSize,\\n                _chainHashes[i],\\n                _chainHashes[i + 1]\\n            );\\n            segmentStart = segmentStart.add(chunkSize);\\n        }\\n        return MerkleLib.generateRoot(hashes);\\n    }\\n\\n    function verifySegmentProof(\\n        bytes32 challengeState,\\n        bytes32 item,\\n        bytes32[] calldata _merkleNodes,\\n        uint256 _merkleRoute\\n    ) internal pure returns (bool) {\\n        return challengeState == MerkleLib.calculateRoot(_merkleNodes, _merkleRoute, item);\\n    }\\n}\\n\",\"keccak256\":\"0x0a9a956201d4c84621916601a1f73ff76e5a20059b75d61551039e6270535295\",\"license\":\"Apache-2.0\"},\"contracts/challenge/IChallenge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"../bridge/interfaces/IBridge.sol\\\";\\nimport \\\"../bridge/interfaces/ISequencerInbox.sol\\\";\\nimport \\\"../arch/IOneStepProof.sol\\\";\\n\\ninterface IChallenge {\\n    function initializeChallenge(\\n        IOneStepProof[] calldata _executors,\\n        address _resultReceiver,\\n        bytes32 _executionHash,\\n        uint256 _maxMessageCount,\\n        address _asserter,\\n        address _challenger,\\n        uint256 _asserterTimeLeft,\\n        uint256 _challengerTimeLeft,\\n        ISequencerInbox _sequencerBridge,\\n        IBridge _delayedBridge\\n    ) external;\\n\\n    function currentResponderTimeLeft() external view returns (uint256);\\n\\n    function lastMoveBlock() external view returns (uint256);\\n\\n    function timeout() external;\\n\\n    function asserter() external view returns (address);\\n\\n    function challenger() external view returns (address);\\n\\n    function clearChallenge() external;\\n}\\n\",\"keccak256\":\"0x501c4975c47da9fb00659717a8ab920ad1b4b18765656a73ee3b5fab32eab33f\",\"license\":\"Apache-2.0\"},\"contracts/challenge/IChallengeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"../bridge/interfaces/IBridge.sol\\\";\\nimport \\\"../bridge/interfaces/ISequencerInbox.sol\\\";\\n\\ninterface IChallengeFactory {\\n    function createChallenge(\\n        address _resultReceiver,\\n        bytes32 _executionHash,\\n        uint256 _maxMessageCount,\\n        address _asserter,\\n        address _challenger,\\n        uint256 _asserterTimeLeft,\\n        uint256 _challengerTimeLeft,\\n        ISequencerInbox _sequencerBridge,\\n        IBridge _delayedBridge\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x152834185809e80f31c3f675c29cbfd2d0bafa3af817bf4ef6535636f81046c5\",\"license\":\"Apache-2.0\"},\"contracts/libraries/AddressAliasHelper.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nlibrary AddressAliasHelper {\\n    uint160 constant offset = uint160(0x1111000000000000000000000000000000001111);\\n\\n    /// @notice Utility function that converts the address in the L1 that submitted a tx to\\n    /// the inbox to the msg.sender viewed in the L2\\n    /// @param l1Address the address in the L1 that triggered the tx to L2\\n    /// @return l2Address L2 address as viewed in msg.sender\\n    function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {\\n        l2Address = address(uint160(l1Address) + offset);\\n    }\\n\\n    /// @notice Utility function that converts the msg.sender viewed in the L2 to the\\n    /// address in the L1 that submitted a tx to the inbox\\n    /// @param l2Address L2 address as viewed in msg.sender\\n    /// @return l1Address the address in the L1 that triggered the tx to L2\\n    function undoL1ToL2Alias(address l2Address) internal pure returns (address l1Address) {\\n        l1Address = address(uint160(l2Address) - offset);\\n    }\\n}\\n\",\"keccak256\":\"0xda5f3a751568eebed75c25ffcd92a48e2039601ed8a3e67c55548db940dfe739\",\"license\":\"Apache-2.0\"},\"contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\n\\npragma solidity ^0.6.11;\\n\\n/* solhint-disable no-inline-assembly */\\nlibrary BytesLib {\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= (_start + 20), \\\"Read out of bounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= (_start + 1), \\\"Read out of bounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= (_start + 32), \\\"Read out of bounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= (_start + 32), \\\"Read out of bounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n}\\n/* solhint-enable no-inline-assembly */\\n\",\"keccak256\":\"0x2c697f7497d4863ef204af621dfebc9d71ee1203e76c3939194b9d7c17b1bcc4\",\"license\":\"MIT\"},\"contracts/libraries/Cloneable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./ICloneable.sol\\\";\\n\\ncontract Cloneable is ICloneable {\\n    string private constant NOT_CLONE = \\\"NOT_CLONE\\\";\\n\\n    bool private isMasterCopy;\\n\\n    constructor() public {\\n        isMasterCopy = true;\\n    }\\n\\n    function isMaster() external view override returns (bool) {\\n        return isMasterCopy;\\n    }\\n\\n    function safeSelfDestruct(address payable dest) internal {\\n        require(!isMasterCopy, NOT_CLONE);\\n        selfdestruct(dest);\\n    }\\n}\\n\",\"keccak256\":\"0x09c1eaa640c6dd52b54ef8cbb114a5e99c73c065989eb04c351204b91652cc67\",\"license\":\"Apache-2.0\"},\"contracts/libraries/ICloneable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface ICloneable {\\n    function isMaster() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6caf0d6558086827bd5384a4f52dfceb6af2ab284f381829d4e2cc641ef59b1e\",\"license\":\"Apache-2.0\"},\"contracts/libraries/MerkleLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nlibrary MerkleLib {\\n    function generateRoot(bytes32[] memory _hashes) internal pure returns (bytes32) {\\n        bytes32[] memory prevLayer = _hashes;\\n        while (prevLayer.length > 1) {\\n            bytes32[] memory nextLayer = new bytes32[]((prevLayer.length + 1) / 2);\\n            for (uint256 i = 0; i < nextLayer.length; i++) {\\n                if (2 * i + 1 < prevLayer.length) {\\n                    nextLayer[i] = keccak256(\\n                        abi.encodePacked(prevLayer[2 * i], prevLayer[2 * i + 1])\\n                    );\\n                } else {\\n                    nextLayer[i] = prevLayer[2 * i];\\n                }\\n            }\\n            prevLayer = nextLayer;\\n        }\\n        return prevLayer[0];\\n    }\\n\\n    function calculateRoot(\\n        bytes32[] memory nodes,\\n        uint256 route,\\n        bytes32 item\\n    ) internal pure returns (bytes32) {\\n        uint256 proofItems = nodes.length;\\n        require(proofItems <= 256);\\n        bytes32 h = item;\\n        for (uint256 i = 0; i < proofItems; i++) {\\n            if (route % 2 == 0) {\\n                h = keccak256(abi.encodePacked(nodes[i], h));\\n            } else {\\n                h = keccak256(abi.encodePacked(h, nodes[i]));\\n            }\\n            route /= 2;\\n        }\\n        return h;\\n    }\\n}\\n\",\"keccak256\":\"0x0b02c397678cea90c70c3c654c675596f943d9db13377a4ac9663809ad3a1a13\",\"license\":\"Apache-2.0\"},\"contracts/libraries/ProxyUtil.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nlibrary ProxyUtil {\\n    function getProxyAdmin() internal view returns (address admin) {\\n        // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/proxy/TransparentUpgradeableProxy.sol#L48\\n        // Storage slot with the admin of the proxy contract.\\n        // This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n        bytes32 slot = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n        assembly {\\n            admin := sload(slot)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc725942e1ca60255de51b86b001ed9656752454e7c5cd526ecfe90efe3da159a\",\"license\":\"Apache-2.0\"},\"contracts/libraries/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nabstract contract WhitelistConsumer {\\n    address public whitelist;\\n\\n    event WhitelistSourceUpdated(address newSource);\\n\\n    modifier onlyWhitelisted() {\\n        if (whitelist != address(0)) {\\n            require(Whitelist(whitelist).isAllowed(msg.sender), \\\"NOT_WHITELISTED\\\");\\n        }\\n        _;\\n    }\\n\\n    function updateWhitelistSource(address newSource) external {\\n        require(msg.sender == whitelist, \\\"NOT_FROM_LIST\\\");\\n        whitelist = newSource;\\n        emit WhitelistSourceUpdated(newSource);\\n    }\\n}\\n\\ncontract Whitelist {\\n    address public owner;\\n    mapping(address => bool) public isAllowed;\\n\\n    event OwnerUpdated(address newOwner);\\n    event WhitelistUpgraded(address newWhitelist, address[] targets);\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"ONLY_OWNER\\\");\\n        _;\\n    }\\n\\n    function setOwner(address newOwner) external onlyOwner {\\n        owner = newOwner;\\n        emit OwnerUpdated(newOwner);\\n    }\\n\\n    function setWhitelist(address[] memory user, bool[] memory val) external onlyOwner {\\n        require(user.length == val.length, \\\"INVALID_INPUT\\\");\\n\\n        for (uint256 i = 0; i < user.length; i++) {\\n            isAllowed[user[i]] = val[i];\\n        }\\n    }\\n\\n    // set new whitelist to address(0) to disable whitelist\\n    function triggerConsumers(address newWhitelist, address[] memory targets) external onlyOwner {\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            WhitelistConsumer(targets[i]).updateWhitelistSource(newWhitelist);\\n        }\\n        emit WhitelistUpgraded(newWhitelist, targets);\\n    }\\n}\\n\",\"keccak256\":\"0xb54538aa4794e04ce41bf4159bef4151583a3cae261cafd006ad74c2f33d36de\",\"license\":\"Apache-2.0\"},\"contracts/rollup/BridgeCreator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"../bridge/Bridge.sol\\\";\\nimport \\\"../bridge/SequencerInbox.sol\\\";\\nimport \\\"../bridge/Inbox.sol\\\";\\nimport \\\"../bridge/Outbox.sol\\\";\\nimport \\\"./RollupEventBridge.sol\\\";\\n\\nimport \\\"../bridge/interfaces/IBridge.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ProxyAdmin.sol\\\";\\nimport \\\"../libraries/Whitelist.sol\\\";\\n\\ncontract BridgeCreator is Ownable {\\n    Bridge public delayedBridgeTemplate;\\n    SequencerInbox public sequencerInboxTemplate;\\n    Inbox public inboxTemplate;\\n    RollupEventBridge public rollupEventBridgeTemplate;\\n    Outbox public outboxTemplate;\\n\\n    event TemplatesUpdated();\\n\\n    constructor() public Ownable() {\\n        delayedBridgeTemplate = new Bridge();\\n        sequencerInboxTemplate = new SequencerInbox();\\n        inboxTemplate = new Inbox();\\n        rollupEventBridgeTemplate = new RollupEventBridge();\\n        outboxTemplate = new Outbox();\\n    }\\n\\n    function updateTemplates(\\n        address _delayedBridgeTemplate,\\n        address _sequencerInboxTemplate,\\n        address _inboxTemplate,\\n        address _rollupEventBridgeTemplate,\\n        address _outboxTemplate\\n    ) external onlyOwner {\\n        delayedBridgeTemplate = Bridge(_delayedBridgeTemplate);\\n        sequencerInboxTemplate = SequencerInbox(_sequencerInboxTemplate);\\n        inboxTemplate = Inbox(_inboxTemplate);\\n        rollupEventBridgeTemplate = RollupEventBridge(_rollupEventBridgeTemplate);\\n        outboxTemplate = Outbox(_outboxTemplate);\\n\\n        emit TemplatesUpdated();\\n    }\\n\\n    struct CreateBridgeFrame {\\n        ProxyAdmin admin;\\n        Bridge delayedBridge;\\n        SequencerInbox sequencerInbox;\\n        Inbox inbox;\\n        RollupEventBridge rollupEventBridge;\\n        Outbox outbox;\\n        Whitelist whitelist;\\n    }\\n\\n    function createBridge(\\n        address adminProxy,\\n        address rollup,\\n        address sequencer\\n    )\\n        external\\n        returns (\\n            Bridge,\\n            SequencerInbox,\\n            Inbox,\\n            RollupEventBridge,\\n            Outbox\\n        )\\n    {\\n        CreateBridgeFrame memory frame;\\n        {\\n            frame.delayedBridge = Bridge(\\n                address(\\n                    new TransparentUpgradeableProxy(address(delayedBridgeTemplate), adminProxy, \\\"\\\")\\n                )\\n            );\\n            frame.sequencerInbox = SequencerInbox(\\n                address(\\n                    new TransparentUpgradeableProxy(address(sequencerInboxTemplate), adminProxy, \\\"\\\")\\n                )\\n            );\\n            frame.inbox = Inbox(\\n                address(new TransparentUpgradeableProxy(address(inboxTemplate), adminProxy, \\\"\\\"))\\n            );\\n            frame.rollupEventBridge = RollupEventBridge(\\n                address(\\n                    new TransparentUpgradeableProxy(\\n                        address(rollupEventBridgeTemplate),\\n                        adminProxy,\\n                        \\\"\\\"\\n                    )\\n                )\\n            );\\n            frame.outbox = Outbox(\\n                address(new TransparentUpgradeableProxy(address(outboxTemplate), adminProxy, \\\"\\\"))\\n            );\\n            frame.whitelist = new Whitelist();\\n        }\\n\\n        frame.delayedBridge.initialize();\\n        frame.sequencerInbox.initialize(IBridge(frame.delayedBridge), sequencer, rollup);\\n        frame.inbox.initialize(IBridge(frame.delayedBridge), address(frame.whitelist));\\n        frame.rollupEventBridge.initialize(address(frame.delayedBridge), rollup);\\n        frame.outbox.initialize(rollup, IBridge(frame.delayedBridge));\\n\\n        frame.delayedBridge.setInbox(address(frame.inbox), true);\\n        frame.delayedBridge.transferOwnership(rollup);\\n\\n        frame.whitelist.setOwner(rollup);\\n\\n        return (\\n            frame.delayedBridge,\\n            frame.sequencerInbox,\\n            frame.inbox,\\n            frame.rollupEventBridge,\\n            frame.outbox\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xed36f41c4d12c4e01a8928a1de6891332ac4768ee315b66043e006e424ae7fc5\",\"license\":\"Apache-2.0\"},\"contracts/rollup/INode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface INode {\\n    function initialize(\\n        address _rollup,\\n        bytes32 _stateHash,\\n        bytes32 _challengeHash,\\n        bytes32 _confirmData,\\n        uint256 _prev,\\n        uint256 _deadlineBlock\\n    ) external;\\n\\n    function destroy() external;\\n\\n    function addStaker(address staker) external returns (uint256);\\n\\n    function removeStaker(address staker) external;\\n\\n    function childCreated(uint256) external;\\n\\n    function newChildConfirmDeadline(uint256 deadline) external;\\n\\n    function stateHash() external view returns (bytes32);\\n\\n    function challengeHash() external view returns (bytes32);\\n\\n    function confirmData() external view returns (bytes32);\\n\\n    function prev() external view returns (uint256);\\n\\n    function deadlineBlock() external view returns (uint256);\\n\\n    function noChildConfirmedBeforeBlock() external view returns (uint256);\\n\\n    function stakerCount() external view returns (uint256);\\n\\n    function stakers(address staker) external view returns (bool);\\n\\n    function firstChildBlock() external view returns (uint256);\\n\\n    function latestChildNumber() external view returns (uint256);\\n\\n    function requirePastDeadline() external view;\\n\\n    function requirePastChildConfirmDeadline() external view;\\n}\\n\",\"keccak256\":\"0x26bd57351e141832bc45dffe316884bbe36d27529215b023bc6013c910e1343c\",\"license\":\"Apache-2.0\"},\"contracts/rollup/INodeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface INodeFactory {\\n    function createNode(\\n        bytes32 _stateHash,\\n        bytes32 _challengeHash,\\n        bytes32 _confirmData,\\n        uint256 _prev,\\n        uint256 _deadlineBlock\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x8126cffd549e748f3e8be08db2be0a0a961299de54885572ff60895b76eb5c3c\",\"license\":\"Apache-2.0\"},\"contracts/rollup/IRollupCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./INode.sol\\\";\\n\\ninterface IRollupCore {\\n    function _stakerMap(address stakerAddress)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            bool\\n        );\\n\\n    event RollupCreated(bytes32 machineHash);\\n\\n    event NodeCreated(\\n        uint256 indexed nodeNum,\\n        bytes32 indexed parentNodeHash,\\n        bytes32 nodeHash,\\n        bytes32 executionHash,\\n        uint256 inboxMaxCount,\\n        uint256 afterInboxBatchEndCount,\\n        bytes32 afterInboxBatchAcc,\\n        bytes32[3][2] assertionBytes32Fields,\\n        uint256[4][2] assertionIntFields\\n    );\\n\\n    event NodeConfirmed(\\n        uint256 indexed nodeNum,\\n        bytes32 afterSendAcc,\\n        uint256 afterSendCount,\\n        bytes32 afterLogAcc,\\n        uint256 afterLogCount\\n    );\\n\\n    event NodeRejected(uint256 indexed nodeNum);\\n\\n    event RollupChallengeStarted(\\n        address indexed challengeContract,\\n        address asserter,\\n        address challenger,\\n        uint256 challengedNode\\n    );\\n\\n    event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance);\\n\\n    event UserWithdrawableFundsUpdated(\\n        address indexed user,\\n        uint256 initialBalance,\\n        uint256 finalBalance\\n    );\\n\\n    function getNode(uint256 nodeNum) external view returns (INode);\\n\\n    /**\\n     * @notice Get the address of the staker at the given index\\n     * @param stakerNum Index of the staker\\n     * @return Address of the staker\\n     */\\n    function getStakerAddress(uint256 stakerNum) external view returns (address);\\n\\n    /**\\n     * @notice Check whether the given staker is staked\\n     * @param staker Staker address to check\\n     * @return True or False for whether the staker was staked\\n     */\\n    function isStaked(address staker) external view returns (bool);\\n\\n    /**\\n     * @notice Get the latest staked node of the given staker\\n     * @param staker Staker address to lookup\\n     * @return Latest node staked of the staker\\n     */\\n    function latestStakedNode(address staker) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the current challenge of the given staker\\n     * @param staker Staker address to lookup\\n     * @return Current challenge of the staker\\n     */\\n    function currentChallenge(address staker) external view returns (address);\\n\\n    /**\\n     * @notice Get the amount staked of the given staker\\n     * @param staker Staker address to lookup\\n     * @return Amount staked of the staker\\n     */\\n    function amountStaked(address staker) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the original staker address of the zombie at the given index\\n     * @param zombieNum Index of the zombie to lookup\\n     * @return Original staker address of the zombie\\n     */\\n    function zombieAddress(uint256 zombieNum) external view returns (address);\\n\\n    /**\\n     * @notice Get Latest node that the given zombie at the given index is staked on\\n     * @param zombieNum Index of the zombie to lookup\\n     * @return Latest node that the given zombie is staked on\\n     */\\n    function zombieLatestStakedNode(uint256 zombieNum) external view returns (uint256);\\n\\n    /// @return Current number of un-removed zombies\\n    function zombieCount() external view returns (uint256);\\n\\n    function isZombie(address staker) external view returns (bool);\\n\\n    /**\\n     * @notice Get the amount of funds withdrawable by the given address\\n     * @param owner Address to check the funds of\\n     * @return Amount of funds withdrawable by owner\\n     */\\n    function withdrawableFunds(address owner) external view returns (uint256);\\n\\n    /**\\n     * @return Index of the first unresolved node\\n     * @dev If all nodes have been resolved, this will be latestNodeCreated + 1\\n     */\\n    function firstUnresolvedNode() external view returns (uint256);\\n\\n    /// @return Index of the latest confirmed node\\n    function latestConfirmed() external view returns (uint256);\\n\\n    /// @return Index of the latest rollup node created\\n    function latestNodeCreated() external view returns (uint256);\\n\\n    /// @return Ethereum block that the most recent stake was created\\n    function lastStakeBlock() external view returns (uint256);\\n\\n    /// @return Number of active stakers currently staked\\n    function stakerCount() external view returns (uint256);\\n\\n    /// @return Node hash as of this node number\\n    function getNodeHash(uint256 index) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xfb9cf4d73dd17b1c3369c7197126c67650588d6bd241c713a2c780dcdee9e10c\",\"license\":\"Apache-2.0\"},\"contracts/rollup/Rollup.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./RollupEventBridge.sol\\\";\\nimport \\\"./RollupCore.sol\\\";\\nimport \\\"./RollupLib.sol\\\";\\nimport \\\"./INode.sol\\\";\\nimport \\\"./INodeFactory.sol\\\";\\n\\nimport \\\"../challenge/IChallenge.sol\\\";\\nimport \\\"../challenge/IChallengeFactory.sol\\\";\\n\\nimport \\\"../bridge/interfaces/IBridge.sol\\\";\\nimport \\\"../bridge/interfaces/IOutbox.sol\\\";\\nimport \\\"../bridge/Messages.sol\\\";\\n\\nimport \\\"../libraries/ProxyUtil.sol\\\";\\nimport \\\"../libraries/Cloneable.sol\\\";\\nimport \\\"./facets/IRollupFacets.sol\\\";\\n\\nabstract contract RollupBase is Cloneable, RollupCore, Pausable {\\n    // Rollup Config\\n    uint256 public confirmPeriodBlocks;\\n    uint256 public extraChallengeTimeBlocks;\\n    uint256 public avmGasSpeedLimitPerBlock;\\n    uint256 public baseStake;\\n\\n    // Bridge is an IInbox and IOutbox\\n    IBridge public delayedBridge;\\n    ISequencerInbox public sequencerBridge;\\n    IOutbox public outbox;\\n    RollupEventBridge public rollupEventBridge;\\n    IChallengeFactory public challengeFactory;\\n    INodeFactory public nodeFactory;\\n    address public owner;\\n    address public stakeToken;\\n    uint256 public minimumAssertionPeriod;\\n\\n    uint256 public STORAGE_GAP_1;\\n    uint256 public STORAGE_GAP_2;\\n    uint256 public challengeExecutionBisectionDegree;\\n\\n    address[] internal facets;\\n\\n    mapping(address => bool) isValidator;\\n\\n    /// @notice DEPRECATED -- this method is deprecated but still mantained for backward compatibility\\n    /// @dev this actually returns the avmGasSpeedLimitPerBlock\\n    /// @return this actually returns the avmGasSpeedLimitPerBlock\\n    function arbGasSpeedLimitPerBlock() external view returns (uint256) {\\n        return avmGasSpeedLimitPerBlock;\\n    }\\n}\\n\\ncontract Rollup is Proxy, RollupBase {\\n    using Address for address;\\n\\n    constructor(uint256 _confirmPeriodBlocks) public Cloneable() Pausable() {\\n        // constructor is used so logic contract can't be init'ed\\n        confirmPeriodBlocks = _confirmPeriodBlocks;\\n        require(isInit(), \\\"CONSTRUCTOR_NOT_INIT\\\");\\n    }\\n\\n    function isInit() internal view returns (bool) {\\n        return confirmPeriodBlocks != 0;\\n    }\\n\\n    // _rollupParams = [ confirmPeriodBlocks, extraChallengeTimeBlocks, avmGasSpeedLimitPerBlock, baseStake ]\\n    // connectedContracts = [delayedBridge, sequencerInbox, outbox, rollupEventBridge, challengeFactory, nodeFactory]\\n    function initialize(\\n        bytes32 _machineHash,\\n        uint256[4] calldata _rollupParams,\\n        address _stakeToken,\\n        address _owner,\\n        bytes calldata _extraConfig,\\n        address[6] calldata connectedContracts,\\n        address[2] calldata _facets,\\n        uint256[2] calldata sequencerInboxParams\\n    ) public {\\n        require(!isInit(), \\\"ALREADY_INIT\\\");\\n\\n        // calls initialize method in user facet\\n        require(_facets[0].isContract(), \\\"FACET_0_NOT_CONTRACT\\\");\\n        require(_facets[1].isContract(), \\\"FACET_1_NOT_CONTRACT\\\");\\n        (bool success, ) = _facets[1].delegatecall(\\n            abi.encodeWithSelector(IRollupUser.initialize.selector, _stakeToken)\\n        );\\n        require(success, \\\"FAIL_INIT_FACET\\\");\\n\\n        delayedBridge = IBridge(connectedContracts[0]);\\n        sequencerBridge = ISequencerInbox(connectedContracts[1]);\\n        outbox = IOutbox(connectedContracts[2]);\\n        delayedBridge.setOutbox(connectedContracts[2], true);\\n        rollupEventBridge = RollupEventBridge(connectedContracts[3]);\\n        delayedBridge.setInbox(connectedContracts[3], true);\\n\\n        rollupEventBridge.rollupInitialized(\\n            _rollupParams[0],\\n            _rollupParams[2],\\n            _owner,\\n            _extraConfig\\n        );\\n\\n        challengeFactory = IChallengeFactory(connectedContracts[4]);\\n        nodeFactory = INodeFactory(connectedContracts[5]);\\n\\n        INode node = createInitialNode(_machineHash);\\n        initializeCore(node);\\n\\n        confirmPeriodBlocks = _rollupParams[0];\\n        extraChallengeTimeBlocks = _rollupParams[1];\\n        avmGasSpeedLimitPerBlock = _rollupParams[2];\\n        baseStake = _rollupParams[3];\\n        owner = _owner;\\n        // A little over 15 minutes\\n        minimumAssertionPeriod = 75;\\n        challengeExecutionBisectionDegree = 400;\\n\\n        sequencerBridge.setMaxDelay(sequencerInboxParams[0], sequencerInboxParams[1]);\\n\\n        // facets[0] == admin, facets[1] == user\\n        facets = _facets;\\n\\n        emit RollupCreated(_machineHash);\\n        require(isInit(), \\\"INITIALIZE_NOT_INIT\\\");\\n    }\\n\\n    function postUpgradeInit() external {\\n        // it is assumed the rollup contract is behind a Proxy controlled by a proxy admin\\n        // this function can only be called by the proxy admin contract\\n        address proxyAdmin = ProxyUtil.getProxyAdmin();\\n        require(msg.sender == proxyAdmin, \\\"NOT_FROM_ADMIN\\\");\\n\\n        // this upgrade moves the delay blocks and seconds tracking to the sequencer inbox\\n        // because of that we need to update the admin facet logic to allow the owner to set\\n        // these values in the sequencer inbox\\n\\n        STORAGE_GAP_1 = 0;\\n        STORAGE_GAP_2 = 0;\\n    }\\n\\n    function createInitialNode(bytes32 _machineHash) private returns (INode) {\\n        bytes32 state = RollupLib.stateHash(\\n            RollupLib.ExecutionState(\\n                0, // total gas used\\n                _machineHash,\\n                0, // inbox count\\n                0, // send count\\n                0, // log count\\n                0, // send acc\\n                0, // log acc\\n                block.number, // block proposed\\n                1 // Initialization message already in inbox\\n            )\\n        );\\n        return\\n            INode(\\n                nodeFactory.createNode(\\n                    state,\\n                    0, // challenge hash (not challengeable)\\n                    0, // confirm data\\n                    0, // prev node\\n                    block.number // deadline block (not challengeable)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * This contract uses a dispatch pattern from EIP-2535: Diamonds\\n     * together with Open Zeppelin's proxy\\n     */\\n\\n    function getFacets() external view returns (address, address) {\\n        return (getAdminFacet(), getUserFacet());\\n    }\\n\\n    function getAdminFacet() public view returns (address) {\\n        return facets[0];\\n    }\\n\\n    function getUserFacet() public view returns (address) {\\n        return facets[1];\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        require(msg.data.length >= 4, \\\"NO_FUNC_SIG\\\");\\n        address rollupOwner = owner;\\n        // if there is an owner and it is the sender, delegate to admin facet\\n        address target = rollupOwner != address(0) && rollupOwner == msg.sender\\n            ? getAdminFacet()\\n            : getUserFacet();\\n        require(target.isContract(), \\\"TARGET_NOT_CONTRACT\\\");\\n        return target;\\n    }\\n}\\n\",\"keccak256\":\"0x8fb3705f2bd54a0450e0245fbb8f17c215b825a57300491fbf3d39266cb8a97e\",\"license\":\"Apache-2.0\"},\"contracts/rollup/RollupCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./INode.sol\\\";\\nimport \\\"./IRollupCore.sol\\\";\\nimport \\\"./RollupLib.sol\\\";\\nimport \\\"./INodeFactory.sol\\\";\\nimport \\\"./RollupEventBridge.sol\\\";\\nimport \\\"../bridge/interfaces/ISequencerInbox.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract RollupCore is IRollupCore {\\n    using SafeMath for uint256;\\n\\n    // Stakers become Zombies after losing a challenge\\n    struct Zombie {\\n        address stakerAddress;\\n        uint256 latestStakedNode;\\n    }\\n\\n    struct Staker {\\n        uint256 index;\\n        uint256 latestStakedNode;\\n        uint256 amountStaked;\\n        // currentChallenge is 0 if staker is not in a challenge\\n        address currentChallenge;\\n        bool isStaked;\\n    }\\n\\n    uint256 private _latestConfirmed;\\n    uint256 private _firstUnresolvedNode;\\n    uint256 private _latestNodeCreated;\\n    uint256 private _lastStakeBlock;\\n    mapping(uint256 => INode) private _nodes;\\n    mapping(uint256 => bytes32) private _nodeHashes;\\n\\n    address payable[] private _stakerList;\\n    mapping(address => Staker) public override _stakerMap;\\n\\n    Zombie[] private _zombies;\\n\\n    mapping(address => uint256) private _withdrawableFunds;\\n\\n    /**\\n     * @notice Get the address of the Node contract for the given node\\n     * @param nodeNum Index of the node\\n     * @return Address of the Node contract\\n     */\\n    function getNode(uint256 nodeNum) public view override returns (INode) {\\n        return _nodes[nodeNum];\\n    }\\n\\n    /**\\n     * @notice Get the address of the staker at the given index\\n     * @param stakerNum Index of the staker\\n     * @return Address of the staker\\n     */\\n    function getStakerAddress(uint256 stakerNum) external view override returns (address) {\\n        return _stakerList[stakerNum];\\n    }\\n\\n    /**\\n     * @notice Check whether the given staker is staked\\n     * @param staker Staker address to check\\n     * @return True or False for whether the staker was staked\\n     */\\n    function isStaked(address staker) public view override returns (bool) {\\n        return _stakerMap[staker].isStaked;\\n    }\\n\\n    /**\\n     * @notice Get the latest staked node of the given staker\\n     * @param staker Staker address to lookup\\n     * @return Latest node staked of the staker\\n     */\\n    function latestStakedNode(address staker) public view override returns (uint256) {\\n        return _stakerMap[staker].latestStakedNode;\\n    }\\n\\n    /**\\n     * @notice Get the current challenge of the given staker\\n     * @param staker Staker address to lookup\\n     * @return Current challenge of the staker\\n     */\\n    function currentChallenge(address staker) public view override returns (address) {\\n        return _stakerMap[staker].currentChallenge;\\n    }\\n\\n    /**\\n     * @notice Get the amount staked of the given staker\\n     * @param staker Staker address to lookup\\n     * @return Amount staked of the staker\\n     */\\n    function amountStaked(address staker) public view override returns (uint256) {\\n        return _stakerMap[staker].amountStaked;\\n    }\\n\\n    /**\\n     * @notice Get the original staker address of the zombie at the given index\\n     * @param zombieNum Index of the zombie to lookup\\n     * @return Original staker address of the zombie\\n     */\\n    function zombieAddress(uint256 zombieNum) public view override returns (address) {\\n        return _zombies[zombieNum].stakerAddress;\\n    }\\n\\n    /**\\n     * @notice Get Latest node that the given zombie at the given index is staked on\\n     * @param zombieNum Index of the zombie to lookup\\n     * @return Latest node that the given zombie is staked on\\n     */\\n    function zombieLatestStakedNode(uint256 zombieNum) public view override returns (uint256) {\\n        return _zombies[zombieNum].latestStakedNode;\\n    }\\n\\n    /// @return Current number of un-removed zombies\\n    function zombieCount() public view override returns (uint256) {\\n        return _zombies.length;\\n    }\\n\\n    function isZombie(address staker) public view override returns (bool) {\\n        for (uint256 i = 0; i < _zombies.length; i++) {\\n            if (staker == _zombies[i].stakerAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Get the amount of funds withdrawable by the given address\\n     * @param owner Address to check the funds of\\n     * @return Amount of funds withdrawable by owner\\n     */\\n    function withdrawableFunds(address owner) external view override returns (uint256) {\\n        return _withdrawableFunds[owner];\\n    }\\n\\n    /**\\n     * @return Index of the first unresolved node\\n     * @dev If all nodes have been resolved, this will be latestNodeCreated + 1\\n     */\\n    function firstUnresolvedNode() public view override returns (uint256) {\\n        return _firstUnresolvedNode;\\n    }\\n\\n    /// @return Index of the latest confirmed node\\n    function latestConfirmed() public view override returns (uint256) {\\n        return _latestConfirmed;\\n    }\\n\\n    /// @return Index of the latest rollup node created\\n    function latestNodeCreated() public view override returns (uint256) {\\n        return _latestNodeCreated;\\n    }\\n\\n    /// @return Ethereum block that the most recent stake was created\\n    function lastStakeBlock() external view override returns (uint256) {\\n        return _lastStakeBlock;\\n    }\\n\\n    /// @return Number of active stakers currently staked\\n    function stakerCount() public view override returns (uint256) {\\n        return _stakerList.length;\\n    }\\n\\n    /**\\n     * @notice Initialize the core with an initial node\\n     * @param initialNode Initial node to start the chain with\\n     */\\n    function initializeCore(INode initialNode) internal {\\n        _nodes[0] = initialNode;\\n        _firstUnresolvedNode = 1;\\n    }\\n\\n    /**\\n     * @notice React to a new node being created by storing it an incrementing the latest node counter\\n     * @param node Node that was newly created\\n     * @param nodeHash The hash of said node\\n     */\\n    function nodeCreated(INode node, bytes32 nodeHash) internal {\\n        _latestNodeCreated++;\\n        _nodes[_latestNodeCreated] = node;\\n        _nodeHashes[_latestNodeCreated] = nodeHash;\\n    }\\n\\n    /// @return Node hash as of this node number\\n    function getNodeHash(uint256 index) public view override returns (bytes32) {\\n        return _nodeHashes[index];\\n    }\\n\\n    /// @notice Reject the next unresolved node\\n    function _rejectNextNode() internal {\\n        destroyNode(_firstUnresolvedNode);\\n        _firstUnresolvedNode++;\\n    }\\n\\n    /// @notice Confirm the next unresolved node\\n    function confirmNextNode(\\n        bytes32 beforeSendAcc,\\n        bytes calldata sendsData,\\n        uint256[] calldata sendLengths,\\n        uint256 afterSendCount,\\n        bytes32 afterLogAcc,\\n        uint256 afterLogCount,\\n        IOutbox outbox,\\n        RollupEventBridge rollupEventBridge\\n    ) internal {\\n        confirmNode(\\n            _firstUnresolvedNode,\\n            beforeSendAcc,\\n            sendsData,\\n            sendLengths,\\n            afterSendCount,\\n            afterLogAcc,\\n            afterLogCount,\\n            outbox,\\n            rollupEventBridge\\n        );\\n    }\\n\\n    function confirmNode(\\n        uint256 nodeNum,\\n        bytes32 beforeSendAcc,\\n        bytes calldata sendsData,\\n        uint256[] calldata sendLengths,\\n        uint256 afterSendCount,\\n        bytes32 afterLogAcc,\\n        uint256 afterLogCount,\\n        IOutbox outbox,\\n        RollupEventBridge rollupEventBridge\\n    ) internal {\\n        bytes32 afterSendAcc = RollupLib.feedAccumulator(sendsData, sendLengths, beforeSendAcc);\\n\\n        INode node = getNode(nodeNum);\\n        // Authenticate data against node's confirm data pre-image\\n        require(\\n            node.confirmData() ==\\n                RollupLib.confirmHash(\\n                    beforeSendAcc,\\n                    afterSendAcc,\\n                    afterLogAcc,\\n                    afterSendCount,\\n                    afterLogCount\\n                ),\\n            \\\"CONFIRM_DATA\\\"\\n        );\\n\\n        // trusted external call to outbox\\n        outbox.processOutgoingMessages(sendsData, sendLengths);\\n\\n        destroyNode(_latestConfirmed);\\n        _latestConfirmed = nodeNum;\\n        _firstUnresolvedNode = nodeNum + 1;\\n\\n        rollupEventBridge.nodeConfirmed(nodeNum);\\n        emit NodeConfirmed(nodeNum, afterSendAcc, afterSendCount, afterLogAcc, afterLogCount);\\n    }\\n\\n    /**\\n     * @notice Create a new stake at latest confirmed node\\n     * @param stakerAddress Address of the new staker\\n     * @param depositAmount Stake amount of the new staker\\n     */\\n    function createNewStake(address payable stakerAddress, uint256 depositAmount) internal {\\n        uint256 stakerIndex = _stakerList.length;\\n        _stakerList.push(stakerAddress);\\n        _stakerMap[stakerAddress] = Staker(\\n            stakerIndex,\\n            _latestConfirmed,\\n            depositAmount,\\n            address(0), // new staker is not in challenge\\n            true\\n        );\\n        _lastStakeBlock = block.number;\\n        emit UserStakeUpdated(stakerAddress, 0, depositAmount);\\n    }\\n\\n    /**\\n     * @notice Check to see whether the two stakers are in the same challenge\\n     * @param stakerAddress1 Address of the first staker\\n     * @param stakerAddress2 Address of the second staker\\n     * @return Address of the challenge that the two stakers are in\\n     */\\n    function inChallenge(address stakerAddress1, address stakerAddress2)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        Staker storage staker1 = _stakerMap[stakerAddress1];\\n        Staker storage staker2 = _stakerMap[stakerAddress2];\\n        address challenge = staker1.currentChallenge;\\n        require(challenge != address(0), \\\"NO_CHAL\\\");\\n        require(challenge == staker2.currentChallenge, \\\"DIFF_IN_CHAL\\\");\\n        return challenge;\\n    }\\n\\n    /**\\n     * @notice Make the given staker as not being in a challenge\\n     * @param stakerAddress Address of the staker to remove from a challenge\\n     */\\n    function clearChallenge(address stakerAddress) internal {\\n        Staker storage staker = _stakerMap[stakerAddress];\\n        staker.currentChallenge = address(0);\\n    }\\n\\n    /**\\n     * @notice Mark both the given stakers as engaged in the challenge\\n     * @param staker1 Address of the first staker\\n     * @param staker2 Address of the second staker\\n     * @param challenge Address of the challenge both stakers are now in\\n     */\\n    function challengeStarted(\\n        address staker1,\\n        address staker2,\\n        address challenge\\n    ) internal {\\n        _stakerMap[staker1].currentChallenge = challenge;\\n        _stakerMap[staker2].currentChallenge = challenge;\\n    }\\n\\n    /**\\n     * @notice Add to the stake of the given staker by the given amount\\n     * @param stakerAddress Address of the staker to increase the stake of\\n     * @param amountAdded Amount of stake to add to the staker\\n     */\\n    function increaseStakeBy(address stakerAddress, uint256 amountAdded) internal {\\n        Staker storage staker = _stakerMap[stakerAddress];\\n        uint256 initialStaked = staker.amountStaked;\\n        uint256 finalStaked = initialStaked.add(amountAdded);\\n        staker.amountStaked = finalStaked;\\n        emit UserStakeUpdated(stakerAddress, initialStaked, finalStaked);\\n    }\\n\\n    /**\\n     * @notice Reduce the stake of the given staker to the given target\\n     * @param stakerAddress Address of the staker to reduce the stake of\\n     * @param target Amount of stake to leave with the staker\\n     * @return Amount of value released from the stake\\n     */\\n    function reduceStakeTo(address stakerAddress, uint256 target) internal returns (uint256) {\\n        Staker storage staker = _stakerMap[stakerAddress];\\n        uint256 current = staker.amountStaked;\\n        require(target <= current, \\\"TOO_LITTLE_STAKE\\\");\\n        uint256 amountWithdrawn = current.sub(target);\\n        staker.amountStaked = target;\\n        increaseWithdrawableFunds(stakerAddress, amountWithdrawn);\\n        emit UserStakeUpdated(stakerAddress, current, target);\\n        return amountWithdrawn;\\n    }\\n\\n    /**\\n     * @notice Remove the given staker and turn them into a zombie\\n     * @param stakerAddress Address of the staker to remove\\n     */\\n    function turnIntoZombie(address stakerAddress) internal {\\n        Staker storage staker = _stakerMap[stakerAddress];\\n        _zombies.push(Zombie(stakerAddress, staker.latestStakedNode));\\n        deleteStaker(stakerAddress);\\n    }\\n\\n    /**\\n     * @notice Update the latest staked node of the zombie at the given index\\n     * @param zombieNum Index of the zombie to move\\n     * @param latest New latest node the zombie is staked on\\n     */\\n    function zombieUpdateLatestStakedNode(uint256 zombieNum, uint256 latest) internal {\\n        _zombies[zombieNum].latestStakedNode = latest;\\n    }\\n\\n    /**\\n     * @notice Remove the zombie at the given index\\n     * @param zombieNum Index of the zombie to remove\\n     */\\n    function removeZombie(uint256 zombieNum) internal {\\n        _zombies[zombieNum] = _zombies[_zombies.length - 1];\\n        _zombies.pop();\\n    }\\n\\n    /**\\n     * @notice Remove the given staker and return their stake\\n     * @param stakerAddress Address of the staker withdrawing their stake\\n     */\\n    function withdrawStaker(address stakerAddress) internal {\\n        Staker storage staker = _stakerMap[stakerAddress];\\n        uint256 initialStaked = staker.amountStaked;\\n        increaseWithdrawableFunds(stakerAddress, initialStaked);\\n        deleteStaker(stakerAddress);\\n        emit UserStakeUpdated(stakerAddress, initialStaked, 0);\\n    }\\n\\n    /**\\n     * @notice Advance the given staker to the given node\\n     * @param stakerAddress Address of the staker adding their stake\\n     * @param nodeNum Index of the node to stake on\\n     */\\n    function stakeOnNode(\\n        address stakerAddress,\\n        uint256 nodeNum,\\n        uint256 confirmPeriodBlocks\\n    ) internal {\\n        Staker storage staker = _stakerMap[stakerAddress];\\n        INode node = _nodes[nodeNum];\\n        uint256 newStakerCount = node.addStaker(stakerAddress);\\n        staker.latestStakedNode = nodeNum;\\n        if (newStakerCount == 1) {\\n            INode parent = _nodes[node.prev()];\\n            parent.newChildConfirmDeadline(block.number.add(confirmPeriodBlocks));\\n        }\\n    }\\n\\n    /**\\n     * @notice Clear the withdrawable funds for the given address\\n     * @param owner Address of the account to remove funds from\\n     * @return Amount of funds removed from account\\n     */\\n    function withdrawFunds(address owner) internal returns (uint256) {\\n        uint256 amount = _withdrawableFunds[owner];\\n        _withdrawableFunds[owner] = 0;\\n        emit UserWithdrawableFundsUpdated(owner, amount, 0);\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Increase the withdrawable funds for the given address\\n     * @param owner Address of the account to add withdrawable funds to\\n     */\\n    function increaseWithdrawableFunds(address owner, uint256 amount) internal {\\n        uint256 initialWithdrawable = _withdrawableFunds[owner];\\n        uint256 finalWithdrawable = initialWithdrawable.add(amount);\\n        _withdrawableFunds[owner] = finalWithdrawable;\\n        emit UserWithdrawableFundsUpdated(owner, initialWithdrawable, finalWithdrawable);\\n    }\\n\\n    /**\\n     * @notice Remove the given staker\\n     * @param stakerAddress Address of the staker to remove\\n     */\\n    function deleteStaker(address stakerAddress) private {\\n        Staker storage staker = _stakerMap[stakerAddress];\\n        uint256 stakerIndex = staker.index;\\n        _stakerList[stakerIndex] = _stakerList[_stakerList.length - 1];\\n        _stakerMap[_stakerList[stakerIndex]].index = stakerIndex;\\n        _stakerList.pop();\\n        delete _stakerMap[stakerAddress];\\n    }\\n\\n    /**\\n     * @notice Destroy the given node and clear out its address\\n     * @param nodeNum Index of the node to remove\\n     */\\n    function destroyNode(uint256 nodeNum) internal {\\n        _nodes[nodeNum].destroy();\\n        _nodes[nodeNum] = INode(0);\\n    }\\n\\n    function nodeDeadline(\\n        uint256 avmGasSpeedLimitPerBlock,\\n        uint256 gasUsed,\\n        uint256 confirmPeriodBlocks,\\n        INode prevNode\\n    ) internal view returns (uint256 deadlineBlock) {\\n        // Set deadline rounding up to the nearest block\\n        uint256 checkTime = gasUsed.add(avmGasSpeedLimitPerBlock.sub(1)).div(\\n            avmGasSpeedLimitPerBlock\\n        );\\n\\n        deadlineBlock = max(block.number.add(confirmPeriodBlocks), prevNode.deadlineBlock()).add(\\n            checkTime\\n        );\\n\\n        uint256 olderSibling = prevNode.latestChildNumber();\\n        if (olderSibling != 0) {\\n            deadlineBlock = max(deadlineBlock, getNode(olderSibling).deadlineBlock());\\n        }\\n        return deadlineBlock;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    struct StakeOnNewNodeFrame {\\n        uint256 currentInboxSize;\\n        INode node;\\n        bytes32 executionHash;\\n        INode prevNode;\\n        bytes32 lastHash;\\n        bool hasSibling;\\n        uint256 deadlineBlock;\\n        uint256 gasUsed;\\n        uint256 sequencerBatchEnd;\\n        bytes32 sequencerBatchAcc;\\n    }\\n\\n    struct CreateNodeDataFrame {\\n        uint256 prevNode;\\n        uint256 confirmPeriodBlocks;\\n        uint256 avmGasSpeedLimitPerBlock;\\n        ISequencerInbox sequencerInbox;\\n        RollupEventBridge rollupEventBridge;\\n        INodeFactory nodeFactory;\\n    }\\n\\n    uint8 internal constant MAX_SEND_COUNT = 100;\\n\\n    function createNewNode(\\n        RollupLib.Assertion memory assertion,\\n        bytes32[3][2] calldata assertionBytes32Fields,\\n        uint256[4][2] calldata assertionIntFields,\\n        bytes calldata sequencerBatchProof,\\n        CreateNodeDataFrame memory inputDataFrame,\\n        bytes32 expectedNodeHash\\n    ) internal returns (bytes32 newNodeHash) {\\n        StakeOnNewNodeFrame memory memoryFrame;\\n        {\\n            // validate data\\n            memoryFrame.gasUsed = RollupLib.assertionGasUsed(assertion);\\n            memoryFrame.prevNode = getNode(inputDataFrame.prevNode);\\n            memoryFrame.currentInboxSize = inputDataFrame.sequencerInbox.messageCount();\\n\\n            // Make sure the previous state is correct against the node being built on\\n            require(\\n                RollupLib.stateHash(assertion.beforeState) == memoryFrame.prevNode.stateHash(),\\n                \\\"PREV_STATE_HASH\\\"\\n            );\\n\\n            // Ensure that the assertion doesn't read past the end of the current inbox\\n            require(\\n                assertion.afterState.inboxCount <= memoryFrame.currentInboxSize,\\n                \\\"INBOX_PAST_END\\\"\\n            );\\n            // Insure inbox tip after assertion is included in a sequencer-inbox batch and return inbox acc; this gives replay protection against the state of the inbox\\n            (memoryFrame.sequencerBatchEnd, memoryFrame.sequencerBatchAcc) = inputDataFrame\\n                .sequencerInbox\\n                .proveInboxContainsMessage(sequencerBatchProof, assertion.afterState.inboxCount);\\n        }\\n\\n        {\\n            memoryFrame.executionHash = RollupLib.executionHash(assertion);\\n\\n            memoryFrame.deadlineBlock = nodeDeadline(\\n                inputDataFrame.avmGasSpeedLimitPerBlock,\\n                memoryFrame.gasUsed,\\n                inputDataFrame.confirmPeriodBlocks,\\n                memoryFrame.prevNode\\n            );\\n\\n            memoryFrame.hasSibling = memoryFrame.prevNode.latestChildNumber() > 0;\\n            // here we don't use ternacy operator to remain compatible with slither\\n            if (memoryFrame.hasSibling) {\\n                memoryFrame.lastHash = getNodeHash(memoryFrame.prevNode.latestChildNumber());\\n            } else {\\n                memoryFrame.lastHash = getNodeHash(inputDataFrame.prevNode);\\n            }\\n\\n            memoryFrame.node = INode(\\n                inputDataFrame.nodeFactory.createNode(\\n                    RollupLib.stateHash(assertion.afterState),\\n                    RollupLib.challengeRoot(assertion, memoryFrame.executionHash, block.number),\\n                    RollupLib.confirmHash(assertion),\\n                    inputDataFrame.prevNode,\\n                    memoryFrame.deadlineBlock\\n                )\\n            );\\n        }\\n\\n        {\\n            uint256 nodeNum = latestNodeCreated() + 1;\\n            memoryFrame.prevNode.childCreated(nodeNum);\\n\\n            newNodeHash = RollupLib.nodeHash(\\n                memoryFrame.hasSibling,\\n                memoryFrame.lastHash,\\n                memoryFrame.executionHash,\\n                memoryFrame.sequencerBatchAcc\\n            );\\n            require(newNodeHash == expectedNodeHash, \\\"UNEXPECTED_NODE_HASH\\\");\\n\\n            nodeCreated(memoryFrame.node, newNodeHash);\\n            inputDataFrame.rollupEventBridge.nodeCreated(\\n                nodeNum,\\n                inputDataFrame.prevNode,\\n                memoryFrame.deadlineBlock,\\n                msg.sender\\n            );\\n        }\\n\\n        emit NodeCreated(\\n            latestNodeCreated(),\\n            getNodeHash(inputDataFrame.prevNode),\\n            newNodeHash,\\n            memoryFrame.executionHash,\\n            memoryFrame.currentInboxSize,\\n            memoryFrame.sequencerBatchEnd,\\n            memoryFrame.sequencerBatchAcc,\\n            assertionBytes32Fields,\\n            assertionIntFields\\n        );\\n\\n        return newNodeHash;\\n    }\\n}\\n\",\"keccak256\":\"0xb07efbc017c1f0ff3c538fad17d6e6f8075d2ab17c0d0edf075e8cd996503e87\",\"license\":\"Apache-2.0\"},\"contracts/rollup/RollupEventBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./Rollup.sol\\\";\\nimport \\\"./facets/IRollupFacets.sol\\\";\\n\\nimport \\\"../bridge/interfaces/IBridge.sol\\\";\\nimport \\\"../bridge/interfaces/IMessageProvider.sol\\\";\\nimport \\\"./INode.sol\\\";\\nimport \\\"../libraries/Cloneable.sol\\\";\\n\\ncontract RollupEventBridge is IMessageProvider, Cloneable {\\n    uint8 internal constant INITIALIZATION_MSG_TYPE = 11;\\n    uint8 internal constant ROLLUP_PROTOCOL_EVENT_TYPE = 8;\\n\\n    uint8 internal constant CREATE_NODE_EVENT = 0;\\n    uint8 internal constant CONFIRM_NODE_EVENT = 1;\\n    uint8 internal constant REJECT_NODE_EVENT = 2;\\n    uint8 internal constant STAKE_CREATED_EVENT = 3;\\n\\n    IBridge bridge;\\n    address rollup;\\n\\n    modifier onlyRollup() {\\n        require(msg.sender == rollup, \\\"ONLY_ROLLUP\\\");\\n        _;\\n    }\\n\\n    function initialize(address _bridge, address _rollup) external {\\n        require(rollup == address(0), \\\"ALREADY_INIT\\\");\\n        bridge = IBridge(_bridge);\\n        rollup = _rollup;\\n    }\\n\\n    function rollupInitialized(\\n        uint256 confirmPeriodBlocks,\\n        uint256 avmGasSpeedLimitPerBlock,\\n        address owner,\\n        bytes calldata extraConfig\\n    ) external onlyRollup {\\n        bytes memory initMsg = abi.encodePacked(\\n            keccak256(\\\"ChallengePeriodEthBlocks\\\"),\\n            confirmPeriodBlocks,\\n            keccak256(\\\"SpeedLimitPerSecond\\\"),\\n            avmGasSpeedLimitPerBlock / 100, // convert avm gas to arbgas\\n            keccak256(\\\"ChainOwner\\\"),\\n            uint256(uint160(bytes20(owner))),\\n            extraConfig\\n        );\\n        uint256 num = bridge.deliverMessageToInbox(\\n            INITIALIZATION_MSG_TYPE,\\n            address(0),\\n            keccak256(initMsg)\\n        );\\n        emit InboxMessageDelivered(num, initMsg);\\n    }\\n\\n    function nodeCreated(\\n        uint256 nodeNum,\\n        uint256 prev,\\n        uint256 deadline,\\n        address asserter\\n    ) external onlyRollup {\\n        deliverToBridge(\\n            abi.encodePacked(\\n                CREATE_NODE_EVENT,\\n                nodeNum,\\n                prev,\\n                block.number,\\n                deadline,\\n                uint256(uint160(bytes20(asserter)))\\n            )\\n        );\\n    }\\n\\n    function nodeConfirmed(uint256 nodeNum) external onlyRollup {\\n        deliverToBridge(abi.encodePacked(CONFIRM_NODE_EVENT, nodeNum));\\n    }\\n\\n    function nodeRejected(uint256 nodeNum) external onlyRollup {\\n        deliverToBridge(abi.encodePacked(REJECT_NODE_EVENT, nodeNum));\\n    }\\n\\n    function stakeCreated(address staker, uint256 nodeNum) external onlyRollup {\\n        deliverToBridge(\\n            abi.encodePacked(\\n                STAKE_CREATED_EVENT,\\n                uint256(uint160(bytes20(staker))),\\n                nodeNum,\\n                block.number\\n            )\\n        );\\n    }\\n\\n    function deliverToBridge(bytes memory message) private {\\n        emit InboxMessageDelivered(\\n            bridge.deliverMessageToInbox(\\n                ROLLUP_PROTOCOL_EVENT_TYPE,\\n                msg.sender,\\n                keccak256(message)\\n            ),\\n            message\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf6ae9ec53ae34b3cbdf797dc6258cbd73cc8afdb62bc0a8bbbb8a8a473519150\",\"license\":\"Apache-2.0\"},\"contracts/rollup/RollupLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"../challenge/ChallengeLib.sol\\\";\\nimport \\\"./INode.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary RollupLib {\\n    using SafeMath for uint256;\\n\\n    struct Config {\\n        bytes32 machineHash;\\n        uint256 confirmPeriodBlocks;\\n        uint256 extraChallengeTimeBlocks;\\n        uint256 avmGasSpeedLimitPerBlock;\\n        uint256 baseStake;\\n        address stakeToken;\\n        address owner;\\n        address sequencer;\\n        uint256 sequencerDelayBlocks;\\n        uint256 sequencerDelaySeconds;\\n        bytes extraConfig;\\n    }\\n\\n    struct ExecutionState {\\n        uint256 gasUsed;\\n        bytes32 machineHash;\\n        uint256 inboxCount;\\n        uint256 sendCount;\\n        uint256 logCount;\\n        bytes32 sendAcc;\\n        bytes32 logAcc;\\n        uint256 proposedBlock;\\n        uint256 inboxMaxCount;\\n    }\\n\\n    function stateHash(ExecutionState memory execState) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    execState.gasUsed,\\n                    execState.machineHash,\\n                    execState.inboxCount,\\n                    execState.sendCount,\\n                    execState.logCount,\\n                    execState.sendAcc,\\n                    execState.logAcc,\\n                    execState.proposedBlock,\\n                    execState.inboxMaxCount\\n                )\\n            );\\n    }\\n\\n    struct Assertion {\\n        ExecutionState beforeState;\\n        ExecutionState afterState;\\n    }\\n\\n    function decodeExecutionState(\\n        bytes32[3] memory bytes32Fields,\\n        uint256[4] memory intFields,\\n        uint256 proposedBlock,\\n        uint256 inboxMaxCount\\n    ) internal pure returns (ExecutionState memory) {\\n        return\\n            ExecutionState(\\n                intFields[0],\\n                bytes32Fields[0],\\n                intFields[1],\\n                intFields[2],\\n                intFields[3],\\n                bytes32Fields[1],\\n                bytes32Fields[2],\\n                proposedBlock,\\n                inboxMaxCount\\n            );\\n    }\\n\\n    function decodeAssertion(\\n        bytes32[3][2] memory bytes32Fields,\\n        uint256[4][2] memory intFields,\\n        uint256 beforeProposedBlock,\\n        uint256 beforeInboxMaxCount,\\n        uint256 inboxMaxCount\\n    ) internal view returns (Assertion memory) {\\n        return\\n            Assertion(\\n                decodeExecutionState(\\n                    bytes32Fields[0],\\n                    intFields[0],\\n                    beforeProposedBlock,\\n                    beforeInboxMaxCount\\n                ),\\n                decodeExecutionState(bytes32Fields[1], intFields[1], block.number, inboxMaxCount)\\n            );\\n    }\\n\\n    function executionStateChallengeHash(ExecutionState memory state)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            ChallengeLib.assertionHash(\\n                state.gasUsed,\\n                ChallengeLib.assertionRestHash(\\n                    state.inboxCount,\\n                    state.machineHash,\\n                    state.sendAcc,\\n                    state.sendCount,\\n                    state.logAcc,\\n                    state.logCount\\n                )\\n            );\\n    }\\n\\n    function executionHash(Assertion memory assertion) internal pure returns (bytes32) {\\n        return\\n            ChallengeLib.bisectionChunkHash(\\n                assertion.beforeState.gasUsed,\\n                assertion.afterState.gasUsed - assertion.beforeState.gasUsed,\\n                RollupLib.executionStateChallengeHash(assertion.beforeState),\\n                RollupLib.executionStateChallengeHash(assertion.afterState)\\n            );\\n    }\\n\\n    function assertionGasUsed(RollupLib.Assertion memory assertion)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return assertion.afterState.gasUsed.sub(assertion.beforeState.gasUsed);\\n    }\\n\\n    function challengeRoot(\\n        Assertion memory assertion,\\n        bytes32 assertionExecHash,\\n        uint256 blockProposed\\n    ) internal pure returns (bytes32) {\\n        return challengeRootHash(assertionExecHash, blockProposed, assertion.afterState.inboxCount);\\n    }\\n\\n    function challengeRootHash(\\n        bytes32 execution,\\n        uint256 proposedTime,\\n        uint256 maxMessageCount\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(execution, proposedTime, maxMessageCount));\\n    }\\n\\n    function confirmHash(Assertion memory assertion) internal pure returns (bytes32) {\\n        return\\n            confirmHash(\\n                assertion.beforeState.sendAcc,\\n                assertion.afterState.sendAcc,\\n                assertion.afterState.logAcc,\\n                assertion.afterState.sendCount,\\n                assertion.afterState.logCount\\n            );\\n    }\\n\\n    function confirmHash(\\n        bytes32 beforeSendAcc,\\n        bytes32 afterSendAcc,\\n        bytes32 afterLogAcc,\\n        uint256 afterSendCount,\\n        uint256 afterLogCount\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    beforeSendAcc,\\n                    afterSendAcc,\\n                    afterSendCount,\\n                    afterLogAcc,\\n                    afterLogCount\\n                )\\n            );\\n    }\\n\\n    function feedAccumulator(\\n        bytes memory messageData,\\n        uint256[] memory messageLengths,\\n        bytes32 beforeAcc\\n    ) internal pure returns (bytes32) {\\n        uint256 offset = 0;\\n        uint256 messageCount = messageLengths.length;\\n        uint256 dataLength = messageData.length;\\n        bytes32 messageAcc = beforeAcc;\\n        for (uint256 i = 0; i < messageCount; i++) {\\n            uint256 messageLength = messageLengths[i];\\n            require(offset + messageLength <= dataLength, \\\"DATA_OVERRUN\\\");\\n            bytes32 messageHash;\\n            assembly {\\n                messageHash := keccak256(add(messageData, add(offset, 32)), messageLength)\\n            }\\n            messageAcc = keccak256(abi.encodePacked(messageAcc, messageHash));\\n            offset += messageLength;\\n        }\\n        require(offset == dataLength, \\\"DATA_LENGTH\\\");\\n        return messageAcc;\\n    }\\n\\n    function nodeHash(\\n        bool hasSibling,\\n        bytes32 lastHash,\\n        bytes32 assertionExecHash,\\n        bytes32 inboxAcc\\n    ) internal pure returns (bytes32) {\\n        uint8 hasSiblingInt = hasSibling ? 1 : 0;\\n        return keccak256(abi.encodePacked(hasSiblingInt, lastHash, assertionExecHash, inboxAcc));\\n    }\\n}\\n\",\"keccak256\":\"0x46b7c619e27f36a6ed2082aebf54a177806292c9a4b2eb1c531fdf2bf0077db9\",\"license\":\"Apache-2.0\"},\"contracts/rollup/facets/IRollupFacets.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"../INode.sol\\\";\\nimport \\\"../../bridge/interfaces/IOutbox.sol\\\";\\n\\ninterface IRollupUser {\\n    function initialize(address _stakeToken) external;\\n\\n    function completeChallenge(address winningStaker, address losingStaker) external;\\n\\n    function returnOldDeposit(address stakerAddress) external;\\n\\n    function requireUnresolved(uint256 nodeNum) external view;\\n\\n    function requireUnresolvedExists() external view;\\n\\n    function countStakedZombies(INode node) external view returns (uint256);\\n}\\n\\ninterface IRollupAdmin {\\n    event OwnerFunctionCalled(uint256 indexed id);\\n\\n    /**\\n     * @notice Add a contract authorized to put messages into this rollup's inbox\\n     * @param _outbox Outbox contract to add\\n     */\\n    function setOutbox(IOutbox _outbox) external;\\n\\n    /**\\n     * @notice Disable an old outbox from interacting with the bridge\\n     * @param _outbox Outbox contract to remove\\n     */\\n    function removeOldOutbox(address _outbox) external;\\n\\n    /**\\n     * @notice Enable or disable an inbox contract\\n     * @param _inbox Inbox contract to add or remove\\n     * @param _enabled New status of inbox\\n     */\\n    function setInbox(address _inbox, bool _enabled) external;\\n\\n    /**\\n     * @notice Pause interaction with the rollup contract\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @notice Resume interaction with the rollup contract\\n     */\\n    function resume() external;\\n\\n    /**\\n     * @notice Set the addresses of rollup logic facets called\\n     * @param newAdminFacet address of logic that owner of rollup calls\\n     * @param newUserFacet ddress of logic that user of rollup calls\\n     */\\n    function setFacets(address newAdminFacet, address newUserFacet) external;\\n\\n    /**\\n     * @notice Set the addresses of the validator whitelist\\n     * @dev It is expected that both arrays are same length, and validator at\\n     * position i corresponds to the value at position i\\n     * @param _validator addresses to set in the whitelist\\n     * @param _val value to set in the whitelist for corresponding address\\n     */\\n    function setValidator(address[] memory _validator, bool[] memory _val) external;\\n\\n    /**\\n     * @notice Set a new owner address for the rollup\\n     * @param newOwner address of new rollup owner\\n     */\\n    function setOwner(address newOwner) external;\\n\\n    /**\\n     * @notice Set minimum assertion period for the rollup\\n     * @param newPeriod new minimum period for assertions\\n     */\\n    function setMinimumAssertionPeriod(uint256 newPeriod) external;\\n\\n    /**\\n     * @notice Set number of blocks until a node is considered confirmed\\n     * @param newConfirmPeriod new number of blocks until a node is confirmed\\n     */\\n    function setConfirmPeriodBlocks(uint256 newConfirmPeriod) external;\\n\\n    /**\\n     * @notice Set number of extra blocks after a challenge\\n     * @param newExtraTimeBlocks new number of blocks\\n     */\\n    function setExtraChallengeTimeBlocks(uint256 newExtraTimeBlocks) external;\\n\\n    /**\\n     * @notice Set speed limit per block\\n     * @param newAvmGasSpeedLimitPerBlock maximum avmgas to be used per block\\n     */\\n    function setAvmGasSpeedLimitPerBlock(uint256 newAvmGasSpeedLimitPerBlock) external;\\n\\n    /**\\n     * @notice Set base stake required for an assertion\\n     * @param newBaseStake maximum avmgas to be used per block\\n     */\\n    function setBaseStake(uint256 newBaseStake) external;\\n\\n    /**\\n     * @notice Set the token used for stake, where address(0) == eth\\n     * @dev Before changing the base stake token, you might need to change the\\n     * implementation of the Rollup User facet!\\n     * @param newStakeToken address of token used for staking\\n     */\\n    function setStakeToken(address newStakeToken) external;\\n\\n    /**\\n     * @notice Set max delay for sequencer inbox\\n     * @param newSequencerInboxMaxDelayBlocks max number of blocks\\n     * @param newSequencerInboxMaxDelaySeconds max number of seconds\\n     */\\n    function setSequencerInboxMaxDelay(\\n        uint256 newSequencerInboxMaxDelayBlocks,\\n        uint256 newSequencerInboxMaxDelaySeconds\\n    ) external;\\n\\n    /**\\n     * @notice Set execution bisection degree\\n     * @param newChallengeExecutionBisectionDegree execution bisection degree\\n     */\\n    function setChallengeExecutionBisectionDegree(uint256 newChallengeExecutionBisectionDegree)\\n        external;\\n\\n    /**\\n     * @notice Updates a whitelist address for its consumers\\n     * @dev setting the newWhitelist to address(0) disables it for consumers\\n     * @param whitelist old whitelist to be deprecated\\n     * @param newWhitelist new whitelist to be used\\n     * @param targets whitelist consumers to be triggered\\n     */\\n    function updateWhitelistConsumers(\\n        address whitelist,\\n        address newWhitelist,\\n        address[] memory targets\\n    ) external;\\n\\n    /**\\n     * @notice Updates a whitelist's entries\\n     * @dev user at position i will be assigned value i\\n     * @param whitelist whitelist to be updated\\n     * @param user users to be updated in the whitelist\\n     * @param val if user is or not allowed in the whitelist\\n     */\\n    function setWhitelistEntries(\\n        address whitelist,\\n        address[] memory user,\\n        bool[] memory val\\n    ) external;\\n\\n    /**\\n     * @notice Updates whether an address is a sequencer at the sequencer inbox\\n     * @param newSequencer address to be modified\\n     * @param isSequencer whether this address should be authorized as a sequencer\\n     */\\n    function setIsSequencer(address newSequencer, bool isSequencer) external;\\n\\n    /**\\n     * @notice Upgrades the implementation of a beacon controlled by the rollup\\n     * @param beacon address of beacon to be upgraded\\n     * @param newImplementation new address of implementation\\n     */\\n    function upgradeBeacon(address beacon, address newImplementation) external;\\n\\n    function forceResolveChallenge(address[] memory stackerA, address[] memory stackerB) external;\\n\\n    function forceRefundStaker(address[] memory stacker) external;\\n\\n    function forceCreateNode(\\n        bytes32 expectedNodeHash,\\n        bytes32[3][2] calldata assertionBytes32Fields,\\n        uint256[4][2] calldata assertionIntFields,\\n        bytes calldata sequencerBatchProof,\\n        uint256 beforeProposedBlock,\\n        uint256 beforeInboxMaxCount,\\n        uint256 prevNode\\n    ) external;\\n\\n    function forceConfirmNode(\\n        uint256 nodeNum,\\n        bytes32 beforeSendAcc,\\n        bytes calldata sendsData,\\n        uint256[] calldata sendLengths,\\n        uint256 afterSendCount,\\n        bytes32 afterLogAcc,\\n        uint256 afterLogCount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x83a4823330b905aee4e801f339c164efa91e6517809c6e5ad9f45a5fc3b216e5\",\"license\":\"Apache-2.0\"},\"contracts/validator/IGasRefunder.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity >=0.6.11 <0.7.0 || >=0.8.7 <0.9.0;\\n\\ninterface IGasRefunder {\\n    function onGasSpent(\\n        address payable spender,\\n        uint256 gasUsed,\\n        uint256 calldataSize\\n    ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0x132410580c6138f771098f3a7c74e20f69d09f1b1ee02a37e92f2ae11d92d8ca\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506000620000276001600160e01b03620001f316565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506040516200007f90620001f7565b604051809103906000f0801580156200009c573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055604051620000cb9062000205565b604051809103906000f080158015620000e8573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055604051620001179062000213565b604051809103906000f08015801562000134573d6000803e3d6000fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055604051620001639062000221565b604051809103906000f08015801562000180573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b0392909216919091179055604051620001af906200022f565b604051809103906000f080158015620001cc573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b03929092169190911790556200023d565b3390565b6112fe806200228783390190565b611e4d806200358583390190565b611eb580620053d283390190565b6108b4806200728783390190565b6113428062007b3b83390190565b61203a806200024d6000396000f3fe60806040523480156200001157600080fd5b5060043610620000ac5760003560e01c80638da5cb5b116200006f5780638da5cb5b1462000142578063953b2219146200014c578063e6027a8714620001c3578063f2fde38b14620001cd578063fc6a2ed014620001f657620000ac565b806319f82a2d14620000b15780632147e58e14620000d75780636f75af6f1462000124578063715018a6146200012e5780637ba0e8571462000138575b600080fd5b620000bb62000200565b604080516001600160a01b039092168252519081900360200190f35b62000122600480360360a0811015620000ef57600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608090910135166200020f565b005b620000bb620002fd565b620001226200030c565b620000bb620003be565b620000bb620003cd565b62000187600480360360608110156200016457600080fd5b506001600160a01b038135811691602081013582169160409091013516620003dc565b604080516001600160a01b0396871681529486166020860152928516848401529084166060840152909216608082015290519081900360a00190f35b620000bb62000a7c565b6200012260048036036020811015620001e557600080fd5b50356001600160a01b031662000a8b565b620000bb62000b95565b6001546001600160a01b031681565b6200021962000ba4565b6001600160a01b03166200022c620003cd565b6001600160a01b03161462000277576040805162461bcd60e51b8152602060048201819052602482015260008051602062001fe5833981519152604482015290519081900360640190fd5b600180546001600160a01b03199081166001600160a01b0388811691909117909255600280548216878416179055600380548216868416179055600480548216858416179055600580549091169183169190911790556040517fc9d3947d22fa124aaec4c7e8c919f79016e2d7b48eee10568375d98b86460d1b90600090a15050505050565b6004546001600160a01b031681565b6200031662000ba4565b6001600160a01b031662000329620003cd565b6001600160a01b03161462000374576040805162461bcd60e51b8152602060048201819052602482015260008051602062001fe5833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6003546001600160a01b031681565b6000546001600160a01b031690565b6000806000806000620003ee62000ba8565b6001546040516001600160a01b03909116908a906200040d9062000be4565b6001600160a01b03928316815291166020820152606060408083018290526000918301829052519182900360a0019190f08015801562000451573d6000803e3d6000fd5b506001600160a01b0390811660208301526002546040519116908a90620004789062000be4565b6001600160a01b03928316815291166020820152606060408083018290526000918301829052519182900360a0019190f080158015620004bc573d6000803e3d6000fd5b506001600160a01b0390811660408084019190915260035490519116908a90620004e69062000be4565b6001600160a01b03928316815291166020820152606060408083018290526000918301829052519182900360a0019190f0801580156200052a573d6000803e3d6000fd5b506001600160a01b0390811660608301526004546040519116908a90620005519062000be4565b6001600160a01b03928316815291166020820152606060408083018290526000918301829052519182900360a0019190f08015801562000595573d6000803e3d6000fd5b506001600160a01b0390811660808301526005546040519116908a90620005bc9062000be4565b6001600160a01b03928316815291166020820152606060408083018290526000918301829052519182900360a0019190f08015801562000600573d6000803e3d6000fd5b506001600160a01b031660a08201526040516200061d9062000bf2565b604051809103906000f0801580156200063a573d6000803e3d6000fd5b508160c001906001600160a01b031690816001600160a01b03168152505080602001516001600160a01b0316638129fc1c6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200069857600080fd5b505af1158015620006ad573d6000803e3d6000fd5b505050506040818101516020830151825163c0c53b8b60e01b81526001600160a01b0391821660048201528a821660248201528b82166044820152925191169163c0c53b8b91606480830192600092919082900301818387803b1580156200071457600080fd5b505af115801562000729573d6000803e3d6000fd5b5050505080606001516001600160a01b031663485cc95582602001518360c001516040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001826001600160a01b03166001600160a01b0316815260200192505050600060405180830381600087803b158015620007ac57600080fd5b505af1158015620007c1573d6000803e3d6000fd5b5050505080608001516001600160a01b031663485cc95582602001518a6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001826001600160a01b03166001600160a01b0316815260200192505050600060405180830381600087803b1580156200084057600080fd5b505af115801562000855573d6000803e3d6000fd5b505050508060a001516001600160a01b031663485cc9558983602001516040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001826001600160a01b03166001600160a01b0316815260200192505050600060405180830381600087803b158015620008d457600080fd5b505af1158015620008e9573d6000803e3d6000fd5b50505050602081015160608201516040805163722dbe7360e11b81526001600160a01b039283166004820152600160248201529051919092169163e45b7ce691604480830192600092919082900301818387803b1580156200094a57600080fd5b505af11580156200095f573d6000803e3d6000fd5b5050505080602001516001600160a01b031663f2fde38b896040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050600060405180830381600087803b158015620009c057600080fd5b505af1158015620009d5573d6000803e3d6000fd5b505050508060c001516001600160a01b03166313af4035896040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050600060405180830381600087803b15801562000a3657600080fd5b505af115801562000a4b573d6000803e3d6000fd5b50505050602081015160408201516060830151608084015160a090940151929c919b50995091975095509350505050565b6002546001600160a01b031681565b62000a9562000ba4565b6001600160a01b031662000aa8620003cd565b6001600160a01b03161462000af3576040805162461bcd60e51b8152602060048201819052602482015260008051602062001fe5833981519152604482015290519081900360640190fd5b6001600160a01b03811662000b3a5760405162461bcd60e51b815260040180806020018281038252602681526020018062001fbf6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031681565b3390565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b610d608062000c0183390190565b61065e80620019618339019056fe608060405260405162000d6038038062000d60833981810160405260608110156200002957600080fd5b815160208301516040808501805191519395929483019291846401000000008211156200005557600080fd5b9083019060208201858111156200006b57600080fd5b82516401000000008111828201881017156200008657600080fd5b82525081516020918201929091019080838360005b83811015620000b55781810151838201526020016200009b565b50505050905090810190601f168015620000e35780820380516001836020036101000a031916815260200191505b5060408181527f656970313936372e70726f78792e696d706c656d656e746174696f6e0000000082525190819003601c01902086935084925060008051602062000cbd8339815191526000199091011490506200013c57fe5b62000150826001600160e01b03620001e016565b80511562000171576200016f82826200024660201b620003841760201c565b505b5050604080517f656970313936372e70726f78792e61646d696e000000000000000000000000008152905190819003601301902060008051602062000c9d83398151915260001990910114620001c357fe5b620001d7826001600160e01b036200027e16565b50505062000461565b620001f6816200029160201b620003b01760201c565b620002335760405162461bcd60e51b815260040180806020018281038252603681526020018062000d046036913960400191505060405180910390fd5b60008051602062000cbd83398151915255565b606062000277838360405180606001604052806027815260200162000cdd602791396001600160e01b036200029716565b9392505050565b60008051602062000c9d83398151915255565b3b151590565b6060620002ad846001600160e01b036200029116565b620002ea5760405162461bcd60e51b815260040180806020018281038252602681526020018062000d3a6026913960400191505060405180910390fd5b60006060856001600160a01b0316856040518082805190602001908083835b602083106200032a5780518252601f19909201916020918201910162000309565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146200038c576040519150601f19603f3d011682016040523d82523d6000602084013e62000391565b606091505b509092509050620003ad8282866001600160e01b03620003b716565b9695505050505050565b60608315620003c857508162000277565b825115620003d95782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620004255781810151838201526020016200040b565b50505050905090810190601f168015620004535780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b61082c80620004716000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100985780635c60da1b146101185780638f28397014610149578063f851a4401461017c5761005d565b3661005d5761005b610191565b005b61005b610191565b34801561007157600080fd5b5061005b6004803603602081101561008857600080fd5b50356001600160a01b03166101ab565b61005b600480360360408110156100ae57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100d957600080fd5b8201836020820111156100eb57600080fd5b8035906020019184600183028401116401000000008311171561010d57600080fd5b5090925090506101e5565b34801561012457600080fd5b5061012d610262565b604080516001600160a01b039092168252519081900360200190f35b34801561015557600080fd5b5061005b6004803603602081101561016c57600080fd5b50356001600160a01b031661029f565b34801561018857600080fd5b5061012d610359565b6101996103b6565b6101a96101a4610416565b61043b565b565b6101b361045f565b6001600160a01b0316336001600160a01b031614156101da576101d581610484565b6101e2565b6101e2610191565b50565b6101ed61045f565b6001600160a01b0316336001600160a01b031614156102555761020f83610484565b61024f8383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061038492505050565b5061025d565b61025d610191565b505050565b600061026c61045f565b6001600160a01b0316336001600160a01b031614156102945761028d610416565b905061029c565b61029c610191565b90565b6102a761045f565b6001600160a01b0316336001600160a01b031614156101da576001600160a01b0381166103055760405162461bcd60e51b815260040180806020018281038252603a8152602001806106f8603a913960400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61032e61045f565b604080516001600160a01b03928316815291841660208301528051918290030190a16101d5816104c4565b600061036361045f565b6001600160a01b0316336001600160a01b031614156102945761028d61045f565b60606103a98383604051806060016040528060278152602001610732602791396104e8565b9392505050565b3b151590565b6103be61045f565b6001600160a01b0316336001600160a01b0316141561040e5760405162461bcd60e51b81526004018080602001828103825260428152602001806107b56042913960600191505060405180910390fd5b6101a96101a9565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e80801561045a573d6000f35b3d6000fd5b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b61048d816105eb565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b60606104f3846103b0565b61052e5760405162461bcd60e51b815260040180806020018281038252602681526020018061078f6026913960400191505060405180910390fd5b60006060856001600160a01b0316856040518082805190602001908083835b6020831061056c5780518252601f19909201916020918201910161054d565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146105cc576040519150601f19603f3d011682016040523d82523d6000602084013e6105d1565b606091505b50915091506105e1828286610653565b9695505050505050565b6105f4816103b0565b61062f5760405162461bcd60e51b81526004018080602001828103825260368152602001806107596036913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b606083156106625750816103a9565b8251156106725782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156106bc5781810151838201526020016106a4565b50505050905090810190601f1680156106e95780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe5472616e73706172656e745570677261646561626c6550726f78793a206e65772061646d696e20697320746865207a65726f2061646472657373416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65645570677261646561626c6550726f78793a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e74726163745472616e73706172656e745570677261646561626c6550726f78793a2061646d696e2063616e6e6f742066616c6c6261636b20746f2070726f787920746172676574a2646970667358221220175110956fa0a7ff1615f55e1422acff6edcec0099d7ea0bae101f4f6228c8bd64736f6c634300060b0033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65645570677261646561626c6550726f78793a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374608060405234801561001057600080fd5b50600080546001600160a01b0319163317905561062c806100326000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806313af40351461005c57806337ca2617146100845780633b99adf7146101355780638da5cb5b14610258578063babcc5391461027c575b600080fd5b6100826004803603602081101561007257600080fd5b50356001600160a01b03166102b6565b005b6100826004803603604081101561009a57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156100c457600080fd5b8201836020820111156100d657600080fd5b803590602001918460208302840111600160201b831117156100f757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610356945050505050565b6100826004803603604081101561014b57600080fd5b810190602081018135600160201b81111561016557600080fd5b82018360208201111561017757600080fd5b803590602001918460208302840111600160201b8311171561019857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156101e757600080fd5b8201836020820111156101f957600080fd5b803590602001918460208302840111600160201b8311171561021a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506104d1945050505050565b6102606105d2565b604080516001600160a01b039092168252519081900360200190f35b6102a26004803603602081101561029257600080fd5b50356001600160a01b03166105e1565b604080519115158252519081900360200190f35b6000546001600160a01b03163314610302576040805162461bcd60e51b815260206004820152600a60248201526927a7262cafa7aba722a960b11b604482015290519081900360640190fd5b600080546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f4ffd725fc4a22075e9ec71c59edf9c38cdeb588a91b24fc5b61388c5be41282b9181900360200190a150565b6000546001600160a01b031633146103a2576040805162461bcd60e51b815260206004820152600a60248201526927a7262cafa7aba722a960b11b604482015290519081900360640190fd5b60005b815181101561043d578181815181106103ba57fe5b60200260200101516001600160a01b03166347466f98846040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050600060405180830381600087803b15801561041957600080fd5b505af115801561042d573d6000803e3d6000fd5b5050600190920191506103a59050565b507fd86884520a0656812619831f2b97aa7c77f8064735a7c312f358b9943d30eb78828260405180836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156104b95781810151838201526020016104a1565b50505050905001935050505060405180910390a15050565b6000546001600160a01b0316331461051d576040805162461bcd60e51b815260206004820152600a60248201526927a7262cafa7aba722a960b11b604482015290519081900360640190fd5b8051825114610563576040805162461bcd60e51b815260206004820152600d60248201526c1253959053125117d253941555609a1b604482015290519081900360640190fd5b60005b82518110156105cd5781818151811061057b57fe5b60200260200101516001600085848151811061059357fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610566565b505050565b6000546001600160a01b031681565b60016020526000908152604090205460ff168156fea2646970667358221220915b69a94e7cea52741f789a179906fe738f312cf8e3e79db5c2ccb8581063b564736f6c634300060b00334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220fe0ab0f7f3dffe70a813a9ffde556aaf533bdcdd3cf7cb2fa7dfe059aabdbd9864736f6c634300060b0033608060405234801561001057600080fd5b506112de806100206000396000f3fe6080604052600436106100c85760003560e01c8063945e11471161007a578063945e1147146101f75780639e5d4c4914610221578063ab5d894314610336578063c29372de1461034b578063cee3d7281461037e578063d9dd67ab146103b9578063e45b7ce6146103e3578063f2fde38b1461041e576100c8565b806302bbfad1146100cd5780633dbcc8d114610114578063413b35bd14610129578063715018a6146101705780637ee94329146101875780638129fc1c146101cd5780638da5cb5b146101e2575b600080fd5b610102600480360360608110156100e357600080fd5b5060ff813516906001600160a01b036020820135169060400135610451565b60408051918252519081900360200190f35b34801561012057600080fd5b506101026104bf565b34801561013557600080fd5b5061015c6004803603602081101561014c57600080fd5b50356001600160a01b03166104c5565b604080519115158252519081900360200190f35b34801561017c57600080fd5b506101856104e6565b005b34801561019357600080fd5b506101b1600480360360208110156101aa57600080fd5b5035610580565b604080516001600160a01b039092168252519081900360200190f35b3480156101d957600080fd5b506101856105a7565b3480156101ee57600080fd5b506101b1610651565b34801561020357600080fd5b506101b16004803603602081101561021a57600080fd5b5035610660565b34801561022d57600080fd5b506102b36004803603606081101561024457600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561027457600080fd5b82018360208201111561028657600080fd5b803590602001918460018302840111640100000000831117156102a857600080fd5b50909250905061066d565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102fa5781810151838201526020016102e2565b50505050905090810190601f1680156103275780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561034257600080fd5b506101b1610841565b34801561035757600080fd5b5061015c6004803603602081101561036e57600080fd5b50356001600160a01b0316610850565b34801561038a57600080fd5b50610185600480360360408110156103a157600080fd5b506001600160a01b0381351690602001351515610871565b3480156103c557600080fd5b50610102600480360360208110156103dc57600080fd5b5035610aea565b3480156103ef57600080fd5b506101856004803603604081101561040657600080fd5b506001600160a01b0381351690602001351515610b08565b34801561042a57600080fd5b506101856004803603602081101561044157600080fd5b50356001600160a01b0316610d7f565b3360009081526065602052604081206001015460ff166104a9576040805162461bcd60e51b815260206004820152600e60248201526d09c9ea8be8ca49e9abe929c849eb60931b604482015290519081900360640190fd5b6104b7848443423a87610e70565b949350505050565b606a5490565b6001600160a01b031660009081526066602052604090206001015460ff1690565b6104ee610f33565b6001600160a01b03166104ff610651565b6001600160a01b031614610548576040805162461bcd60e51b81526020600482018190526024820152600080516020611269833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b031690600080516020611289833981519152908390a3603380546001600160a01b0319169055565b6067818154811061058d57fe5b6000918252602090912001546001600160a01b0316905081565b600054610100900460ff16806105c057506105c0610f37565b806105ce575060005460ff16155b6106095760405162461bcd60e51b815260040180806020018281038252602e81526020018061123b602e913960400191505060405180910390fd5b600054610100900460ff16158015610634576000805460ff1961ff0019909116610100171660011790555b61063c610f48565b801561064e576000805461ff00191690555b50565b6033546001600160a01b031690565b6068818154811061058d57fe5b3360009081526066602052604081206001015460609060ff166106c9576040805162461bcd60e51b815260206004820152600f60248201526e09c9ea8be8ca49e9abe9eaaa8849eb608b1b604482015290519081900360640190fd5b8215610724576106e1866001600160a01b0316610fe5565b610724576040805162461bcd60e51b815260206004820152600f60248201526e1393d7d0d3d11157d05517d11154d5608a1b604482015290519081900360640190fd5b606980546001600160a01b0319811633179091556040516001600160a01b0391821691881690879087908790808383808284376040519201945060009350909150508083038185875af1925050503d806000811461079e576040519150601f19603f3d011682016040523d82523d6000602084013e6107a3565b606091505b50606980546001600160a01b0319166001600160a01b0385811691909117909155604080518a81526020810182815291810189905293965091945089169133917f2d9d115ef3e4a606d698913b1eae831a3cdfe20d9a83d48007b0526749c3d466918a918a918a9160608201848480828437600083820152604051601f909101601f1916909201829003965090945050505050a35094509492505050565b6069546001600160a01b031681565b6001600160a01b031660009081526065602052604090206001015460ff1690565b610879610f33565b6001600160a01b031661088a610651565b6001600160a01b0316146108d3576040805162461bcd60e51b81526020600482018190526024820152600080516020611269833981519152604482015290519081900360640190fd5b6001600160a01b0382166000818152606660209081526040918290206001810154835186151581529351919460ff9091169390927f49477e7356dbcb654ab85d7534b50126772d938130d1350e23e2540370c8dffa92918290030190a280801561093a5750825b8061094c57508015801561094c575082155b15610958575050610ae6565b82156109e757604080518082018252606880548252600160208084018281526001600160a01b038a16600081815260669093529582209451855551938201805460ff1916941515949094179093558154908101825591527fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c220977530180546001600160a01b0319169091179055610ae3565b6068805460001981019081106109f957fe5b6000918252602090912001548254606880546001600160a01b03909316929091908110610a2257fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508160000154606660006068856000015481548110610a6a57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020556068805480610a9a57fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03861682526066905260408120908155600101805460ff191690555b50505b5050565b606a8181548110610af757fe5b600091825260209091200154905081565b610b10610f33565b6001600160a01b0316610b21610651565b6001600160a01b031614610b6a576040805162461bcd60e51b81526020600482018190526024820152600080516020611269833981519152604482015290519081900360640190fd5b6001600160a01b0382166000818152606560209081526040918290206001810154835186151581529351919460ff9091169390927f6675ce8882cb71637de5903a193d218cc0544be9c0650cb83e0955f6aa2bf52192918290030190a2808015610bd15750825b80610be3575080158015610be3575082155b15610bef575050610ae6565b8215610c7e57604080518082018252606780548252600160208084018281526001600160a01b038a16600081815260659093529582209451855551938201805460ff1916941515949094179093558154908101825591527f9787eeb91fe3101235e4a76063c7023ecb40f923f97916639c598592fa30d6ae0180546001600160a01b0319169091179055610ae3565b606780546000198101908110610c9057fe5b6000918252602090912001548254606780546001600160a01b03909316929091908110610cb957fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508160000154606560006067856000015481548110610d0157fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020556067805480610d3157fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03861682526065905260408120908155600101805460ff1916905550505050565b610d87610f33565b6001600160a01b0316610d98610651565b6001600160a01b031614610de1576040805162461bcd60e51b81526020600482018190526024820152600080516020611269833981519152604482015290519081900360640190fd5b6001600160a01b038116610e265760405162461bcd60e51b81526004018080602001828103825260268152602001806112156026913960400191505060405180910390fd5b6033546040516001600160a01b0380841692169060008051602061128983398151915290600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b606a5460009081610e8689898989868a8a610feb565b905060008215610eae57606a6001840381548110610ea057fe5b906000526020600020015490505b606a610eba8284611061565b8154600181018355600092835260209283902001556040805133815260ff8d16928101929092526001600160a01b038b16828201526060820187905251829185917f23be8e12e420b5da9fb98d8102572f640fb3c11a0085060472dfc0ed194b3cf79181900360800190a3509098975050505050505050565b3390565b6000610f4230610fe5565b15905090565b600054610100900460ff1680610f615750610f61610f37565b80610f6f575060005460ff16155b610faa5760405162461bcd60e51b815260040180806020018281038252602e81526020018061123b602e913960400191505060405180910390fd5b600054610100900460ff16158015610fd5576000805460ff1961ff0019909116610100171660011790555b610fdd61108d565b61063c61112d565b3b151590565b6040805160f89890981b6001600160f81b0319166020808a019190915260609790971b6bffffffffffffffffffffffff19166021890152603588019590955260558701939093526075860191909152609585015260b5808501919091528151808503909101815260d59093019052815191012090565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600054610100900460ff16806110a657506110a6610f37565b806110b4575060005460ff16155b6110ef5760405162461bcd60e51b815260040180806020018281038252602e81526020018061123b602e913960400191505060405180910390fd5b600054610100900460ff1615801561063c576000805460ff1961ff001990911661010017166001179055801561064e576000805461ff001916905550565b600054610100900460ff16806111465750611146610f37565b80611154575060005460ff16155b61118f5760405162461bcd60e51b815260040180806020018281038252602e81526020018061123b602e913960400191505060405180910390fd5b600054610100900460ff161580156111ba576000805460ff1961ff0019909116610100171660011790555b60006111c4610f33565b603380546001600160a01b0319166001600160a01b03831690811790915560405191925090600090600080516020611289833981519152908290a350801561064e576000805461ff00191690555056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220a38aa991fe7cf08f2acb1ab305d2972c008682f02b4d210d0832d8dc66d021ac64736f6c634300060b0033608060405234801561001057600080fd5b506000805460ff19166001179055611e208061002d6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80636f791d29116100b8578063c0c53b8b1161007c578063c0c53b8b14610643578063cb23bcb51461067b578063d9b141ff14610683578063d9dd67ab1461068b578063dc1b7b1f1461013c578063e367a2c1146106a857610137565b80636f791d29146105065780637fa3a40e1461050e5780638a2df18d1461051657806395fcea7814610633578063b71939b11461063b57610137565b80633dbcc8d1116100ff5780633dbcc8d11461036f57806344c7cc30146103775780634d480faa146104855780635c1bba38146104a85780636d46e987146104cc57610137565b806306cc91b21461013c5780630c4a1e59146101c35780631a734229146102195780631f95663214610327578063342025fa14610355575b600080fd5b6101aa6004803603604081101561015257600080fd5b810190602081018135600160201b81111561016c57600080fd5b82018360208201111561017e57600080fd5b803590602001918460018302840111600160201b8311171561019f57600080fd5b9193509150356106b0565b6040805192835260208301919091528051918290030190f35b61021760048036036101208110156101da57600080fd5b5080359060ff60208201351690604081019060808101359060a0810135906001600160a01b0360c0820135169060e08101359061010001356106cb565b005b6102176004803603608081101561022f57600080fd5b810190602081018135600160201b81111561024957600080fd5b82018360208201111561025b57600080fd5b803590602001918460018302840111600160201b8311171561027c57600080fd5b919390929091602081019035600160201b81111561029957600080fd5b8201836020820111156102ab57600080fd5b803590602001918460208302840111600160201b831117156102cc57600080fd5b919390929091602081019035600160201b8111156102e957600080fd5b8201836020820111156102fb57600080fd5b803590602001918460208302840111600160201b8311171561031c57600080fd5b919350915035610a37565b6102176004803603604081101561033d57600080fd5b506001600160a01b0381351690602001351515610b90565b61035d610c41565b60408051918252519081900360200190f35b61035d610c47565b6102176004803603608081101561038d57600080fd5b810190602081018135600160201b8111156103a757600080fd5b8201836020820111156103b957600080fd5b803590602001918460018302840111600160201b831117156103da57600080fd5b919390929091602081019035600160201b8111156103f757600080fd5b82018360208201111561040957600080fd5b803590602001918460208302840111600160201b8311171561042a57600080fd5b919390929091602081019035600160201b81111561044757600080fd5b82018360208201111561045957600080fd5b803590602001918460208302840111600160201b8311171561047a57600080fd5b919350915035610c4d565b6102176004803603604081101561049b57600080fd5b5080359060200135610d3a565b6104b0610dd0565b604080516001600160a01b039092168252519081900360200190f35b6104f2600480360360208110156104e257600080fd5b50356001600160a01b0316610ddf565b604080519115158252519081900360200190f35b6104f2610df4565b61035d610dfd565b610217600480360360a081101561052c57600080fd5b810190602081018135600160201b81111561054657600080fd5b82018360208201111561055857600080fd5b803590602001918460018302840111600160201b8311171561057957600080fd5b919390929091602081019035600160201b81111561059657600080fd5b8201836020820111156105a857600080fd5b803590602001918460208302840111600160201b831117156105c957600080fd5b919390929091602081019035600160201b8111156105e657600080fd5b8201836020820111156105f857600080fd5b803590602001918460208302840111600160201b8311171561061957600080fd5b9193509150803590602001356001600160a01b0316610e03565b610217610f9d565b6104b0610ffa565b6102176004803603606081101561065957600080fd5b506001600160a01b038135811691602081013582169160409091013516611009565b6104b06110a0565b61035d6110af565b61035d600480360360208110156106a157600080fd5b50356110b5565b61035d6110d3565b6000806106be8585856110d9565b915091505b935093915050565b6003548811610715576040805162461bcd60e51b815260206004820152601160248201527044454c415945445f4241434b574152445360781b604482015290519081900360640190fd5b600061072b8885893560208b01358a8a89611226565b6008549091504388359091011061077c576040805162461bcd60e51b815260206004820152601060248201526f4d41585f44454c41595f424c4f434b5360801b604482015290519081900360640190fd5b600954426020890135909101106107cb576040805162461bcd60e51b815260206004820152600e60248201526d4d41585f44454c41595f54494d4560901b604482015290519081900360640190fd5b600060018a111561085557600480546040805163d9dd67ab60e01b81526001198e0193810193909352516001600160a01b039091169163d9dd67ab916024808301926020929190829003018186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d602081101561085057600080fd5b505190505b61085f818361129c565b600480546040805163d9dd67ab60e01b81526000198f0193810193909352516001600160a01b039091169163d9dd67ab916024808301926020929190829003018186803b1580156108af57600080fd5b505afa1580156108c3573d6000803e3d6000fd5b505050506040513d60208110156108d957600080fd5b505114610923576040805162461bcd60e51b81526020600482015260136024820152722222a620aca2a22fa0a1a1aaa6aaa620aa27a960691b604482015290519081900360640190fd5b5050600254600154600090156109535760018054600019810190811061094557fe5b906000526020600020015490505b60008061096483858e43428a6112c8565b9150915060018290806001815401808255809150506001900390600052602060002001600090919091909150558060028190555082847f85b6a949bf20bfd6bc6e20f98fb490c7944ab61dcfa5a30b5dae543412c9a8a0838f60405180604001604052808881526020018b81525060018080549050036040518085815260200184815260200183600260200280838360005b83811015610a0e5781810151838201526020016109f6565b5050505090500182815260200194505050505060405180910390a3505050505050505050505050565b600060025490506000610a8689898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a9150899050888861152c565b905080827f3bf85aebd2a1dc6c510ffc4795a3785e786b5817ab30144f88501d4c6456c986600254868d8d8d8d8d8d600180805490500333604051808b81526020018a8152602001806020018060200180602001868152602001856001600160a01b03166001600160a01b0316815260200184810384528c8c82818152602001925080828437600083820152601f01601f191690910185810384528a8152602090810191508b908b0280828437600083820152601f01601f19169091018581038352888152602090810191508990890280828437600083820152604051601f909101601f19169092018290039f50909d5050505050505050505050505050a3505050505050505050565b6006546001600160a01b03163314610bdd576040805162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b604482015290519081900360640190fd5b6001600160a01b038216600081815260076020908152604091829020805460ff191685151590811790915582519384529083015280517fce86e570206e55533301cb66529b33afbd75e991c575b85adeaca10146be8cb49281900390910190a15050565b60095481565b60025481565b333214610c8f576040805162461bcd60e51b815260206004820152600b60248201526a6f726967696e206f6e6c7960a81b604482015290519081900360640190fd5b600060025490506000610cde89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a9150899050888861152c565b60025460015460408051928352602083018790526000199091018282015251919250829184917f10e0571aafaf282151fd5b0215b5495521c549509cb0de3a3f8310bd2e344682919081900360600190a3505050505050505050565b6006546001600160a01b03163314610d87576040805162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b604482015290519081900360640190fd5b60088290556009819055604080518381526020810183905281517f3bcd3c6d4304309e4b36d94f90517baf304582bb1ac828906808577e067e6b6e929181900390910190a15050565b6005546001600160a01b031690565b60076020526000908152604090205460ff1681565b60005460ff1690565b60035481565b333214610e45576040805162461bcd60e51b815260206004820152600b60248201526a6f726967696e206f6e6c7960a81b604482015290519081900360640190fd5b60005a600254604080516020601f8d018190048102820181019092528b81529293503692600091610e9891908e908e90819084018382808284376000920191909152508e92508d91508c90508b8b61152c565b60025460015460408051928352602083018a90526000199091018282015251919250829184917f10e0571aafaf282151fd5b0215b5495521c549509cb0de3a3f8310bd2e344682919081900360600190a36001600160a01b03851615610f8f57846001600160a01b031663e3db8a49335a8703866040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b031681526020018381526020018281526020019350505050602060405180830381600087803b158015610f6257600080fd5b505af1158015610f76573d6000803e3d6000fd5b505050506040513d6020811015610f8c57600080fd5b50505b505050505050505050505050565b6000610fa7611aaa565b9050336001600160a01b03821614610ff7576040805162461bcd60e51b815260206004820152600e60248201526d2727aa2fa32927a6afa0a226a4a760911b604482015290519081900360640190fd5b50565b6004546001600160a01b031681565b6004546001600160a01b031615611056576040805162461bcd60e51b815260206004820152600c60248201526b1053149150511657d253925560a21b604482015290519081900360640190fd5b600480546001600160a01b039485166001600160a01b0319918216179091559183166000908152600760205260409020805460ff1916600117905560068054919093169116179055565b6006546001600160a01b031681565b60015490565b600181815481106110c257fe5b600091825260209091200154905081565b60085481565b600080826110ec575060009050806106c3565b60008061112e87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611acf915050565b9092509050600081156111665761116088888560018087038154811061115057fe5b9060005260206000200154611b43565b90935090505b60006001838154811061117557fe5b9060005260206000200154905060006111908a8a8785611b43565b90955090508288116111d7576040805162461bcd60e51b815260206004820152600b60248201526a10905510d217d4d510549560aa1b604482015290519081900360640190fd5b80881115611218576040805162461bcd60e51b815260206004820152600960248201526810905510d217d1539160ba1b604482015290519081900360640190fd5b999098509650505050505050565b6040805160f89890981b6001600160f81b0319166020808a019190915260609790971b6bffffffffffffffffffffffff19166021890152603588019590955260558701939093526075860191909152609585015260b5808501919091528151808503909101815260d59093019052815191012090565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6004805460408051633dbcc8d160e01b8152905160009384936001600160a01b031692633dbcc8d19281830192602092829003018186803b15801561130c57600080fd5b505afa158015611320573d6000803e3d6000fd5b505050506040513d602081101561133657600080fd5b505186111561137e576040805162461bcd60e51b815260206004820152600f60248201526e2222a620aca2a22faa27a7afa320a960891b604482015290519081900360640190fd5b600480546040805163d9dd67ab60e01b81526000198a0193810193909352516001600160a01b039091169163d9dd67ab916024808301926020929190829003018186803b1580156113ce57600080fd5b505afa1580156113e2573d6000803e3d6000fd5b505050506040513d60208110156113f857600080fd5b5051831461143b576040805162461bcd60e51b815260206004820152600b60248201526a44454c415945445f41434360a81b604482015290519081900360640190fd5b50506003805460408051702232b630bcb2b21036b2b9b9b0b3b2b99d60791b602080830191909152603182019a909a5260518101899052607181018390526091810188905260b1808201959095528151808203909501855260d1810182528451948a0194909420600060f186015261010585019690965261012580850195909552805180850390950185526101458401815284519489019490942060605160802061016585019690965290860390960161018583018190526101a58301969096526101c580830194909452825180830390940184526101e59091019091528151919094012092559091600190910190565b3360009081526007602052604081205460ff16611581576040805162461bcd60e51b815260206004820152600e60248201526d27a7262cafa9a2a8aaa2a721a2a960911b604482015290519081900360640190fd5b600154156115a95760018054600019810190811061159b57fe5b906000526020600020015490505b60025481600060208a01815b6005810188106119435760008989836001018181106115d057fe5b9050602002013590504360085482011015611622576040805162461bcd60e51b815260206004820152600d60248201526c109313d0d2d7d513d3d7d3d311609a1b604482015290519081900360640190fd5b43811115611667576040805162461bcd60e51b815260206004820152600d60248201526c424c4f434b5f544f4f5f4e455760981b604482015290519081900360640190fd5b50600089898360020181811061167957fe5b90506020020135905042600954820110156116ca576040805162461bcd60e51b815260206004820152600c60248201526b1512535157d513d3d7d3d31160a21b604482015290519081900360640190fd5b4281111561170e576040805162461bcd60e51b815260206004820152600c60248201526b54494d455f544f4f5f4e455760a01b604482015290519081900360640190fd5b506000338a8a8460010181811061172157fe5b905060200201358b8b8560020181811061173757fe5b9050602002013560405160200180846001600160a01b03166001600160a01b031660601b8152601401838152602001828152602001935050505060405160208183030381529060405280519060200120905060008a8a8481811061179757fe5b9050602002013590506117b0848e8e8885878d8d611d03565b9098509096509401939250600090508989600384018181106117ce57fe5b905060200201359050600354811015611822576040805162461bcd60e51b815260206004820152601160248201527044454c415945445f4241434b574152445360781b604482015290519081900360640190fd5b600181101561186c576040805162461bcd60e51b8152602060048201526011602482015270135554d517d111531056515117d2539255607a1b604482015290519081900360640190fd5b6001600354101580611890575089898381811061188557fe5b905060200201356000145b6118db576040805162461bcd60e51b8152602060048201526017602482015276135554d517d111531056515117d253925517d4d5105495604a1b604482015290519081900360640190fd5b60035481111561193a576119358587838d8d876001018181106118fa57fe5b905060200201358e8e8860020181811061191057fe5b905060200201358f8f8960040181811061192657fe5b9050602002013560001b6112c8565b965094505b506005016115b5565b5060208b018082101561198f576040805162461bcd60e51b815260206004820152600f60248201526e4f46465345545f4f564552464c4f5760881b604482015290519081900360640190fd5b8b5181018211156119de576040805162461bcd60e51b81526020600482015260146024820152732a2920a729a0a1aa24a7a729afa7ab22a9292aa760611b604482015290519081900360640190fd5b6002548511611a22576040805162461bcd60e51b815260206004820152600b60248201526a08a9aa0a8b2be8482a886960ab1b604482015290519081900360640190fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018490556002859055868414611a9b576040805162461bcd60e51b815260206004820152600960248201526841465445525f41434360b81b604482015290519081900360640190fd5b50505050509695505050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b60008082845110158015611ae7575060208385510310155b611b24576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301611b38858563ffffffff611d9116565b915091509250929050565b6000806000806000806000611b8f8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d9250611acf915050565b809550819a505050611bd88b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d9250611acf915050565b809450819a505050611c218b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d9250611acf915050565b809350819a505050611c6a8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d9250611acf915050565b604080516020808201989098528082018790526060810186905260808082018490528251808303909101815260a09091019091528051960195909520909950600184019550939050878414611cf2576040805162461bcd60e51b815260206004820152600960248201526842415443485f41434360b81b604482015290519081900360640190fd5b509699929850919650505050505050565b92840192808289875b87811015611d825760008b8b83818110611d2257fe5b60209081029290920135808620604080518086019a909a5289810189905260608a018d90526080808b01929092528051808b03909201825260a0909901909852875197909201969096209550600194850194930192919091019050611d0c565b50985098509895505050505050565b60008160200183511015611de1576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b5001602001519056fea26469706673582212201e3ad7c74a67aed9eb7b1284d754dbfbaf58515630d9d28ea9e94832533ffdbf64736f6c634300060b0033608060405234801561001057600080fd5b506000805460ff60a01b1916600160a01b179055611e82806100336000396000f3fe60806040526004361061011f5760003560e01c80636f791d29116100a05780639fe12da5116100645780639fe12da514610681578063b4d9ec4414610696578063b75436bb146106ab578063e78cea9214610726578063fdebb9b31461073b5761011f565b80636f791d2914610561578063794cfd511461058a5780637ae8d8b31461059f5780638a631aa6146105b457806393e59dc1146106505761011f565b8063485cc955116100e7578063485cc955146102c15780635075788b146102fc5780635e9167581461039f578063679b6ded1461042957806367ef3ab8146104d25761011f565b80630f4d14e9146101245780631b871c8d146101535780631fe927cf146101fc5780632b40609a1461027757806347466f981461028e575b600080fd5b6101416004803603602081101561013a57600080fd5b5035610750565b60408051918252519081900360200190f35b610141600480360361010081101561016a57600080fd5b6001600160a01b038235811692602081013592604082013592606083013581169260808101359091169160a08201359160c081013591810190610100810160e0820135600160201b8111156101be57600080fd5b8201836020820111156101d057600080fd5b803590602001918460018302840111600160201b831117156101f157600080fd5b50909250905061093d565b34801561020857600080fd5b506101416004803603602081101561021f57600080fd5b810190602081018135600160201b81111561023957600080fd5b82018360208201111561024b57600080fd5b803590602001918460018302840111600160201b8311171561026c57600080fd5b509092509050610b1d565b34801561028357600080fd5b5061028c610c8a565b005b34801561029a57600080fd5b5061028c600480360360208110156102b157600080fd5b50356001600160a01b0316610e52565b3480156102cd57600080fd5b5061028c600480360360408110156102e457600080fd5b506001600160a01b0381358116916020013516610ef5565b34801561030857600080fd5b50610141600480360360c081101561031f57600080fd5b8135916020810135916040820135916001600160a01b03606082013516916080820135919081019060c0810160a0820135600160201b81111561036157600080fd5b82018360208201111561037357600080fd5b803590602001918460018302840111600160201b8311171561039457600080fd5b509092509050610f70565b610141600480360360808110156103b557600080fd5b8135916020810135916001600160a01b036040830135169190810190608081016060820135600160201b8111156103eb57600080fd5b8201836020820111156103fd57600080fd5b803590602001918460018302840111600160201b8311171561041e57600080fd5b5090925090506110c5565b610141600480360361010081101561044057600080fd5b6001600160a01b038235811692602081013592604082013592606083013581169260808101359091169160a08201359160c081013591810190610100810160e0820135600160201b81111561049457600080fd5b8201836020820111156104a657600080fd5b803590602001918460018302840111600160201b831117156104c757600080fd5b509092509050611210565b610141600480360360a08110156104e857600080fd5b8135916020810135916040820135916001600160a01b036060820135169181019060a081016080820135600160201b81111561052357600080fd5b82018360208201111561053557600080fd5b803590602001918460018302840111600160201b8311171561055657600080fd5b509092509050611349565b34801561056d57600080fd5b5061057661149d565b604080519115158252519081900360200190f35b34801561059657600080fd5b5061028c6114ad565b3480156105ab57600080fd5b5061028c61166f565b3480156105c057600080fd5b50610141600480360360a08110156105d757600080fd5b8135916020810135916001600160a01b036040830135169160608101359181019060a081016080820135600160201b81111561061257600080fd5b82018360208201111561062457600080fd5b803590602001918460018302840111600160201b8311171561064557600080fd5b50909250905061183a565b34801561065c57600080fd5b5061066561197b565b604080516001600160a01b039092168252519081900360200190f35b34801561068d57600080fd5b5061028c61198a565b3480156106a257600080fd5b50610576611b49565b3480156106b757600080fd5b50610141600480360360208110156106ce57600080fd5b810190602081018135600160201b8111156106e857600080fd5b8201836020820111156106fa57600080fd5b803590602001918460018302840111600160201b8311171561071b57600080fd5b509092509050611b59565b34801561073257600080fd5b50610665611cb9565b34801561074757600080fd5b50610576611cc8565b600080546001600160a01b03161561081c576000546040805163babcc53960e01b815233600482015290516001600160a01b039092169163babcc53991602480820192602092909190829003018186803b1580156107ad57600080fd5b505afa1580156107c1573d6000803e3d6000fd5b505050506040513d60208110156107d757600080fd5b505161081c576040805162461bcd60e51b815260206004820152600f60248201526e1393d517d5d2125511531254d51151608a1b604482015290519081900360640190fd5b600154600160a01b900460ff1615610876576040805162461bcd60e51b815260206004820152601860248201527710d49150551157d4915514965050931154d7d4105554d15160421b604482015290519081900360640190fd5b60015433908190600160a81b900460ff16156108c25761089582611cd8565b1580156108a157503233145b156108b6576108af82611cde565b91506108c2565b6108bf81611ced565b90505b604080516001600160a01b0383166020820181905260008284018190523460608401526080830188905260a0830182905260c083019190915260e0820181905261010082018190526101208083019190915282518083039091018152610140909101909152610935906009908490611cfb565b949350505050565b600080546001600160a01b031615610a09576000546040805163babcc53960e01b815233600482015290516001600160a01b039092169163babcc53991602480820192602092909190829003018186803b15801561099a57600080fd5b505afa1580156109ae573d6000803e3d6000fd5b505050506040513d60208110156109c457600080fd5b5051610a09576040805162461bcd60e51b815260206004820152600f60248201526e1393d517d5d2125511531254d51151608a1b604482015290519081900360640190fd5b600154600160a01b900460ff1615610a63576040805162461bcd60e51b815260206004820152601860248201527710d49150551157d4915514965050931154d7d4105554d15160421b604482015290519081900360640190fd5b610b0f6009338c60601b60601c6001600160a01b03168c348d8d60601b60601c6001600160a01b03168d60601b60601c6001600160a01b03168d8d8d8d90508e8e604051602001808c81526020018b81526020018a8152602001898152602001888152602001878152602001868152602001858152602001848152602001838380828437808301925050509b505050505050505050505050604051602081830303815290604052611cfb565b9a9950505050505050505050565b600080546001600160a01b031615610be9576000546040805163babcc53960e01b815233600482015290516001600160a01b039092169163babcc53991602480820192602092909190829003018186803b158015610b7a57600080fd5b505afa158015610b8e573d6000803e3d6000fd5b505050506040513d6020811015610ba457600080fd5b5051610be9576040805162461bcd60e51b815260206004820152600f60248201526e1393d517d5d2125511531254d51151608a1b604482015290519081900360640190fd5b333214610c2b576040805162461bcd60e51b815260206004820152600b60248201526a6f726967696e206f6e6c7960a81b604482015290519081900360640190fd5b6000610c5560033386866040518083838082843760405192018290039091209350611db492505050565b60405190915081907fab532385be8f1005a4b6ba8fa20a2245facb346134ac739fe9a5198dc1580b9c90600090a29392505050565b60015460408051638da5cb5b60e01b815290516000926001600160a01b031691638da5cb5b916004808301926020929190829003018186803b158015610ccf57600080fd5b505afa158015610ce3573d6000803e3d6000fd5b505050506040513d6020811015610cf957600080fd5b505160408051638da5cb5b60e01b815290519192506000916001600160a01b03841691638da5cb5b916004808301926020929190829003018186803b158015610d4157600080fd5b505afa158015610d55573d6000803e3d6000fd5b505050506040513d6020811015610d6b57600080fd5b50519050336001600160a01b03821614610db9576040805162461bcd60e51b815260206004820152600a60248201526904e4f545f524f4c4c55560b41b604482015290519081900360640190fd5b600154600160a01b900460ff1615610e09576040805162461bcd60e51b815260206004820152600e60248201526d1053149150511657d4105554d15160921b604482015290519081900360640190fd5b6001805460ff60a01b1916600160a01b17815560408051918252517f9077d36bc00859b5c3f320310707208543dd35092cb0a0fe117d0c6a558b148b9181900360200190a15050565b6000546001600160a01b03163314610ea1576040805162461bcd60e51b815260206004820152600d60248201526c1393d517d19493d357d31254d5609a1b604482015290519081900360640190fd5b600080546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f37389c47920d5cc3229678a0205d0455002c07541a4139ebdce91ac2274657779181900360200190a150565b6001546001600160a01b031615610f42576040805162461bcd60e51b815260206004820152600c60248201526b1053149150511657d253925560a21b604482015290519081900360640190fd5b600180546001600160a01b039384166001600160a01b03199182161790915560008054929093169116179055565b600080546001600160a01b03161561103c576000546040805163babcc53960e01b815233600482015290516001600160a01b039092169163babcc53991602480820192602092909190829003018186803b158015610fcd57600080fd5b505afa158015610fe1573d6000803e3d6000fd5b505050506040513d6020811015610ff757600080fd5b505161103c576040805162461bcd60e51b815260206004820152600f60248201526e1393d517d5d2125511531254d51151608a1b604482015290519081900360640190fd5b6110b960033360008b8b8b8b60601b60601c6001600160a01b03168b8b8b604051602001808960ff1660ff1660f81b81526001018881526020018781526020018681526020018581526020018481526020018383808284378083019250505098505050505050505050604051602081830303815290604052611cfb565b98975050505050505050565b600080546001600160a01b031615611191576000546040805163babcc53960e01b815233600482015290516001600160a01b039092169163babcc53991602480820192602092909190829003018186803b15801561112257600080fd5b505afa158015611136573d6000803e3d6000fd5b505050506040513d602081101561114c57600080fd5b5051611191576040805162461bcd60e51b815260206004820152600f60248201526e1393d517d5d2125511531254d51151608a1b604482015290519081900360640190fd5b611206600733600189898960601b60601c6001600160a01b0316348a8a604051602001808860ff1660ff1660f81b815260010187815260200186815260200185815260200184815260200183838082843780830192505050975050505050505050604051602081830303815290604052611cfb565b9695505050505050565b600080546001600160a01b0316156112dc576000546040805163babcc53960e01b815233600482015290516001600160a01b039092169163babcc53991602480820192602092909190829003018186803b15801561126d57600080fd5b505afa158015611281573d6000803e3d6000fd5b505050506040513d602081101561129757600080fd5b50516112dc576040805162461bcd60e51b815260206004820152600f60248201526e1393d517d5d2125511531254d51151608a1b604482015290519081900360640190fd5b600154600160a81b900460ff1680156112f957506112f987611cd8565b1561130a5761130787611ced565b96505b600154600160a81b900460ff168015611327575061132786611cd8565b156113385761133586611ced565b95505b610b0f8a8a8a8a8a8a8a8a8a61093d565b600080546001600160a01b031615611415576000546040805163babcc53960e01b815233600482015290516001600160a01b039092169163babcc53991602480820192602092909190829003018186803b1580156113a657600080fd5b505afa1580156113ba573d6000803e3d6000fd5b505050506040513d60208110156113d057600080fd5b5051611415576040805162461bcd60e51b815260206004820152600f60248201526e1393d517d5d2125511531254d51151608a1b604482015290519081900360640190fd5b61149260073360008a8a8a8a60601b60601c6001600160a01b0316348b8b604051602001808960ff1660ff1660f81b81526001018881526020018781526020018681526020018581526020018481526020018383808284378083019250505098505050505050505050604051602081830303815290604052611cfb565b979650505050505050565b600054600160a01b900460ff1690565b60015460408051638da5cb5b60e01b815290516000926001600160a01b031691638da5cb5b916004808301926020929190829003018186803b1580156114f257600080fd5b505afa158015611506573d6000803e3d6000fd5b505050506040513d602081101561151c57600080fd5b505160408051638da5cb5b60e01b815290519192506000916001600160a01b03841691638da5cb5b916004808301926020929190829003018186803b15801561156457600080fd5b505afa158015611578573d6000803e3d6000fd5b505050506040513d602081101561158e57600080fd5b50519050336001600160a01b038216146115dc576040805162461bcd60e51b815260206004820152600a60248201526904e4f545f524f4c4c55560b41b604482015290519081900360640190fd5b600154600160a81b900460ff1661162a576040805162461bcd60e51b815260206004820152600d60248201526c4e4f545f524557524954494e4760981b604482015290519081900360640190fd5b6001805460ff60a81b19169055604080516000815290517fab1ea65fd25ce96d303e895d1bd43edddb89841544a3705d3e61fc947a5fc25b9181900360200190a15050565b60015460408051638da5cb5b60e01b815290516000926001600160a01b031691638da5cb5b916004808301926020929190829003018186803b1580156116b457600080fd5b505afa1580156116c8573d6000803e3d6000fd5b505050506040513d60208110156116de57600080fd5b505160408051638da5cb5b60e01b815290519192506000916001600160a01b03841691638da5cb5b916004808301926020929190829003018186803b15801561172657600080fd5b505afa15801561173a573d6000803e3d6000fd5b505050506040513d602081101561175057600080fd5b50519050336001600160a01b0382161461179e576040805162461bcd60e51b815260206004820152600a60248201526904e4f545f524f4c4c55560b41b604482015290519081900360640190fd5b600154600160a81b900460ff16156117f1576040805162461bcd60e51b8152602060048201526011602482015270414c52454144595f524557524954494e4760781b604482015290519081900360640190fd5b6001805460ff60a81b1916600160a81b17815560408051918252517fab1ea65fd25ce96d303e895d1bd43edddb89841544a3705d3e61fc947a5fc25b9181900360200190a15050565b600080546001600160a01b031615611906576000546040805163babcc53960e01b815233600482015290516001600160a01b039092169163babcc53991602480820192602092909190829003018186803b15801561189757600080fd5b505afa1580156118ab573d6000803e3d6000fd5b505050506040513d60208110156118c157600080fd5b5051611906576040805162461bcd60e51b815260206004820152600f60248201526e1393d517d5d2125511531254d51151608a1b604482015290519081900360640190fd5b61149260033360018a8a8a60601b60601c6001600160a01b03168a8a8a604051602001808860ff1660ff1660f81b815260010187815260200186815260200185815260200184815260200183838082843780830192505050975050505050505050604051602081830303815290604052611cfb565b6000546001600160a01b031681565b60015460408051638da5cb5b60e01b815290516000926001600160a01b031691638da5cb5b916004808301926020929190829003018186803b1580156119cf57600080fd5b505afa1580156119e3573d6000803e3d6000fd5b505050506040513d60208110156119f957600080fd5b505160408051638da5cb5b60e01b815290519192506000916001600160a01b03841691638da5cb5b916004808301926020929190829003018186803b158015611a4157600080fd5b505afa158015611a55573d6000803e3d6000fd5b505050506040513d6020811015611a6b57600080fd5b50519050336001600160a01b03821614611ab9576040805162461bcd60e51b815260206004820152600a60248201526904e4f545f524f4c4c55560b41b604482015290519081900360640190fd5b600154600160a01b900460ff16611b04576040805162461bcd60e51b815260206004820152600a6024820152691393d517d4105554d15160b21b604482015290519081900360640190fd5b6001805460ff60a01b19169055604080516000815290517f9077d36bc00859b5c3f320310707208543dd35092cb0a0fe117d0c6a558b148b9181900360200190a15050565b600154600160a01b900460ff1681565b600080546001600160a01b031615611c25576000546040805163babcc53960e01b815233600482015290516001600160a01b039092169163babcc53991602480820192602092909190829003018186803b158015611bb657600080fd5b505afa158015611bca573d6000803e3d6000fd5b505050506040513d6020811015611be057600080fd5b5051611c25576040805162461bcd60e51b815260206004820152600f60248201526e1393d517d5d2125511531254d51151608a1b604482015290519081900360640190fd5b6000611c4f60033386866040518083838082843760405192018290039091209350611db492505050565b9050807fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b858560405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a29392505050565b6001546001600160a01b031681565b600154600160a81b900460ff1681565b3b151590565b61111061111160901b01190190565b61111161111160901b010190565b600080611d1085858580519060200120611db4565b9050807fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b846040518080602001828103825283818151815260200191508051906020019080838360005b83811015611d72578181015183820152602001611d5a565b50505050905090810190601f168015611d9f5780820380516001836020036101000a031916815260200191505b509250505060405180910390a2949350505050565b600154604080516302bbfad160e01b815260ff861660048201526001600160a01b03858116602483015260448201859052915160009392909216916302bbfad1913491606480830192602092919082900301818588803b158015611e1757600080fd5b505af1158015611e2b573d6000803e3d6000fd5b50505050506040513d6020811015611e4257600080fd5b505194935050505056fea2646970667358221220ed792396a49edd456f5b05e40bfc6c2098d2037e24a28a983ff70e1f51cdd64564736f6c634300060b0033608060405234801561001057600080fd5b506000805460ff191660011790556108878061002d6000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c806316b9109b1461007257806330a826b414610091578063485cc955146100ae5780636f791d29146100dc5780638b8ca199146100f8578063bc49accb14610130578063f03c04a5146101bc575b600080fd5b61008f6004803603602081101561008857600080fd5b50356101e8565b005b61008f600480360360208110156100a757600080fd5b5035610269565b61008f600480360360408110156100c457600080fd5b506001600160a01b03813581169160200135166102e7565b6100e461036c565b604080519115158252519081900360200190f35b61008f6004803603608081101561010e57600080fd5b50803590602081013590604081013590606001356001600160a01b0316610375565b61008f6004803603608081101561014657600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561017d57600080fd5b82018360208201111561018f57600080fd5b803590602001918460018302840111640100000000831117156101b157600080fd5b50909250905061041c565b61008f600480360360408110156101d257600080fd5b506001600160a01b038135169060200135610687565b6001546001600160a01b03163314610235576040805162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b604482015290519081900360640190fd5b60408051600160f81b6020820152602180820184905282518083039091018152604190910190915261026690610721565b50565b6001546001600160a01b031633146102b6576040805162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b604482015290519081900360640190fd5b60408051600160f91b6020820152602180820184905282518083039091018152604190910190915261026690610721565b6001546001600160a01b031615610334576040805162461bcd60e51b815260206004820152600c60248201526b1053149150511657d253925560a21b604482015290519081900360640190fd5b60008054610100600160a81b0319166101006001600160a01b0394851602179055600180546001600160a01b03191691909216179055565b60005460ff1690565b6001546001600160a01b031633146103c2576040805162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b604482015290519081900360640190fd5b60408051600060208201526021810186905260418101859052436061820152608181018490526001600160a01b03831660a1808301919091528251808303909101815260c190910190915261041690610721565b50505050565b6001546001600160a01b03163314610469576040805162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b604482015290519081900360640190fd5b60408051774368616c6c656e6765506572696f64457468426c6f636b7360401b815281519081900360180181207214dc195959131a5b5a5d14195c94d958dbdb99606a1b825291519081900360130190206060919087906064880460405180806921b430b4b727bbb732b960b11b815250600a01905060405180910390208860601b60601c6001600160a01b03168888604051602001808981526020018881526020018781526020018681526020018581526020018481526020018383808284376040805191909301818103601f190182528084526000805483516020808601919091206302bbfad160e01b8552600b60048601526024850184905260448501529551939f50909d5061010090046001600160a01b03169b506302bbfad19a5060648082019a509398509096508690039091019350849250899150889050803b1580156105b557600080fd5b505af11580156105c9573d6000803e3d6000fd5b505050506040513d60208110156105df57600080fd5b5051604080516020808252855182820152855193945084937fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b938793928392918301919085019080838360005b8381101561064457818101518382015260200161062c565b50505050905090810190601f1680156106715780820380516001836020036101000a031916815260200191505b509250505060405180910390a250505050505050565b6001546001600160a01b031633146106d4576040805162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b604482015290519081900360640190fd5b60408051600360f81b60208201526001600160a01b0384166021820152604181018390524360618083019190915282518083039091018152608190910190915261071d90610721565b5050565b600080548251602080850191909120604080516302bbfad160e01b8152600860048201523360248201526044810192909252516101009093046001600160a01b0316936302bbfad193606480840194939192918390030190829087803b15801561078a57600080fd5b505af115801561079e573d6000803e3d6000fd5b505050506040513d60208110156107b457600080fd5b505160408051602080825284518282015284517fff64905f73a67fb594e0f940a8075a860db489ad991e032f48c81123eb52d60b938693928392918301919085019080838360005b838110156108145781810151838201526020016107fc565b50505050905090810190601f1680156108415780820380516001836020036101000a031916815260200191505b509250505060405180910390a25056fea264697066735822122088b967009dc1bb1421c1227dab50fdedd3f9c23f8c919c0cced5186e63410eae64736f6c634300060b0033608060405234801561001057600080fd5b506000805460ff191660011790556113158061002d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638515bc6a116100925780638515bc6a146102ed5780639229bab6146102f55780639c5cfe0b146103125780639f0c04bf1461040e578063b0f30537146104ad578063c75184df146104b5578063cb23bcb5146104d9578063e78cea92146104e1578063f1fd3a39146104e9576100ea565b80627436d3146100ef5780630c726847146101a75780631198527114610267578063465477901461026f578063485cc955146102775780636f791d29146102a557806372f2a8c7146102c157806380648b02146102c9575b600080fd5b6101956004803603606081101561010557600080fd5b810190602081018135600160201b81111561011f57600080fd5b82018360208201111561013157600080fd5b803590602001918460208302840111600160201b8311171561015257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135610506565b60408051918252519081900360200190f35b610265600480360360408110156101bd57600080fd5b810190602081018135600160201b8111156101d757600080fd5b8201836020820111156101e957600080fd5b803590602001918460018302840111600160201b8311171561020a57600080fd5b919390929091602081019035600160201b81111561022757600080fd5b82018360208201111561023957600080fd5b803590602001918460208302840111600160201b8311171561025a57600080fd5b509092509050610541565b005b61019561062d565b610195610643565b6102656004803603604081101561028d57600080fd5b506001600160a01b0381358116916020013516610652565b6102ad6106dc565b604080519115158252519081900360200190f35b6101956106e5565b6102d16106eb565b604080516001600160a01b039092168252519081900360200190f35b6101956106fa565b6101956004803603602081101561030b57600080fd5b5035610710565b610265600480360361014081101561032957600080fd5b81359190810190604081016020820135600160201b81111561034a57600080fd5b82018360208201111561035c57600080fd5b803590602001918460208302840111600160201b8311171561037d57600080fd5b919390928235926001600160a01b03602082013581169360408301359091169260608301359260808101359260a08201359260c08301359261010081019060e00135600160201b8111156103d057600080fd5b8201836020820111156103e257600080fd5b803590602001918460018302840111600160201b8311171561040357600080fd5b509092509050610722565b610195600480360360e081101561042457600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359160808201359160a08101359181019060e0810160c0820135600160201b81111561046f57600080fd5b82018360208201111561048157600080fd5b803590602001918460018302840111600160201b831117156104a257600080fd5b509092509050610afa565b610195610b9a565b6104bd610ba9565b604080516001600160801b039092168252519081900360200190f35b6102d1610bae565b6102d1610bc2565b6102ad600480360360208110156104ff57600080fd5b5035610bd1565b60006105398484846040516020018082815260200191505060405160208183030381529060405280519060200120610be5565b949350505050565b60005461010090046001600160a01b03163314610593576040805162461bcd60e51b815260206004820152600b60248201526a04f4e4c595f524f4c4c55560ac1b604482015290519081900360640190fd5b806000805b82811015610624576106028783888888868181106105b257fe5b905060200201358601926105c8939291906112b7565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cb392505050565b84848281811061060e57fe5b6020029190910135929092019150600101610598565b50505050505050565b600454600160801b90046001600160801b031690565b6003546001600160801b031690565b60005461010090046001600160a01b0316156106a4576040805162461bcd60e51b815260206004820152600c60248201526b1053149150511657d253925560a21b604482015290519081900360640190fd5b60008054610100600160a81b0319166101006001600160a01b0394851602179055600180546001600160a01b03191691909216179055565b60005460ff1690565b60055490565b6006546001600160a01b031690565b600354600160801b90046001600160801b031690565b60026020526000908152604090205481565b6000806107358a8a8a8a8a8a8a8a610afa565b90506107848e8e8e80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508d84610e1b565b91508d8a6001600160a01b03168a6001600160a01b03167f20af7f3bbfe38132b8900ae295cd9c8d1914be7052d061a511f3f728dab189648e6040518082815260200191505060405180910390a4506107db611270565b60036040518060c00160405290816000820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016000820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160109054906101000a90046001600160801b03166001600160801b03166001600160801b03168152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152505090506040518060c00160405280896001600160801b03168152602001886001600160801b03168152602001876001600160801b031681526020018f6001600160801b031681526020018381526020018b6001600160a01b0316815250600360008201518160000160006101000a8154816001600160801b0302191690836001600160801b0316021790555060208201518160000160106101000a8154816001600160801b0302191690836001600160801b0316021790555060408201518160010160006101000a8154816001600160801b0302191690836001600160801b0316021790555060608201518160010160106101000a8154816001600160801b0302191690836001600160801b031602179055506080820151816002015560a08201518160030160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550905050610a6a898686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ffa92505050565b80516003805460208401516001600160801b03199182166001600160801b03948516178416600160801b9185168202179092556040840151600480546060870151931691851691909117841691909316909102179055608081015160055560a00151600680546001600160a01b0319166001600160a01b0390921691909117905550505050505050505050505050565b600060038960601b60601c6001600160a01b03168960601b60601c6001600160a01b0316898989898989604051602001808a60ff1660ff1660f81b815260010189815260200188815260200187815260200186815260200185815260200184815260200183838082843780830192505050995050505050505050505060405160208183030381529060405280519060200120905098975050505050505050565b6004546001600160801b031690565b600181565b60005461010090046001600160a01b031681565b6001546001600160a01b031681565b600090815260026020526040902054151590565b8251600090610100811115610bf957600080fd5b8260005b82811015610ca95760028606610c5657868181518110610c1957fe5b6020026020010151826040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209150610c9b565b81878281518110610c6357fe5b602002602001015160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012091505b600286049550600101610bfd565b5095945050505050565b805160009082908290610cc257fe5b01602001516001600160f81b0319161415610e18578051606114610d1a576040805162461bcd60e51b815260206004820152600a6024820152690848288be988a9c8ea8960b31b604482015290519081900360640190fd5b6000610d2d82600163ffffffff61121716565b9050610d3881610bd1565b15610d81576040805162461bcd60e51b8152602060048201526014602482015273454e5452595f414c52454144595f45584953545360601b604482015290519081900360640190fd5b6000610d9483602163ffffffff61121716565b90506000610da984604163ffffffff61121716565b9050610db36112a5565b5060408051602080820183528382526000868152600282528390208251905582518681529081018490528083018590529151909185917fe5ccc8d7080a4904b2f4e42d91e8f06b13fe6cb2181ad1fe14644e856b44c1319181900360600190a2505050505b50565b6000610100845110610e65576040805162461bcd60e51b815260206004820152600e60248201526d50524f4f465f544f4f5f4c4f4e4760901b604482015290519081900360640190fd5b835160020a8310610eb0576040805162461bcd60e51b815260206004820152601060248201526f1410551217d393d517d352539253505360821b604482015290519081900360640190fd5b6000610ebd858585610506565b6000878152600260205260409020805491925090610f14576040805162461bcd60e51b815260206004820152600f60248201526e4e4f5f4f5554424f585f454e54525960881b604482015290519081900360640190fd5b8551604080516020808201899052818301939093528151808203830181526060909101825280519083012060008181526001850190935291205460ff1615610f93576040805162461bcd60e51b815260206004820152600d60248201526c1053149150511657d4d4115395609a1b604482015290519081900360640190fd5b81548314610fd3576040805162461bcd60e51b815260206004820152600860248201526710905117d493d3d560c21b604482015290519081900360640190fd5b6000818152600192830160205260409020805460ff19169092179091559695505050505050565b600154604051639e5d4c4960e01b81526001600160a01b03858116600483019081526024830186905260606044840181815286516064860152865160009692959490921693639e5d4c49938a938a938a93909160849091019060208501908083838e5b8381101561107557818101518382015260200161105d565b50505050905090810190601f1680156110a25780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156110c357600080fd5b505af11580156110d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561110057600080fd5b815160208301805160405192949293830192919084600160201b82111561112657600080fd5b90830190602082018581111561113b57600080fd5b8251600160201b81118282018810171561115457600080fd5b82525081516020918201929091019080838360005b83811015611181578181015183820152602001611169565b50505050905090810190601f1680156111ae5780820380516001836020036101000a031916815260200191505b506040525050509150915081611210578051156111ce5780518082602001fd5b6040805162461bcd60e51b81526020600482015260126024820152711094925111d157d0d0531317d1905253115160721b604482015290519081900360640190fd5b5050505050565b60008160200183511015611267576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b60408051602081019091526000815290565b600080858511156112c6578182fd5b838611156112d2578182fd5b505082019391909203915056fea2646970667358221220767004b2eded0b2e68c20232247b168ceca5eb5578398f78770ead63ded5a1b964736f6c634300060b0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 493,
        "contract": "contracts/rollup/BridgeCreator.sol:BridgeCreator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21635,
        "contract": "contracts/rollup/BridgeCreator.sol:BridgeCreator",
        "label": "delayedBridgeTemplate",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Bridge)13096"
      },
      {
        "astId": 21637,
        "contract": "contracts/rollup/BridgeCreator.sol:BridgeCreator",
        "label": "sequencerInboxTemplate",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(SequencerInbox)16586"
      },
      {
        "astId": 21639,
        "contract": "contracts/rollup/BridgeCreator.sol:BridgeCreator",
        "label": "inboxTemplate",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Inbox)13932"
      },
      {
        "astId": 21641,
        "contract": "contracts/rollup/BridgeCreator.sol:BridgeCreator",
        "label": "rollupEventBridgeTemplate",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(RollupEventBridge)25104"
      },
      {
        "astId": 21643,
        "contract": "contracts/rollup/BridgeCreator.sol:BridgeCreator",
        "label": "outboxTemplate",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(Outbox)15370"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Bridge)13096": {
        "encoding": "inplace",
        "label": "contract Bridge",
        "numberOfBytes": "20"
      },
      "t_contract(Inbox)13932": {
        "encoding": "inplace",
        "label": "contract Inbox",
        "numberOfBytes": "20"
      },
      "t_contract(Outbox)15370": {
        "encoding": "inplace",
        "label": "contract Outbox",
        "numberOfBytes": "20"
      },
      "t_contract(RollupEventBridge)25104": {
        "encoding": "inplace",
        "label": "contract RollupEventBridge",
        "numberOfBytes": "20"
      },
      "t_contract(SequencerInbox)16586": {
        "encoding": "inplace",
        "label": "contract SequencerInbox",
        "numberOfBytes": "20"
      }
    }
  }
}