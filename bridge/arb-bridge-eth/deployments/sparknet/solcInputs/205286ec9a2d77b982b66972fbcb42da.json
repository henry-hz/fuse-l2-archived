{
  "language": "Solidity",
  "sources": {
    "contracts/validator/IGasRefunder.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * Copyright 2021, Offchain Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npragma solidity >=0.6.11 <0.7.0 || >=0.8.7 <0.9.0;\n\ninterface IGasRefunder {\n    function onGasSpent(\n        address payable spender,\n        uint256 gasUsed,\n        uint256 calldataSize\n    ) external returns (bool success);\n}\n"
    },
    "contracts/validator/GasRefunder.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * Copyright 2021, Offchain Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npragma solidity ^0.8.7;\n\nimport \"./IGasRefunder.sol\";\n\nimport \"@openzeppelin/contracts-0.8/access/Ownable.sol\";\n\ncontract GasRefunder is IGasRefunder, Ownable {\n    mapping(address => bool) public allowedContracts;\n    mapping(address => bool) public allowedRefundees;\n    mapping(address => uint256) public lastContractRefund;\n    address public disallower;\n\n    struct CommonParameters {\n        uint128 maxRefundeeBalance;\n        uint32 extraGasMargin;\n        uint8 calldataCost;\n        uint64 maxGasTip;\n        uint64 maxGasCost;\n        uint32 maxSingleGasUsage;\n    }\n\n    CommonParameters public commonParams;\n\n    enum CommonParameterKey {\n        MAX_REFUNDEE_BALANCE,\n        EXTRA_GAS_MARGIN,\n        CALLDATA_COST,\n        MAX_GAS_TIP,\n        MAX_GAS_COST,\n        MAX_SINGLE_GAS_USAGE\n    }\n\n    enum RefundDenyReason {\n        CONTRACT_NOT_ALLOWED,\n        REFUNDEE_NOT_ALLOWED,\n        ALREADY_REFUNDED_THIS_BLOCK,\n        REFUNDEE_ABOVE_MAX_BALANCE,\n        OUT_OF_FUNDS\n    }\n\n    event RefundedGasCosts(\n        address indexed refundee,\n        address indexed contractAddress,\n        bool indexed success,\n        uint256 gas,\n        uint256 gasPrice,\n        uint256 amountPaid\n    );\n    event RefundGasCostsDenied(\n        address indexed refundee,\n        address indexed contractAddress,\n        RefundDenyReason indexed reason,\n        uint256 gas\n    );\n    event Deposited(address sender, uint256 amount);\n    event Withdrawn(address initiator, address destination, uint256 amount);\n    event ContractAllowedSet(address indexed addr, bool indexed allowed);\n    event RefundeeAllowedSet(address indexed addr, bool indexed allowed);\n    event DisallowerSet(address indexed addr);\n    event CommonParameterSet(CommonParameterKey indexed parameter, uint256 value);\n\n    constructor() Ownable() {\n        commonParams = CommonParameters({\n            maxRefundeeBalance: 0, // no limit\n            extraGasMargin: 4000, // 4k gas\n            calldataCost: 12, // Between 4 for zero bytes and 16 for non-zero bytes\n            maxGasTip: 2 gwei,\n            maxGasCost: 120 gwei,\n            maxSingleGasUsage: 2e6 // 2 million gas\n        });\n    }\n\n    function setDisallower(address addr) external onlyOwner {\n        disallower = addr;\n        emit DisallowerSet(addr);\n    }\n\n    function allowContracts(address[] calldata addresses) external onlyOwner {\n        setContractsAllowedImpl(addresses, true);\n    }\n\n    function disallowContracts(address[] calldata addresses) external {\n        require(msg.sender == owner() || msg.sender == disallower, \"NOT_AUTHORIZED\");\n        setContractsAllowedImpl(addresses, false);\n    }\n\n    function setContractsAllowedImpl(address[] calldata addresses, bool allow) internal {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            address addr = addresses[i];\n            allowedContracts[addr] = allow;\n            emit ContractAllowedSet(addr, allow);\n        }\n    }\n\n    function allowRefundees(address[] calldata addresses) external onlyOwner {\n        setRefundeesAllowedImpl(addresses, true);\n    }\n\n    function disallowRefundees(address[] calldata addresses) external {\n        require(msg.sender == owner() || msg.sender == disallower, \"NOT_AUTHORIZED\");\n        setRefundeesAllowedImpl(addresses, false);\n    }\n\n    function setRefundeesAllowedImpl(address[] calldata addresses, bool allow) internal {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            address addr = addresses[i];\n            allowedRefundees[addr] = allow;\n            emit RefundeeAllowedSet(addr, allow);\n        }\n    }\n\n    function setMaxRefundeeBalance(uint128 newValue) external onlyOwner {\n        commonParams.maxRefundeeBalance = newValue;\n        emit CommonParameterSet(CommonParameterKey.MAX_REFUNDEE_BALANCE, newValue);\n    }\n\n    function setExtraGasMargin(uint32 newValue) external onlyOwner {\n        commonParams.extraGasMargin = newValue;\n        emit CommonParameterSet(CommonParameterKey.EXTRA_GAS_MARGIN, newValue);\n    }\n\n    function setCalldataCost(uint8 newValue) external onlyOwner {\n        commonParams.calldataCost = newValue;\n        emit CommonParameterSet(CommonParameterKey.CALLDATA_COST, newValue);\n    }\n\n    function setMaxGasTip(uint64 newValue) external onlyOwner {\n        commonParams.maxGasTip = newValue;\n        emit CommonParameterSet(CommonParameterKey.MAX_GAS_TIP, newValue);\n    }\n\n    function setMaxGasCost(uint64 newValue) external onlyOwner {\n        commonParams.maxGasCost = newValue;\n        emit CommonParameterSet(CommonParameterKey.MAX_GAS_COST, newValue);\n    }\n\n    function setMaxSingleGasUsage(uint32 newValue) external onlyOwner {\n        commonParams.maxSingleGasUsage = newValue;\n        emit CommonParameterSet(CommonParameterKey.MAX_SINGLE_GAS_USAGE, newValue);\n    }\n\n    receive() external payable {\n        emit Deposited(msg.sender, msg.value);\n    }\n\n    function withdraw(address payable destination, uint256 amount) external onlyOwner {\n        // It's expected that destination is an EOA\n        (bool success, ) = destination.call{ value: amount }(\"\");\n        require(success, \"WITHDRAW_FAILED\");\n        emit Withdrawn(msg.sender, destination, amount);\n    }\n\n    function onGasSpent(\n        address payable refundee,\n        uint256 gasUsed,\n        uint256 calldataSize\n    ) external override returns (bool success) {\n        uint256 startGasLeft = gasleft();\n\n        uint256 ownBalance = address(this).balance;\n\n        if (ownBalance == 0) {\n            emit RefundGasCostsDenied(refundee, msg.sender, RefundDenyReason.OUT_OF_FUNDS, gasUsed);\n            return false;\n        }\n\n        if (!allowedContracts[msg.sender]) {\n            emit RefundGasCostsDenied(\n                refundee,\n                msg.sender,\n                RefundDenyReason.CONTRACT_NOT_ALLOWED,\n                gasUsed\n            );\n            return false;\n        }\n        if (!allowedRefundees[refundee]) {\n            emit RefundGasCostsDenied(\n                refundee,\n                msg.sender,\n                RefundDenyReason.REFUNDEE_NOT_ALLOWED,\n                gasUsed\n            );\n            return false;\n        }\n\n        if (lastContractRefund[msg.sender] == block.number) {\n            // There was already a refund this block, don't refund further\n            emit RefundGasCostsDenied(\n                refundee,\n                msg.sender,\n                RefundDenyReason.ALREADY_REFUNDED_THIS_BLOCK,\n                gasUsed\n            );\n            return false;\n        }\n        lastContractRefund[msg.sender] = block.number;\n\n        uint256 estGasPrice = block.basefee + commonParams.maxGasTip;\n        if (tx.gasprice < estGasPrice) {\n            estGasPrice = tx.gasprice;\n        }\n        if (commonParams.maxGasCost != 0 && estGasPrice > commonParams.maxGasCost) {\n            estGasPrice = commonParams.maxGasCost;\n        }\n\n        // Retrieve these variables before measuring gasleft()\n        uint256 refundeeBalance = refundee.balance;\n        uint256 maxRefundeeBalance = commonParams.maxRefundeeBalance;\n        uint256 maxSingleGasUsage = commonParams.maxSingleGasUsage;\n\n        // Add in a bit of a buffer for the tx costs not measured with gasleft\n        gasUsed +=\n            startGasLeft +\n            commonParams.extraGasMargin +\n            (calldataSize * commonParams.calldataCost);\n        // Split this up into two statements so that gasleft() comes after the storage loads\n        gasUsed -= gasleft();\n\n        if (maxSingleGasUsage != 0 && gasUsed > maxSingleGasUsage) {\n            gasUsed = maxSingleGasUsage;\n        }\n\n        uint256 refundAmount = estGasPrice * gasUsed;\n        if (maxRefundeeBalance != 0 && refundeeBalance + refundAmount > maxRefundeeBalance) {\n            if (refundeeBalance > maxRefundeeBalance) {\n                // The refundee is already above their max balance\n                emit RefundGasCostsDenied(\n                    refundee,\n                    msg.sender,\n                    RefundDenyReason.REFUNDEE_ABOVE_MAX_BALANCE,\n                    gasUsed\n                );\n                return false;\n            } else {\n                refundAmount = maxRefundeeBalance - refundeeBalance;\n            }\n        }\n\n        if (refundAmount > ownBalance) {\n            refundAmount = ownBalance;\n        }\n\n        // It's expected that refundee is an EOA\n        (success, ) = refundee.call{ value: refundAmount }(\"\");\n        emit RefundedGasCosts(refundee, msg.sender, success, gasUsed, estGasPrice, refundAmount);\n    }\n}\n"
    },
    "@openzeppelin/contracts-0.8/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts-0.8/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}