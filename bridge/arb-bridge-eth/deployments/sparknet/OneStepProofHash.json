{
  "address": "0xf22AC82AC9ed8abD41B3Cc3Ab643827Da26c04C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[2]",
          "name": "bridges",
          "type": "address[2]"
        },
        {
          "internalType": "uint256",
          "name": "initialMessagesRead",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[2]",
          "name": "accs",
          "type": "bytes32[2]"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "bproof",
          "type": "bytes"
        }
      ],
      "name": "executeStep",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "gas",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "afterMessagesRead",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[4]",
          "name": "fields",
          "type": "bytes32[4]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[2]",
          "name": "bridges",
          "type": "address[2]"
        },
        {
          "internalType": "uint256",
          "name": "initialMessagesRead",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[2]",
          "name": "accs",
          "type": "bytes32[2]"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "bproof",
          "type": "bytes"
        }
      ],
      "name": "executeStepDebug",
      "outputs": [
        {
          "internalType": "string",
          "name": "startMachine",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "afterMachine",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e46be8876ab309d226deef9598de7418feaadc2bdcc29b5fcc521fd1223bc62",
  "receipt": {
    "to": null,
    "from": "0x7D3D3955Fd31f22709335474e80736dd0D433cF3",
    "contractAddress": "0xf22AC82AC9ed8abD41B3Cc3Ab643827Da26c04C9",
    "transactionIndex": 0,
    "gasUsed": "3546699",
    "logsBloom": "0x
    "blockHash": "0x30b9eed57c21a74c654955a7361402dc4b562a2985affa023bfafe621c8d6810",
    "transactionHash": "0x3e46be8876ab309d226deef9598de7418feaadc2bdcc29b5fcc521fd1223bc62",
    "logs": [],
    "blockNumber": 3239889,
    "cumulativeGasUsed": "3546699",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5f404ffad369d1e6fd2cf1f0ce010b90",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStep\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"afterMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[4]\",\"name\":\"fields\",\"type\":\"bytes32[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"bridges\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"initialMessagesRead\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"accs\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bproof\",\"type\":\"bytes\"}],\"name\":\"executeStepDebug\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"startMachine\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"afterMachine\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arch/OneStepProofHash.sol\":\"OneStepProofHash\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/arch/Hashing.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./Value.sol\\\";\\n\\nlibrary Hashing {\\n    using Hashing for Value.Data;\\n    using Value for Value.CodePoint;\\n\\n    function keccak1(bytes32 b) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(b));\\n    }\\n\\n    function keccak2(bytes32 a, bytes32 b) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(a, b));\\n    }\\n\\n    function bytes32FromArray(\\n        bytes memory arr,\\n        uint256 offset,\\n        uint256 arrLength\\n    ) internal pure returns (uint256) {\\n        uint256 res = 0;\\n        for (uint256 i = 0; i < 32; i++) {\\n            res = res << 8;\\n            bytes1 b = arrLength > offset + i ? arr[offset + i] : bytes1(0);\\n            res = res | uint256(uint8(b));\\n        }\\n        return res;\\n    }\\n\\n    /*\\n     * !! Note that dataLength must be a power of two !!\\n     *\\n     * If you have an arbitrary data length, you can round it up with roundUpToPow2.\\n     * The boolean return value tells if the data segment data[startOffset..startOffset+dataLength] only included zeroes.\\n     * If pack is true, the returned value is the merkle hash where trailing zeroes are ignored, that is,\\n     *   if h is the smallest height for which all data[startOffset+2**h..] are zero, merkle hash of data[startOffset..startOffset+2**h] is returned.\\n     * If all elements in the data segment are zero (and pack is true), keccak1(bytes32(0)) is returned.\\n     */\\n    function merkleRoot(\\n        bytes memory data,\\n        uint256 rawDataLength,\\n        uint256 startOffset,\\n        uint256 dataLength,\\n        bool pack\\n    ) internal pure returns (bytes32, bool) {\\n        if (dataLength <= 32) {\\n            if (startOffset >= rawDataLength) {\\n                return (keccak1(bytes32(0)), true);\\n            }\\n            bytes32 res = keccak1(bytes32(bytes32FromArray(data, startOffset, rawDataLength)));\\n            return (res, res == keccak1(bytes32(0)));\\n        }\\n        (bytes32 h2, bool zero2) = merkleRoot(\\n            data,\\n            rawDataLength,\\n            startOffset + dataLength / 2,\\n            dataLength / 2,\\n            false\\n        );\\n        if (zero2 && pack) {\\n            return merkleRoot(data, rawDataLength, startOffset, dataLength / 2, pack);\\n        }\\n        (bytes32 h1, bool zero1) = merkleRoot(\\n            data,\\n            rawDataLength,\\n            startOffset,\\n            dataLength / 2,\\n            false\\n        );\\n        return (keccak2(h1, h2), zero1 && zero2);\\n    }\\n\\n    function roundUpToPow2(uint256 len) internal pure returns (uint256) {\\n        if (len <= 1) return 1;\\n        else return 2 * roundUpToPow2((len + 1) / 2);\\n    }\\n\\n    function bytesToBufferHash(\\n        bytes memory buf,\\n        uint256 startOffset,\\n        uint256 length\\n    ) internal pure returns (bytes32) {\\n        (bytes32 mhash, ) = merkleRoot(\\n            buf,\\n            startOffset + length,\\n            startOffset,\\n            roundUpToPow2(length),\\n            true\\n        );\\n        return keccak2(bytes32(uint256(123)), mhash);\\n    }\\n\\n    function hashInt(uint256 val) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(val));\\n    }\\n\\n    function hashCodePoint(Value.CodePoint memory cp) internal pure returns (bytes32) {\\n        assert(cp.immediate.length < 2);\\n        if (cp.immediate.length == 0) {\\n            return\\n                keccak256(abi.encodePacked(Value.codePointTypeCode(), cp.opcode, cp.nextCodePoint));\\n        }\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    Value.codePointTypeCode(),\\n                    cp.opcode,\\n                    cp.immediate[0].hash(),\\n                    cp.nextCodePoint\\n                )\\n            );\\n    }\\n\\n    function hashTuplePreImage(bytes32 innerHash, uint256 valueSize)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(uint8(Value.tupleTypeCode()), innerHash, valueSize));\\n    }\\n\\n    function hash(Value.Data memory val) internal pure returns (bytes32) {\\n        if (val.typeCode == Value.intTypeCode()) {\\n            return hashInt(val.intVal);\\n        } else if (val.typeCode == Value.codePointTypeCode()) {\\n            return hashCodePoint(val.cpVal);\\n        } else if (val.typeCode == Value.tuplePreImageTypeCode()) {\\n            return hashTuplePreImage(bytes32(val.intVal), val.size);\\n        } else if (val.typeCode == Value.tupleTypeCode()) {\\n            Value.Data memory preImage = getTuplePreImage(val.tupleVal);\\n            return preImage.hash();\\n        } else if (val.typeCode == Value.hashOnlyTypeCode()) {\\n            return bytes32(val.intVal);\\n        } else if (val.typeCode == Value.bufferTypeCode()) {\\n            return keccak256(abi.encodePacked(uint256(123), val.bufferHash));\\n        } else {\\n            require(false, \\\"Invalid type code\\\");\\n        }\\n    }\\n\\n    function getTuplePreImage(Value.Data[] memory vals) internal pure returns (Value.Data memory) {\\n        require(vals.length <= 8, \\\"Invalid tuple length\\\");\\n        bytes32[] memory hashes = new bytes32[](vals.length);\\n        uint256 hashCount = hashes.length;\\n        uint256 size = 1;\\n        for (uint256 i = 0; i < hashCount; i++) {\\n            hashes[i] = vals[i].hash();\\n            size += vals[i].size;\\n        }\\n        bytes32 firstHash = keccak256(abi.encodePacked(uint8(hashes.length), hashes));\\n        return Value.newTuplePreImage(firstHash, size);\\n    }\\n}\\n\",\"keccak256\":\"0x33b99b7bca64988d96b8b2390ffc6b87265b8172b70883fb90091ca447384670\",\"license\":\"Apache-2.0\"},\"contracts/arch/IOneStepProof.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"../bridge/interfaces/IBridge.sol\\\";\\nimport \\\"../bridge/interfaces/ISequencerInbox.sol\\\";\\n\\ninterface IOneStepProof {\\n    // Bridges is sequencer bridge then delayed bridge\\n    function executeStep(\\n        address[2] calldata bridges,\\n        uint256 initialMessagesRead,\\n        bytes32[2] calldata accs,\\n        bytes calldata proof,\\n        bytes calldata bproof\\n    )\\n        external\\n        view\\n        returns (\\n            uint64 gas,\\n            uint256 afterMessagesRead,\\n            bytes32[4] memory fields\\n        );\\n\\n    function executeStepDebug(\\n        address[2] calldata bridges,\\n        uint256 initialMessagesRead,\\n        bytes32[2] calldata accs,\\n        bytes calldata proof,\\n        bytes calldata bproof\\n    ) external view returns (string memory startMachine, string memory afterMachine);\\n}\\n\",\"keccak256\":\"0xfe54321c0cc929daa79d94c379630ac3106c0e040e7cfd1db4821257b4919808\",\"license\":\"Apache-2.0\"},\"contracts/arch/Machine.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./Marshaling.sol\\\";\\n\\nimport \\\"../libraries/DebugPrint.sol\\\";\\n\\nlibrary Machine {\\n    using Hashing for Value.Data;\\n\\n    // Make sure these don't conflict with Challenge.MACHINE_UNREACHABLE (currently 100)\\n    uint256 internal constant MACHINE_EXTENSIVE = 0;\\n    uint256 internal constant MACHINE_ERRORSTOP = 1;\\n    uint256 internal constant MACHINE_HALT = 2;\\n\\n    function addStackVal(Value.Data memory stackValHash, Value.Data memory valHash)\\n        internal\\n        pure\\n        returns (Value.Data memory)\\n    {\\n        Value.Data[] memory vals = new Value.Data[](2);\\n        vals[0] = valHash;\\n        vals[1] = stackValHash;\\n\\n        return Hashing.getTuplePreImage(vals);\\n    }\\n\\n    struct Data {\\n        bytes32 instructionStackHash;\\n        Value.Data dataStack;\\n        Value.Data auxStack;\\n        Value.Data registerVal;\\n        Value.Data staticVal;\\n        uint256 avmGasRemaining;\\n        bytes32 errHandlerHash;\\n        uint256 status;\\n    }\\n\\n    function toString(Data memory machine) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"Machine(\\\",\\n                    DebugPrint.bytes32string(machine.instructionStackHash),\\n                    \\\", \\\\n\\\",\\n                    DebugPrint.bytes32string(machine.dataStack.hash()),\\n                    \\\", \\\\n\\\",\\n                    DebugPrint.bytes32string(machine.auxStack.hash()),\\n                    \\\", \\\\n\\\",\\n                    DebugPrint.bytes32string(machine.registerVal.hash()),\\n                    \\\", \\\\n\\\",\\n                    DebugPrint.bytes32string(machine.staticVal.hash()),\\n                    \\\", \\\\n\\\",\\n                    DebugPrint.uint2str(machine.avmGasRemaining),\\n                    \\\", \\\\n\\\",\\n                    DebugPrint.bytes32string(machine.errHandlerHash),\\n                    \\\")\\\\n\\\"\\n                )\\n            );\\n    }\\n\\n    function setErrorStop(Data memory machine) internal pure {\\n        machine.status = MACHINE_ERRORSTOP;\\n    }\\n\\n    function setHalt(Data memory machine) internal pure {\\n        machine.status = MACHINE_HALT;\\n    }\\n\\n    function addDataStackValue(Data memory machine, Value.Data memory val) internal pure {\\n        machine.dataStack = addStackVal(machine.dataStack, val);\\n    }\\n\\n    function addAuxStackValue(Data memory machine, Value.Data memory val) internal pure {\\n        machine.auxStack = addStackVal(machine.auxStack, val);\\n    }\\n\\n    function hash(Data memory machine) internal pure returns (bytes32) {\\n        if (machine.status == MACHINE_HALT) {\\n            return bytes32(uint256(0));\\n        } else if (machine.status == MACHINE_ERRORSTOP) {\\n            return bytes32(uint256(1));\\n        } else {\\n            return\\n                keccak256(\\n                    abi.encodePacked(\\n                        machine.instructionStackHash,\\n                        machine.dataStack.hash(),\\n                        machine.auxStack.hash(),\\n                        machine.registerVal.hash(),\\n                        machine.staticVal.hash(),\\n                        machine.avmGasRemaining,\\n                        machine.errHandlerHash\\n                    )\\n                );\\n        }\\n    }\\n\\n    function clone(Data memory machine) internal pure returns (Data memory) {\\n        return\\n            Data(\\n                machine.instructionStackHash,\\n                machine.dataStack,\\n                machine.auxStack,\\n                machine.registerVal,\\n                machine.staticVal,\\n                machine.avmGasRemaining,\\n                machine.errHandlerHash,\\n                machine.status\\n            );\\n    }\\n\\n    function deserializeMachine(bytes memory data, uint256 offset)\\n        internal\\n        pure\\n        returns (\\n            uint256, // offset\\n            Data memory // machine\\n        )\\n    {\\n        Data memory m;\\n        m.status = MACHINE_EXTENSIVE;\\n        uint256 instructionStack;\\n        uint256 errHandler;\\n        (offset, instructionStack) = Marshaling.deserializeInt(data, offset);\\n\\n        (offset, m.dataStack) = Marshaling.deserializeHashPreImage(data, offset);\\n        (offset, m.auxStack) = Marshaling.deserializeHashPreImage(data, offset);\\n        (offset, m.registerVal) = Marshaling.deserialize(data, offset);\\n        (offset, m.staticVal) = Marshaling.deserialize(data, offset);\\n        (offset, m.avmGasRemaining) = Marshaling.deserializeInt(data, offset);\\n        (offset, errHandler) = Marshaling.deserializeInt(data, offset);\\n\\n        m.instructionStackHash = bytes32(instructionStack);\\n        m.errHandlerHash = bytes32(errHandler);\\n        return (offset, m);\\n    }\\n}\\n\",\"keccak256\":\"0x759c1ff0da45acf9e17c4f659727ed2d16687a62c56ab12f92b7f3bf4d62ffa3\",\"license\":\"Apache-2.0\"},\"contracts/arch/Marshaling.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./Value.sol\\\";\\nimport \\\"./Hashing.sol\\\";\\n\\nimport \\\"../libraries/BytesLib.sol\\\";\\n\\nlibrary Marshaling {\\n    using BytesLib for bytes;\\n    using Value for Value.Data;\\n\\n    function deserializeHashPreImage(bytes memory data, uint256 startOffset)\\n        internal\\n        pure\\n        returns (uint256 offset, Value.Data memory value)\\n    {\\n        require(data.length >= startOffset && data.length - startOffset >= 64, \\\"too short\\\");\\n        bytes32 hashData;\\n        uint256 size;\\n        (offset, hashData) = extractBytes32(data, startOffset);\\n        (offset, size) = deserializeInt(data, offset);\\n        return (offset, Value.newTuplePreImage(hashData, size));\\n    }\\n\\n    function deserializeInt(bytes memory data, uint256 startOffset)\\n        internal\\n        pure\\n        returns (\\n            uint256, // offset\\n            uint256 // val\\n        )\\n    {\\n        require(data.length >= startOffset && data.length - startOffset >= 32, \\\"too short\\\");\\n        return (startOffset + 32, data.toUint(startOffset));\\n    }\\n\\n    function deserializeBytes32(bytes memory data, uint256 startOffset)\\n        internal\\n        pure\\n        returns (\\n            uint256, // offset\\n            bytes32 // val\\n        )\\n    {\\n        require(data.length >= startOffset && data.length - startOffset >= 32, \\\"too short\\\");\\n        return (startOffset + 32, data.toBytes32(startOffset));\\n    }\\n\\n    function deserializeCodePoint(bytes memory data, uint256 startOffset)\\n        internal\\n        pure\\n        returns (\\n            uint256, // offset\\n            Value.Data memory // val\\n        )\\n    {\\n        uint256 offset = startOffset;\\n        uint8 immediateType;\\n        uint8 opCode;\\n        Value.Data memory immediate;\\n        bytes32 nextHash;\\n\\n        (offset, immediateType) = extractUint8(data, offset);\\n        (offset, opCode) = extractUint8(data, offset);\\n        if (immediateType == 1) {\\n            (offset, immediate) = deserialize(data, offset);\\n        }\\n        (offset, nextHash) = extractBytes32(data, offset);\\n        if (immediateType == 1) {\\n            return (offset, Value.newCodePoint(opCode, nextHash, immediate));\\n        }\\n        return (offset, Value.newCodePoint(opCode, nextHash));\\n    }\\n\\n    function deserializeTuple(\\n        uint8 memberCount,\\n        bytes memory data,\\n        uint256 startOffset\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256, // offset\\n            Value.Data[] memory // val\\n        )\\n    {\\n        uint256 offset = startOffset;\\n        Value.Data[] memory members = new Value.Data[](memberCount);\\n        for (uint8 i = 0; i < memberCount; i++) {\\n            (offset, members[i]) = deserialize(data, offset);\\n        }\\n        return (offset, members);\\n    }\\n\\n    function deserialize(bytes memory data, uint256 startOffset)\\n        internal\\n        pure\\n        returns (\\n            uint256, // offset\\n            Value.Data memory // val\\n        )\\n    {\\n        require(startOffset < data.length, \\\"invalid offset\\\");\\n        (uint256 offset, uint8 valType) = extractUint8(data, startOffset);\\n        if (valType == Value.intTypeCode()) {\\n            uint256 intVal;\\n            (offset, intVal) = deserializeInt(data, offset);\\n            return (offset, Value.newInt(intVal));\\n        } else if (valType == Value.codePointTypeCode()) {\\n            return deserializeCodePoint(data, offset);\\n        } else if (valType == Value.bufferTypeCode()) {\\n            bytes32 hashVal;\\n            (offset, hashVal) = deserializeBytes32(data, offset);\\n            return (offset, Value.newBuffer(hashVal));\\n        } else if (valType == Value.tuplePreImageTypeCode()) {\\n            return deserializeHashPreImage(data, offset);\\n        } else if (valType >= Value.tupleTypeCode() && valType < Value.valueTypeCode()) {\\n            uint8 tupLength = uint8(valType - Value.tupleTypeCode());\\n            Value.Data[] memory tupleVal;\\n            (offset, tupleVal) = deserializeTuple(tupLength, data, offset);\\n            return (offset, Value.newTuple(tupleVal));\\n        }\\n        require(false, \\\"invalid typecode\\\");\\n    }\\n\\n    function extractUint8(bytes memory data, uint256 startOffset)\\n        private\\n        pure\\n        returns (\\n            uint256, // offset\\n            uint8 // val\\n        )\\n    {\\n        return (startOffset + 1, uint8(data[startOffset]));\\n    }\\n\\n    function extractBytes32(bytes memory data, uint256 startOffset)\\n        private\\n        pure\\n        returns (\\n            uint256, // offset\\n            bytes32 // val\\n        )\\n    {\\n        return (startOffset + 32, data.toBytes32(startOffset));\\n    }\\n}\\n\",\"keccak256\":\"0x151d631c4637a22e96caff6af30e52b143a305117a07274549eaf77f6a9dcc62\",\"license\":\"Apache-2.0\"},\"contracts/arch/OneStepProofCommon.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./IOneStepProof.sol\\\";\\nimport \\\"./Value.sol\\\";\\nimport \\\"./Machine.sol\\\";\\nimport \\\"../bridge/interfaces/IBridge.sol\\\";\\nimport \\\"../bridge/interfaces/ISequencerInbox.sol\\\";\\n\\nabstract contract OneStepProofCommon is IOneStepProof {\\n    using Machine for Machine.Data;\\n    using Hashing for Value.Data;\\n    using Value for Value.Data;\\n\\n    uint256 internal constant MAX_UINT256 = ((1 << 128) + 1) * ((1 << 128) - 1);\\n\\n    uint64 internal constant ERROR_GAS_COST = 5;\\n\\n    string internal constant BAD_IMM_TYP = \\\"BAD_IMM_TYP\\\";\\n    string internal constant NO_IMM = \\\"NO_IMM\\\";\\n    string internal constant STACK_MISSING = \\\"STACK_MISSING\\\";\\n    string internal constant AUX_MISSING = \\\"AUX_MISSING\\\";\\n    string internal constant STACK_MANY = \\\"STACK_MANY\\\";\\n    string internal constant AUX_MANY = \\\"AUX_MANY\\\";\\n    string internal constant INBOX_VAL = \\\"INBOX_VAL\\\";\\n    // Stop and arithmetic ops\\n    uint8 internal constant OP_ADD = 0x01;\\n    uint8 internal constant OP_MUL = 0x02;\\n    uint8 internal constant OP_SUB = 0x03;\\n    uint8 internal constant OP_DIV = 0x04;\\n    uint8 internal constant OP_SDIV = 0x05;\\n    uint8 internal constant OP_MOD = 0x06;\\n    uint8 internal constant OP_SMOD = 0x07;\\n    uint8 internal constant OP_ADDMOD = 0x08;\\n    uint8 internal constant OP_MULMOD = 0x09;\\n    uint8 internal constant OP_EXP = 0x0a;\\n    uint8 internal constant OP_SIGNEXTEND = 0x0b;\\n\\n    // Comparison & bitwise logic\\n    uint8 internal constant OP_LT = 0x10;\\n    uint8 internal constant OP_GT = 0x11;\\n    uint8 internal constant OP_SLT = 0x12;\\n    uint8 internal constant OP_SGT = 0x13;\\n    uint8 internal constant OP_EQ = 0x14;\\n    uint8 internal constant OP_ISZERO = 0x15;\\n    uint8 internal constant OP_AND = 0x16;\\n    uint8 internal constant OP_OR = 0x17;\\n    uint8 internal constant OP_XOR = 0x18;\\n    uint8 internal constant OP_NOT = 0x19;\\n    uint8 internal constant OP_BYTE = 0x1a;\\n    uint8 internal constant OP_SHL = 0x1b;\\n    uint8 internal constant OP_SHR = 0x1c;\\n    uint8 internal constant OP_SAR = 0x1d;\\n\\n    // SHA3\\n    uint8 internal constant OP_HASH = 0x20;\\n    uint8 internal constant OP_TYPE = 0x21;\\n    uint8 internal constant OP_ETHHASH2 = 0x22;\\n    uint8 internal constant OP_KECCAK_F = 0x23;\\n    uint8 internal constant OP_SHA256_F = 0x24;\\n\\n    // Stack, Memory, Storage and Flow Operations\\n    uint8 internal constant OP_POP = 0x30;\\n    uint8 internal constant OP_SPUSH = 0x31;\\n    uint8 internal constant OP_RPUSH = 0x32;\\n    uint8 internal constant OP_RSET = 0x33;\\n    uint8 internal constant OP_JUMP = 0x34;\\n    uint8 internal constant OP_CJUMP = 0x35;\\n    uint8 internal constant OP_STACKEMPTY = 0x36;\\n    uint8 internal constant OP_PCPUSH = 0x37;\\n    uint8 internal constant OP_AUXPUSH = 0x38;\\n    uint8 internal constant OP_AUXPOP = 0x39;\\n    uint8 internal constant OP_AUXSTACKEMPTY = 0x3a;\\n    uint8 internal constant OP_NOP = 0x3b;\\n    uint8 internal constant OP_ERRPUSH = 0x3c;\\n    uint8 internal constant OP_ERRSET = 0x3d;\\n\\n    // Duplication and Exchange operations\\n    uint8 internal constant OP_DUP0 = 0x40;\\n    uint8 internal constant OP_DUP1 = 0x41;\\n    uint8 internal constant OP_DUP2 = 0x42;\\n    uint8 internal constant OP_SWAP1 = 0x43;\\n    uint8 internal constant OP_SWAP2 = 0x44;\\n\\n    // Tuple operations\\n    uint8 internal constant OP_TGET = 0x50;\\n    uint8 internal constant OP_TSET = 0x51;\\n    uint8 internal constant OP_TLEN = 0x52;\\n    uint8 internal constant OP_XGET = 0x53;\\n    uint8 internal constant OP_XSET = 0x54;\\n\\n    // Logging operations\\n    uint8 internal constant OP_BREAKPOINT = 0x60;\\n    uint8 internal constant OP_LOG = 0x61;\\n\\n    // System operations\\n    uint8 internal constant OP_SEND = 0x70;\\n    // OP_INBOX_PEEK has been removed\\n    uint8 internal constant OP_INBOX = 0x72;\\n    uint8 internal constant OP_ERROR = 0x73;\\n    uint8 internal constant OP_STOP = 0x74;\\n    uint8 internal constant OP_SETGAS = 0x75;\\n    uint8 internal constant OP_PUSHGAS = 0x76;\\n    uint8 internal constant OP_ERR_CODE_POINT = 0x77;\\n    uint8 internal constant OP_PUSH_INSN = 0x78;\\n    uint8 internal constant OP_PUSH_INSN_IMM = 0x79;\\n    // uint8 private constant OP_OPEN_INSN = 0x7a;\\n    uint8 internal constant OP_SIDELOAD = 0x7b;\\n\\n    uint8 internal constant OP_ECRECOVER = 0x80;\\n    uint8 internal constant OP_ECADD = 0x81;\\n    uint8 internal constant OP_ECMUL = 0x82;\\n    uint8 internal constant OP_ECPAIRING = 0x83;\\n\\n    uint8 internal constant OP_DEBUGPRINT = 0x90;\\n\\n    // Buffer operations\\n    uint8 internal constant OP_NEWBUFFER = 0xa0;\\n    uint8 internal constant OP_GETBUFFER8 = 0xa1;\\n    uint8 internal constant OP_GETBUFFER64 = 0xa2;\\n    uint8 internal constant OP_GETBUFFER256 = 0xa3;\\n    uint8 internal constant OP_SETBUFFER8 = 0xa4;\\n    uint8 internal constant OP_SETBUFFER64 = 0xa5;\\n    uint8 internal constant OP_SETBUFFER256 = 0xa6;\\n\\n    uint8 internal constant CODE_POINT_TYPECODE = 1;\\n    bytes32 internal constant CODE_POINT_ERROR =\\n        keccak256(abi.encodePacked(CODE_POINT_TYPECODE, uint8(0), bytes32(0)));\\n\\n    uint256 internal constant SEND_SIZE_LIMIT = 10000;\\n\\n    // accs is [sendAcc, logAcc]\\n    function executeStep(\\n        address[2] calldata bridges,\\n        uint256 initialMessagesRead,\\n        bytes32[2] calldata accs,\\n        bytes calldata proof,\\n        bytes calldata bproof\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint64 gas,\\n            uint256 afterMessagesRead,\\n            bytes32[4] memory fields\\n        )\\n    {\\n        AssertionContext memory context = initializeExecutionContext(\\n            initialMessagesRead,\\n            accs,\\n            proof,\\n            bproof,\\n            bridges\\n        );\\n\\n        executeOp(context);\\n\\n        return returnContext(context);\\n    }\\n\\n    function executeStepDebug(\\n        address[2] calldata bridges,\\n        uint256 initialMessagesRead,\\n        bytes32[2] calldata accs,\\n        bytes calldata proof,\\n        bytes calldata bproof\\n    ) external view override returns (string memory startMachine, string memory afterMachine) {\\n        AssertionContext memory context = initializeExecutionContext(\\n            initialMessagesRead,\\n            accs,\\n            proof,\\n            bproof,\\n            bridges\\n        );\\n\\n        executeOp(context);\\n        startMachine = Machine.toString(context.startMachine);\\n        afterMachine = Machine.toString(context.afterMachine);\\n    }\\n\\n    // fields\\n    // startMachineHash,\\n    // endMachineHash,\\n    // afterInboxAcc,\\n    // afterMessagesHash,\\n    // afterLogsHash\\n\\n    function returnContext(AssertionContext memory context)\\n        internal\\n        pure\\n        returns (\\n            uint64 gas,\\n            uint256 afterMessagesRead,\\n            bytes32[4] memory fields\\n        )\\n    {\\n        return (\\n            context.gas,\\n            context.totalMessagesRead,\\n            [\\n                Machine.hash(context.startMachine),\\n                Machine.hash(context.afterMachine),\\n                context.sendAcc,\\n                context.logAcc\\n            ]\\n        );\\n    }\\n\\n    struct ValueStack {\\n        uint256 length;\\n        Value.Data[] values;\\n    }\\n\\n    function popVal(ValueStack memory stack) internal pure returns (Value.Data memory) {\\n        Value.Data memory val = stack.values[stack.length - 1];\\n        stack.length--;\\n        return val;\\n    }\\n\\n    function pushVal(ValueStack memory stack, Value.Data memory val) internal pure {\\n        stack.values[stack.length] = val;\\n        stack.length++;\\n    }\\n\\n    struct AssertionContext {\\n        ISequencerInbox sequencerBridge;\\n        IBridge delayedBridge;\\n        Machine.Data startMachine;\\n        Machine.Data afterMachine;\\n        uint256 totalMessagesRead;\\n        bytes32 sendAcc;\\n        bytes32 logAcc;\\n        uint64 gas;\\n        ValueStack stack;\\n        ValueStack auxstack;\\n        bool hadImmediate;\\n        uint8 opcode;\\n        bytes proof;\\n        uint256 offset;\\n        // merkle proofs for buffer\\n        bytes bufProof;\\n        bool errorOccurred;\\n    }\\n\\n    function handleError(AssertionContext memory context) internal pure {\\n        context.errorOccurred = true;\\n    }\\n\\n    function deductGas(AssertionContext memory context, uint64 amount)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (context.afterMachine.avmGasRemaining < amount) {\\n            // ERROR + GAS_SET\\n            context.gas += ERROR_GAS_COST;\\n            context.afterMachine.avmGasRemaining = MAX_UINT256;\\n            return true;\\n        } else {\\n            context.gas += amount;\\n            context.afterMachine.avmGasRemaining -= amount;\\n            return false;\\n        }\\n    }\\n\\n    function handleOpcodeError(AssertionContext memory context) internal pure {\\n        handleError(context);\\n    }\\n\\n    function initializeExecutionContext(\\n        uint256 initialMessagesRead,\\n        bytes32[2] calldata accs,\\n        bytes memory proof,\\n        bytes memory bproof,\\n        address[2] calldata bridges\\n    ) internal pure returns (AssertionContext memory) {\\n        uint8 opCode = uint8(proof[0]);\\n        uint8 stackCount = uint8(proof[1]);\\n        uint8 auxstackCount = uint8(proof[2]);\\n        uint256 offset = 3;\\n\\n        // Leave some extra space for values pushed on the stack in the proofs\\n        Value.Data[] memory stackVals = new Value.Data[](stackCount + 4);\\n        Value.Data[] memory auxstackVals = new Value.Data[](auxstackCount + 4);\\n        for (uint256 i = 0; i < stackCount; i++) {\\n            (offset, stackVals[i]) = Marshaling.deserialize(proof, offset);\\n        }\\n        for (uint256 i = 0; i < auxstackCount; i++) {\\n            (offset, auxstackVals[i]) = Marshaling.deserialize(proof, offset);\\n        }\\n        Machine.Data memory mach;\\n        (offset, mach) = Machine.deserializeMachine(proof, offset);\\n\\n        uint8 immediate = uint8(proof[offset]);\\n        offset += 1;\\n\\n        AssertionContext memory context;\\n        context.sequencerBridge = ISequencerInbox(bridges[0]);\\n        context.delayedBridge = IBridge(bridges[1]);\\n        context.startMachine = mach;\\n        context.afterMachine = mach.clone();\\n        context.totalMessagesRead = initialMessagesRead;\\n        context.sendAcc = accs[0];\\n        context.logAcc = accs[1];\\n        context.gas = 0;\\n        context.stack = ValueStack(stackCount, stackVals);\\n        context.auxstack = ValueStack(auxstackCount, auxstackVals);\\n        context.hadImmediate = immediate == 1;\\n        context.opcode = opCode;\\n        context.proof = proof;\\n        context.bufProof = bproof;\\n        context.errorOccurred = false;\\n        context.offset = offset;\\n\\n        require(immediate == 0 || immediate == 1, BAD_IMM_TYP);\\n        Value.Data memory cp;\\n        if (immediate == 0) {\\n            cp = Value.newCodePoint(uint8(opCode), context.startMachine.instructionStackHash);\\n        } else {\\n            // If we have an immediate, there must be at least one stack value\\n            require(stackVals.length > 0, NO_IMM);\\n            cp = Value.newCodePoint(\\n                uint8(opCode),\\n                context.startMachine.instructionStackHash,\\n                stackVals[stackCount - 1]\\n            );\\n        }\\n        context.startMachine.instructionStackHash = cp.hash();\\n\\n        // Add the stack and auxstack values to the start machine\\n        uint256 i = 0;\\n        for (i = 0; i < stackCount - immediate; i++) {\\n            context.startMachine.addDataStackValue(stackVals[i]);\\n        }\\n        for (i = 0; i < auxstackCount; i++) {\\n            context.startMachine.addAuxStackValue(auxstackVals[i]);\\n        }\\n\\n        return context;\\n    }\\n\\n    function executeOp(AssertionContext memory context) internal view {\\n        (\\n            uint256 dataPopCount,\\n            uint256 auxPopCount,\\n            uint64 gasCost,\\n            function(AssertionContext memory) internal view impl\\n        ) = opInfo(context.opcode);\\n\\n        // Require the prover to submit the minimal number of stack items\\n        require(\\n            ((dataPopCount > 0 || !context.hadImmediate) && context.stack.length <= dataPopCount) ||\\n                (context.hadImmediate && dataPopCount == 0 && context.stack.length == 1),\\n            STACK_MANY\\n        );\\n        require(context.auxstack.length <= auxPopCount, AUX_MANY);\\n\\n        // Update end machine gas remaining before running opcode\\n        if (context.stack.length < dataPopCount) {\\n            // If we have insufficient values, reject the proof unless the stack has been fully exhausted\\n            require(\\n                context.afterMachine.dataStack.hash() == Value.newEmptyTuple().hash(),\\n                STACK_MISSING\\n            );\\n            deductGas(context, ERROR_GAS_COST);\\n            // If the stack is empty, the instruction underflowed so we have hit an error\\n            handleError(context);\\n        } else if (context.auxstack.length < auxPopCount) {\\n            // If we have insufficient values, reject the proof unless the auxstack has been fully exhausted\\n            require(\\n                context.afterMachine.auxStack.hash() == Value.newEmptyTuple().hash(),\\n                AUX_MISSING\\n            );\\n            deductGas(context, ERROR_GAS_COST);\\n            // If the auxstack is empty, the instruction underflowed so we have hit an error\\n            handleError(context);\\n        } else if (deductGas(context, gasCost)) {\\n            handleError(context);\\n        } else {\\n            impl(context);\\n        }\\n\\n        if (context.errorOccurred) {\\n            if (context.afterMachine.errHandlerHash == CODE_POINT_ERROR) {\\n                context.afterMachine.setErrorStop();\\n            } else {\\n                // Clear error\\n                context.errorOccurred = false;\\n                context.afterMachine.instructionStackHash = context.afterMachine.errHandlerHash;\\n\\n                if (!(context.hadImmediate && dataPopCount == 0)) {\\n                    context.stack.length = 0;\\n                }\\n                context.auxstack.length = 0;\\n            }\\n        }\\n\\n        // Add the stack and auxstack values to the start machine\\n        uint256 i = 0;\\n\\n        for (i = 0; i < context.stack.length; i++) {\\n            context.afterMachine.addDataStackValue(context.stack.values[i]);\\n        }\\n\\n        for (i = 0; i < context.auxstack.length; i++) {\\n            context.afterMachine.addAuxStackValue(context.auxstack.values[i]);\\n        }\\n    }\\n\\n    function opInfo(uint256 opCode)\\n        internal\\n        pure\\n        virtual\\n        returns (\\n            uint256, // stack pops\\n            uint256, // auxstack pops\\n            uint64, // gas used\\n            function(AssertionContext memory) internal view // impl\\n        );\\n}\\n\",\"keccak256\":\"0x39f32565000333f7b8a896810789429779d10de91ac2efaf78d4e6a307481d6b\",\"license\":\"Apache-2.0\"},\"contracts/arch/OneStepProofHash.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./OneStepProofCommon.sol\\\";\\n\\nimport \\\"../libraries/Precompiles.sol\\\";\\n\\n// Originally forked from https://github.com/leapdao/solEVM-enforcer/tree/master\\n\\ncontract OneStepProofHash is OneStepProofCommon {\\n    function executeHashInsn(AssertionContext memory context) internal pure {\\n        Value.Data memory val = popVal(context.stack);\\n        pushVal(context.stack, Value.newInt(uint256(val.hash())));\\n    }\\n\\n    function executeTypeInsn(AssertionContext memory context) internal pure {\\n        Value.Data memory val = popVal(context.stack);\\n        pushVal(context.stack, val.typeCodeVal());\\n    }\\n\\n    function executeEthHash2Insn(AssertionContext memory context) internal pure {\\n        Value.Data memory val1 = popVal(context.stack);\\n        Value.Data memory val2 = popVal(context.stack);\\n        if (!val1.isInt() || !val2.isInt()) {\\n            handleOpcodeError(context);\\n            return;\\n        }\\n        uint256 a = val1.intVal;\\n        uint256 b = val2.intVal;\\n        uint256 c = uint256(keccak256(abi.encodePacked(a, b)));\\n        pushVal(context.stack, Value.newInt(c));\\n    }\\n\\n    function executeKeccakFInsn(AssertionContext memory context) internal pure {\\n        Value.Data memory val = popVal(context.stack);\\n        if (!val.isTuple() || val.tupleVal.length != 7) {\\n            handleOpcodeError(context);\\n            return;\\n        }\\n\\n        Value.Data[] memory values = val.tupleVal;\\n        for (uint256 i = 0; i < 7; i++) {\\n            if (!values[i].isInt()) {\\n                handleOpcodeError(context);\\n                return;\\n            }\\n        }\\n        uint256[25] memory data;\\n        for (uint256 i = 0; i < 25; i++) {\\n            data[5 * (i % 5) + i / 5] = uint256(uint64(values[i / 4].intVal >> ((i % 4) * 64)));\\n        }\\n\\n        data = Precompiles.keccakF(data);\\n\\n        Value.Data[] memory outValues = new Value.Data[](7);\\n        for (uint256 i = 0; i < 7; i++) {\\n            outValues[i] = Value.newInt(0);\\n        }\\n\\n        for (uint256 i = 0; i < 25; i++) {\\n            outValues[i / 4].intVal |= data[5 * (i % 5) + i / 5] << ((i % 4) * 64);\\n        }\\n\\n        pushVal(context.stack, Value.newTuple(outValues));\\n    }\\n\\n    function executeSha256FInsn(AssertionContext memory context) internal pure {\\n        Value.Data memory val1 = popVal(context.stack);\\n        Value.Data memory val2 = popVal(context.stack);\\n        Value.Data memory val3 = popVal(context.stack);\\n        if (!val1.isInt() || !val2.isInt() || !val3.isInt()) {\\n            handleOpcodeError(context);\\n            return;\\n        }\\n        uint256 a = val1.intVal;\\n        uint256 b = val2.intVal;\\n        uint256 c = val3.intVal;\\n\\n        pushVal(context.stack, Value.newInt(Precompiles.sha256Block([b, c], a)));\\n    }\\n\\n    function opInfo(uint256 opCode)\\n        internal\\n        pure\\n        override\\n        returns (\\n            uint256, // stack pops\\n            uint256, // auxstack pops\\n            uint64, // gas used\\n            function(AssertionContext memory) internal view // impl\\n        )\\n    {\\n        if (opCode == OP_HASH) {\\n            return (1, 0, 7, executeHashInsn);\\n        } else if (opCode == OP_TYPE) {\\n            return (1, 0, 3, executeTypeInsn);\\n        } else if (opCode == OP_ETHHASH2) {\\n            return (2, 0, 8, executeEthHash2Insn);\\n        } else if (opCode == OP_KECCAK_F) {\\n            return (1, 0, 600, executeKeccakFInsn);\\n        } else if (opCode == OP_SHA256_F) {\\n            return (3, 0, 250, executeSha256FInsn);\\n        } else {\\n            revert(\\\"use another contract to handle other opcodes\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ea7397a99b274e390deb1da9c2f125e74d23ced198a11a60424370b8450933a\",\"license\":\"Apache-2.0\"},\"contracts/arch/Value.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nlibrary Value {\\n    uint8 internal constant INT_TYPECODE = 0;\\n    uint8 internal constant CODE_POINT_TYPECODE = 1;\\n    uint8 internal constant HASH_PRE_IMAGE_TYPECODE = 2;\\n    uint8 internal constant TUPLE_TYPECODE = 3;\\n    uint8 internal constant BUFFER_TYPECODE = TUPLE_TYPECODE + 9;\\n    // All values received from clients will have type codes less than the VALUE_TYPE_COUNT\\n    uint8 internal constant VALUE_TYPE_COUNT = TUPLE_TYPECODE + 10;\\n\\n    // The following types do not show up in the marshalled format and is\\n    // only used for internal tracking purposes\\n    uint8 internal constant HASH_ONLY = 100;\\n\\n    struct CodePoint {\\n        uint8 opcode;\\n        bytes32 nextCodePoint;\\n        Data[] immediate;\\n    }\\n\\n    struct Data {\\n        uint256 intVal;\\n        CodePoint cpVal;\\n        Data[] tupleVal;\\n        bytes32 bufferHash;\\n        uint8 typeCode;\\n        uint256 size;\\n    }\\n\\n    function tupleTypeCode() internal pure returns (uint8) {\\n        return TUPLE_TYPECODE;\\n    }\\n\\n    function tuplePreImageTypeCode() internal pure returns (uint8) {\\n        return HASH_PRE_IMAGE_TYPECODE;\\n    }\\n\\n    function intTypeCode() internal pure returns (uint8) {\\n        return INT_TYPECODE;\\n    }\\n\\n    function bufferTypeCode() internal pure returns (uint8) {\\n        return BUFFER_TYPECODE;\\n    }\\n\\n    function codePointTypeCode() internal pure returns (uint8) {\\n        return CODE_POINT_TYPECODE;\\n    }\\n\\n    function valueTypeCode() internal pure returns (uint8) {\\n        return VALUE_TYPE_COUNT;\\n    }\\n\\n    function hashOnlyTypeCode() internal pure returns (uint8) {\\n        return HASH_ONLY;\\n    }\\n\\n    function isValidTupleSize(uint256 size) internal pure returns (bool) {\\n        return size <= 8;\\n    }\\n\\n    function typeCodeVal(Data memory val) internal pure returns (Data memory) {\\n        if (val.typeCode == 2) {\\n            // Map HashPreImage to Tuple\\n            return newInt(TUPLE_TYPECODE);\\n        }\\n        return newInt(val.typeCode);\\n    }\\n\\n    function valLength(Data memory val) internal pure returns (uint8) {\\n        if (val.typeCode == TUPLE_TYPECODE) {\\n            return uint8(val.tupleVal.length);\\n        } else {\\n            return 1;\\n        }\\n    }\\n\\n    function isInt(Data memory val) internal pure returns (bool) {\\n        return val.typeCode == INT_TYPECODE;\\n    }\\n\\n    function isInt64(Data memory val) internal pure returns (bool) {\\n        return val.typeCode == INT_TYPECODE && val.intVal < (1 << 64);\\n    }\\n\\n    function isCodePoint(Data memory val) internal pure returns (bool) {\\n        return val.typeCode == CODE_POINT_TYPECODE;\\n    }\\n\\n    function isTuple(Data memory val) internal pure returns (bool) {\\n        return val.typeCode == TUPLE_TYPECODE;\\n    }\\n\\n    function isBuffer(Data memory val) internal pure returns (bool) {\\n        return val.typeCode == BUFFER_TYPECODE;\\n    }\\n\\n    function newEmptyTuple() internal pure returns (Data memory) {\\n        return newTuple(new Data[](0));\\n    }\\n\\n    function newBoolean(bool val) internal pure returns (Data memory) {\\n        if (val) {\\n            return newInt(1);\\n        } else {\\n            return newInt(0);\\n        }\\n    }\\n\\n    function newInt(uint256 _val) internal pure returns (Data memory) {\\n        return\\n            Data(_val, CodePoint(0, 0, new Data[](0)), new Data[](0), 0, INT_TYPECODE, uint256(1));\\n    }\\n\\n    function newHashedValue(bytes32 valueHash, uint256 valueSize)\\n        internal\\n        pure\\n        returns (Data memory)\\n    {\\n        return\\n            Data(\\n                uint256(valueHash),\\n                CodePoint(0, 0, new Data[](0)),\\n                new Data[](0),\\n                0,\\n                HASH_ONLY,\\n                valueSize\\n            );\\n    }\\n\\n    function newTuple(Data[] memory _val) internal pure returns (Data memory) {\\n        require(isValidTupleSize(_val.length), \\\"Tuple must have valid size\\\");\\n        uint256 size = 1;\\n\\n        for (uint256 i = 0; i < _val.length; i++) {\\n            size += _val[i].size;\\n        }\\n\\n        return Data(0, CodePoint(0, 0, new Data[](0)), _val, 0, TUPLE_TYPECODE, size);\\n    }\\n\\n    function newTuplePreImage(bytes32 preImageHash, uint256 size)\\n        internal\\n        pure\\n        returns (Data memory)\\n    {\\n        return\\n            Data(\\n                uint256(preImageHash),\\n                CodePoint(0, 0, new Data[](0)),\\n                new Data[](0),\\n                0,\\n                HASH_PRE_IMAGE_TYPECODE,\\n                size\\n            );\\n    }\\n\\n    function newCodePoint(uint8 opCode, bytes32 nextHash) internal pure returns (Data memory) {\\n        return newCodePoint(CodePoint(opCode, nextHash, new Data[](0)));\\n    }\\n\\n    function newCodePoint(\\n        uint8 opCode,\\n        bytes32 nextHash,\\n        Data memory immediate\\n    ) internal pure returns (Data memory) {\\n        Data[] memory imm = new Data[](1);\\n        imm[0] = immediate;\\n        return newCodePoint(CodePoint(opCode, nextHash, imm));\\n    }\\n\\n    function newCodePoint(CodePoint memory _val) private pure returns (Data memory) {\\n        return Data(0, _val, new Data[](0), 0, CODE_POINT_TYPECODE, uint256(1));\\n    }\\n\\n    function newBuffer(bytes32 bufHash) internal pure returns (Data memory) {\\n        return\\n            Data(\\n                uint256(0),\\n                CodePoint(0, 0, new Data[](0)),\\n                new Data[](0),\\n                bufHash,\\n                BUFFER_TYPECODE,\\n                uint256(1)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x942c53ec15cf5b85cdf62cd8781f89d9981a489126cca1be44bc526fff865765\",\"license\":\"Apache-2.0\"},\"contracts/bridge/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    );\\n\\n    event BridgeCallTriggered(\\n        address indexed outbox,\\n        address indexed destAddr,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    event InboxToggle(address indexed inbox, bool enabled);\\n\\n    event OutboxToggle(address indexed outbox, bool enabled);\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5a30299074a31b02824bdf7fe779c8baed4385a0a340c8294de6669a2c77d478\",\"license\":\"Apache-2.0\"},\"contracts/bridge/interfaces/ISequencerInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface ISequencerInbox {\\n    event SequencerBatchDelivered(\\n        uint256 indexed firstMessageNum,\\n        bytes32 indexed beforeAcc,\\n        uint256 newMessageCount,\\n        bytes32 afterAcc,\\n        bytes transactions,\\n        uint256[] lengths,\\n        uint256[] sectionsMetadata,\\n        uint256 seqBatchIndex,\\n        address sequencer\\n    );\\n\\n    event SequencerBatchDeliveredFromOrigin(\\n        uint256 indexed firstMessageNum,\\n        bytes32 indexed beforeAcc,\\n        uint256 newMessageCount,\\n        bytes32 afterAcc,\\n        uint256 seqBatchIndex\\n    );\\n\\n    event DelayedInboxForced(\\n        uint256 indexed firstMessageNum,\\n        bytes32 indexed beforeAcc,\\n        uint256 newMessageCount,\\n        uint256 totalDelayedMessagesRead,\\n        bytes32[2] afterAccAndDelayed,\\n        uint256 seqBatchIndex\\n    );\\n\\n    /// @notice DEPRECATED - look at IsSequencerUpdated for new updates\\n    // event SequencerAddressUpdated(address newAddress);\\n\\n    event IsSequencerUpdated(address addr, bool isSequencer);\\n    event MaxDelayUpdated(uint256 newMaxDelayBlocks, uint256 newMaxDelaySeconds);\\n\\n    /// @notice DEPRECATED - look at MaxDelayUpdated for new updates\\n    // event MaxDelayBlocksUpdated(uint256 newValue);\\n    /// @notice DEPRECATED - look at MaxDelayUpdated for new updates\\n    // event MaxDelaySecondsUpdated(uint256 newValue);\\n\\n    function setMaxDelay(uint256 newMaxDelayBlocks, uint256 newMaxDelaySeconds) external;\\n\\n    function setIsSequencer(address addr, bool isSequencer) external;\\n\\n    function messageCount() external view returns (uint256);\\n\\n    function maxDelayBlocks() external view returns (uint256);\\n\\n    function maxDelaySeconds() external view returns (uint256);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function getInboxAccsLength() external view returns (uint256);\\n\\n    function proveInboxContainsMessage(bytes calldata proof, uint256 inboxCount)\\n        external\\n        view\\n        returns (uint256, bytes32);\\n\\n    /// @notice DEPRECATED - use isSequencer instead\\n    function sequencer() external view returns (address);\\n\\n    function isSequencer(address seq) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7bd1af4a70730841feaa73e6113f14048e3bb2edf168cb4e96083d5432a98688\",\"license\":\"Apache-2.0\"},\"contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\n\\npragma solidity ^0.6.11;\\n\\n/* solhint-disable no-inline-assembly */\\nlibrary BytesLib {\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= (_start + 20), \\\"Read out of bounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= (_start + 1), \\\"Read out of bounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= (_start + 32), \\\"Read out of bounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= (_start + 32), \\\"Read out of bounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n}\\n/* solhint-enable no-inline-assembly */\\n\",\"keccak256\":\"0x2c697f7497d4863ef204af621dfebc9d71ee1203e76c3939194b9d7c17b1bcc4\",\"license\":\"MIT\"},\"contracts/libraries/DebugPrint.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nlibrary DebugPrint {\\n    function char(bytes1 b) private pure returns (bytes1 c) {\\n        if (uint8(b) < 10) {\\n            return bytes1(uint8(b) + 0x30);\\n        } else {\\n            return bytes1(uint8(b) + 0x57);\\n        }\\n    }\\n\\n    function bytes32string(bytes32 b32) internal pure returns (string memory out) {\\n        bytes memory s = new bytes(64);\\n\\n        for (uint256 i = 0; i < 32; i++) {\\n            bytes1 b = bytes1(b32[i]);\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[i * 2] = char(hi);\\n            s[i * 2 + 1] = char(lo);\\n        }\\n\\n        out = string(s);\\n    }\\n\\n    // Taken from https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\\n    function uint2str(uint256 _iParam) internal pure returns (string memory _uintAsString) {\\n        uint256 _i = _iParam;\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0x79e1b1272293e349d728c15a5c3fda451dfda17832cf747f996f86b259a1a0d4\",\"license\":\"Apache-2.0\"},\"contracts/libraries/Precompiles.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\n///      This algorithm has been extracted from the implementation of smart pool (https://github.com/smartpool)\\nlibrary Precompiles {\\n    function keccakF(uint256[25] memory a) internal pure returns (uint256[25] memory) {\\n        uint256[5] memory c;\\n        uint256[5] memory d;\\n        //uint D_0; uint D_1; uint D_2; uint D_3; uint D_4;\\n        uint256[25] memory b;\\n\\n        uint256[24] memory rc = [\\n            uint256(0x0000000000000001),\\n            0x0000000000008082,\\n            0x800000000000808A,\\n            0x8000000080008000,\\n            0x000000000000808B,\\n            0x0000000080000001,\\n            0x8000000080008081,\\n            0x8000000000008009,\\n            0x000000000000008A,\\n            0x0000000000000088,\\n            0x0000000080008009,\\n            0x000000008000000A,\\n            0x000000008000808B,\\n            0x800000000000008B,\\n            0x8000000000008089,\\n            0x8000000000008003,\\n            0x8000000000008002,\\n            0x8000000000000080,\\n            0x000000000000800A,\\n            0x800000008000000A,\\n            0x8000000080008081,\\n            0x8000000000008080,\\n            0x0000000080000001,\\n            0x8000000080008008\\n        ];\\n\\n        for (uint256 i = 0; i < 24; i++) {\\n            /*\\n            for( x = 0 ; x < 5 ; x++ ) {\\n                C[x] = A[5*x]^A[5*x+1]^A[5*x+2]^A[5*x+3]^A[5*x+4];\\n            }*/\\n\\n            c[0] = a[0] ^ a[1] ^ a[2] ^ a[3] ^ a[4];\\n            c[1] = a[5] ^ a[6] ^ a[7] ^ a[8] ^ a[9];\\n            c[2] = a[10] ^ a[11] ^ a[12] ^ a[13] ^ a[14];\\n            c[3] = a[15] ^ a[16] ^ a[17] ^ a[18] ^ a[19];\\n            c[4] = a[20] ^ a[21] ^ a[22] ^ a[23] ^ a[24];\\n\\n            /*\\n            for( x = 0 ; x < 5 ; x++ ) {\\n                D[x] = C[(x+4)%5]^((C[(x+1)%5] * 2)&0xffffffffffffffff | (C[(x+1)%5]/(2**63)));\\n            }*/\\n\\n            d[0] = c[4] ^ (((c[1] * 2) & 0xffffffffffffffff) | (c[1] / (2**63)));\\n            d[1] = c[0] ^ (((c[2] * 2) & 0xffffffffffffffff) | (c[2] / (2**63)));\\n            d[2] = c[1] ^ (((c[3] * 2) & 0xffffffffffffffff) | (c[3] / (2**63)));\\n            d[3] = c[2] ^ (((c[4] * 2) & 0xffffffffffffffff) | (c[4] / (2**63)));\\n            d[4] = c[3] ^ (((c[0] * 2) & 0xffffffffffffffff) | (c[0] / (2**63)));\\n\\n            /*\\n            for( x = 0 ; x < 5 ; x++ ) {\\n                for( y = 0 ; y < 5 ; y++ ) {\\n                    A[5*x+y] = A[5*x+y] ^ D[x];\\n                }\\n            }*/\\n\\n            a[0] = a[0] ^ d[0];\\n            a[1] = a[1] ^ d[0];\\n            a[2] = a[2] ^ d[0];\\n            a[3] = a[3] ^ d[0];\\n            a[4] = a[4] ^ d[0];\\n            a[5] = a[5] ^ d[1];\\n            a[6] = a[6] ^ d[1];\\n            a[7] = a[7] ^ d[1];\\n            a[8] = a[8] ^ d[1];\\n            a[9] = a[9] ^ d[1];\\n            a[10] = a[10] ^ d[2];\\n            a[11] = a[11] ^ d[2];\\n            a[12] = a[12] ^ d[2];\\n            a[13] = a[13] ^ d[2];\\n            a[14] = a[14] ^ d[2];\\n            a[15] = a[15] ^ d[3];\\n            a[16] = a[16] ^ d[3];\\n            a[17] = a[17] ^ d[3];\\n            a[18] = a[18] ^ d[3];\\n            a[19] = a[19] ^ d[3];\\n            a[20] = a[20] ^ d[4];\\n            a[21] = a[21] ^ d[4];\\n            a[22] = a[22] ^ d[4];\\n            a[23] = a[23] ^ d[4];\\n            a[24] = a[24] ^ d[4];\\n\\n            /*Rho and pi steps*/\\n            b[0] = a[0];\\n            b[8] = (((a[1] * (2**36)) & 0xffffffffffffffff) | (a[1] / (2**28)));\\n            b[11] = (((a[2] * (2**3)) & 0xffffffffffffffff) | (a[2] / (2**61)));\\n            b[19] = (((a[3] * (2**41)) & 0xffffffffffffffff) | (a[3] / (2**23)));\\n            b[22] = (((a[4] * (2**18)) & 0xffffffffffffffff) | (a[4] / (2**46)));\\n            b[2] = (((a[5] * (2**1)) & 0xffffffffffffffff) | (a[5] / (2**63)));\\n            b[5] = (((a[6] * (2**44)) & 0xffffffffffffffff) | (a[6] / (2**20)));\\n            b[13] = (((a[7] * (2**10)) & 0xffffffffffffffff) | (a[7] / (2**54)));\\n            b[16] = (((a[8] * (2**45)) & 0xffffffffffffffff) | (a[8] / (2**19)));\\n            b[24] = (((a[9] * (2**2)) & 0xffffffffffffffff) | (a[9] / (2**62)));\\n            b[4] = (((a[10] * (2**62)) & 0xffffffffffffffff) | (a[10] / (2**2)));\\n            b[7] = (((a[11] * (2**6)) & 0xffffffffffffffff) | (a[11] / (2**58)));\\n            b[10] = (((a[12] * (2**43)) & 0xffffffffffffffff) | (a[12] / (2**21)));\\n            b[18] = (((a[13] * (2**15)) & 0xffffffffffffffff) | (a[13] / (2**49)));\\n            b[21] = (((a[14] * (2**61)) & 0xffffffffffffffff) | (a[14] / (2**3)));\\n            b[1] = (((a[15] * (2**28)) & 0xffffffffffffffff) | (a[15] / (2**36)));\\n            b[9] = (((a[16] * (2**55)) & 0xffffffffffffffff) | (a[16] / (2**9)));\\n            b[12] = (((a[17] * (2**25)) & 0xffffffffffffffff) | (a[17] / (2**39)));\\n            b[15] = (((a[18] * (2**21)) & 0xffffffffffffffff) | (a[18] / (2**43)));\\n            b[23] = (((a[19] * (2**56)) & 0xffffffffffffffff) | (a[19] / (2**8)));\\n            b[3] = (((a[20] * (2**27)) & 0xffffffffffffffff) | (a[20] / (2**37)));\\n            b[6] = (((a[21] * (2**20)) & 0xffffffffffffffff) | (a[21] / (2**44)));\\n            b[14] = (((a[22] * (2**39)) & 0xffffffffffffffff) | (a[22] / (2**25)));\\n            b[17] = (((a[23] * (2**8)) & 0xffffffffffffffff) | (a[23] / (2**56)));\\n            b[20] = (((a[24] * (2**14)) & 0xffffffffffffffff) | (a[24] / (2**50)));\\n\\n            /*Xi state*/\\n            /*\\n            for( x = 0 ; x < 5 ; x++ ) {\\n                for( y = 0 ; y < 5 ; y++ ) {\\n                    A[5*x+y] = B[5*x+y]^((~B[5*((x+1)%5)+y]) & B[5*((x+2)%5)+y]);\\n                }\\n            }*/\\n\\n            a[0] = b[0] ^ ((~b[5]) & b[10]);\\n            a[1] = b[1] ^ ((~b[6]) & b[11]);\\n            a[2] = b[2] ^ ((~b[7]) & b[12]);\\n            a[3] = b[3] ^ ((~b[8]) & b[13]);\\n            a[4] = b[4] ^ ((~b[9]) & b[14]);\\n            a[5] = b[5] ^ ((~b[10]) & b[15]);\\n            a[6] = b[6] ^ ((~b[11]) & b[16]);\\n            a[7] = b[7] ^ ((~b[12]) & b[17]);\\n            a[8] = b[8] ^ ((~b[13]) & b[18]);\\n            a[9] = b[9] ^ ((~b[14]) & b[19]);\\n            a[10] = b[10] ^ ((~b[15]) & b[20]);\\n            a[11] = b[11] ^ ((~b[16]) & b[21]);\\n            a[12] = b[12] ^ ((~b[17]) & b[22]);\\n            a[13] = b[13] ^ ((~b[18]) & b[23]);\\n            a[14] = b[14] ^ ((~b[19]) & b[24]);\\n            a[15] = b[15] ^ ((~b[20]) & b[0]);\\n            a[16] = b[16] ^ ((~b[21]) & b[1]);\\n            a[17] = b[17] ^ ((~b[22]) & b[2]);\\n            a[18] = b[18] ^ ((~b[23]) & b[3]);\\n            a[19] = b[19] ^ ((~b[24]) & b[4]);\\n            a[20] = b[20] ^ ((~b[0]) & b[5]);\\n            a[21] = b[21] ^ ((~b[1]) & b[6]);\\n            a[22] = b[22] ^ ((~b[2]) & b[7]);\\n            a[23] = b[23] ^ ((~b[3]) & b[8]);\\n            a[24] = b[24] ^ ((~b[4]) & b[9]);\\n\\n            /*Last step*/\\n            a[0] = a[0] ^ rc[i];\\n        }\\n\\n        return a;\\n    }\\n\\n    function rightRotate(uint32 x, uint32 n) internal pure returns (uint32) {\\n        return ((x) >> (n)) | ((x) << (32 - (n)));\\n    }\\n\\n    function ch(\\n        uint32 e,\\n        uint32 f,\\n        uint32 g\\n    ) internal pure returns (uint32) {\\n        return ((e & f) ^ ((~e) & g));\\n    }\\n\\n    // SHA256 compression function that operates on a 512 bit chunk\\n    // Note that the input must be padded by the caller\\n    // For the initial chunk, the initial values from the SHA256 spec should be passed in as hashState\\n    // For subsequent rounds, hashState is the output from the previous round\\n    function sha256Block(uint256[2] memory inputChunk, uint256 hashState)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint32[64] memory k = [\\n            0x428a2f98,\\n            0x71374491,\\n            0xb5c0fbcf,\\n            0xe9b5dba5,\\n            0x3956c25b,\\n            0x59f111f1,\\n            0x923f82a4,\\n            0xab1c5ed5,\\n            0xd807aa98,\\n            0x12835b01,\\n            0x243185be,\\n            0x550c7dc3,\\n            0x72be5d74,\\n            0x80deb1fe,\\n            0x9bdc06a7,\\n            0xc19bf174,\\n            0xe49b69c1,\\n            0xefbe4786,\\n            0x0fc19dc6,\\n            0x240ca1cc,\\n            0x2de92c6f,\\n            0x4a7484aa,\\n            0x5cb0a9dc,\\n            0x76f988da,\\n            0x983e5152,\\n            0xa831c66d,\\n            0xb00327c8,\\n            0xbf597fc7,\\n            0xc6e00bf3,\\n            0xd5a79147,\\n            0x06ca6351,\\n            0x14292967,\\n            0x27b70a85,\\n            0x2e1b2138,\\n            0x4d2c6dfc,\\n            0x53380d13,\\n            0x650a7354,\\n            0x766a0abb,\\n            0x81c2c92e,\\n            0x92722c85,\\n            0xa2bfe8a1,\\n            0xa81a664b,\\n            0xc24b8b70,\\n            0xc76c51a3,\\n            0xd192e819,\\n            0xd6990624,\\n            0xf40e3585,\\n            0x106aa070,\\n            0x19a4c116,\\n            0x1e376c08,\\n            0x2748774c,\\n            0x34b0bcb5,\\n            0x391c0cb3,\\n            0x4ed8aa4a,\\n            0x5b9cca4f,\\n            0x682e6ff3,\\n            0x748f82ee,\\n            0x78a5636f,\\n            0x84c87814,\\n            0x8cc70208,\\n            0x90befffa,\\n            0xa4506ceb,\\n            0xbef9a3f7,\\n            0xc67178f2\\n        ];\\n\\n        uint32[64] memory w;\\n        uint32 i;\\n        for (i = 0; i < 8; i++) {\\n            w[i] = uint32(inputChunk[0] >> (224 - (32 * i)));\\n            w[i + 8] = uint32(inputChunk[1] >> (224 - (32 * i)));\\n        }\\n\\n        uint32 s0;\\n        uint32 s1;\\n        for (i = 16; i < 64; i++) {\\n            s0 = rightRotate(w[i - 15], 7) ^ rightRotate(w[i - 15], 18) ^ (w[i - 15] >> 3);\\n\\n            s1 = rightRotate(w[i - 2], 17) ^ rightRotate(w[i - 2], 19) ^ (w[i - 2] >> 10);\\n            w[i] = w[i - 16] + s0 + w[i - 7] + s1;\\n        }\\n\\n        uint32[8] memory state;\\n\\n        for (i = 0; i < 8; i++) {\\n            state[i] = uint32(hashState >> (224 - (32 * i)));\\n        }\\n\\n        uint32 temp1;\\n        uint32 temp2;\\n        uint32 maj;\\n\\n        for (i = 0; i < 64; i++) {\\n            s1 = rightRotate(state[4], 6) ^ rightRotate(state[4], 11) ^ rightRotate(state[4], 25);\\n            temp1 = state[7] + s1 + ch(state[4], state[5], state[6]) + k[i] + w[i];\\n            s0 = rightRotate(state[0], 2) ^ rightRotate(state[0], 13) ^ rightRotate(state[0], 22);\\n\\n            maj = (state[0] & (state[1] ^ state[2])) ^ (state[1] & state[2]);\\n            temp2 = s0 + maj;\\n\\n            state[7] = state[6];\\n            state[6] = state[5];\\n            state[5] = state[4];\\n            state[4] = state[3] + temp1;\\n            state[3] = state[2];\\n            state[2] = state[1];\\n            state[1] = state[0];\\n            state[0] = temp1 + temp2;\\n        }\\n\\n        for (i = 0; i < 8; i++) {\\n            state[i] += uint32(hashState >> (224 - (32 * i)));\\n        }\\n\\n        uint256 result;\\n\\n        for (i = 0; i < 8; i++) {\\n            result |= (uint256(state[i]) << (224 - (32 * i)));\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xefcd0ee8a8823ed14699dbdfb39496336f4380de3debc6d01f8a57f1354e8cda\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613f33806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806347dda1d61461003b578063eba67f6e14610157575b600080fd5b610107600480360360e081101561005157600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460018302840111600160201b831117156100ac57600080fd5b919390929091602081019035600160201b8111156100c957600080fd5b8201836020820111156100db57600080fd5b803590602001918460018302840111600160201b831117156100fc57600080fd5b509092509050610301565b604080516001600160401b03851681526020810184905290810182608080838360005b8381101561014257818101518382015260200161012a565b50505050905001935050505060405180910390f35b610223600480360360e081101561016d57600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561019557600080fd5b8201836020820111156101a757600080fd5b803590602001918460018302840111600160201b831117156101c857600080fd5b919390929091602081019035600160201b8111156101e557600080fd5b8201836020820111156101f757600080fd5b803590602001918460018302840111600160201b8311171561021857600080fd5b5090925090506103c0565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561026457818101518382015260200161024c565b50505050905090810190601f1680156102915780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156102c45781810151838201526020016102ac565b50505050905090810190601f1680156102f15780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b60008061030c613cb1565b610314613ccf565b6103988a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b9081908401838280828437600081840152601f19601f820116905080830192505050505050508f610485565b90506103a38161093c565b6103ac81610d52565b935093509350509750975097945050505050565b6060806103cb613ccf565b61044f898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a9081908401838280828437600081840152601f19601f820116905080830192505050505050508e610485565b905061045a8161093c565b6104678160400151610db5565b92506104768160600151610db5565b91505097509795505050505050565b61048d613ccf565b60008460008151811061049c57fe5b602001015160f81c60f81b60f81c90506000856001815181106104bb57fe5b602001015160f81c60f81b60f81c90506000866002815181106104da57fe5b016020015160f81c9050600360606004840160ff166001600160401b038111801561050457600080fd5b5060405190808252806020026020018201604052801561053e57816020015b61052b613d61565b8152602001906001900390816105235790505b50905060608360040160ff166001600160401b038111801561055f57600080fd5b5060405190808252806020026020018201604052801561059957816020015b610586613d61565b81526020019060019003908161057e5790505b50905060005b8560ff168110156105d5576105b48b856110c1565b8483815181106105c057fe5b6020908102919091010152935060010161059f565b5060005b8460ff1681101561060f576105ee8b856110c1565b8383815181106105fa57fe5b602090810291909101015293506001016105d9565b50610618613d9e565b6106228b85611283565b809250819550505060008b858151811061063857fe5b01602001516001959095019460f81c9050610651613ccf565b6001600160a01b038b35811682526020808d0135909116908201526040810183905261067c83611323565b6060820152608081018f90528d3560a08201526020808f013560c0830152600060e0830181905260408051808201825260ff8c811682528185018a905261010086019190915281518083019092528a8116825292810187905261012084015283821660018114610140850152918b1661016084015261018083018f90526101c083018e90526101e08301526101a08201879052158061071e57508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906107cb5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610790578181015183820152602001610778565b50505050905090810190601f1680156107bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506107d4613d61565b60ff83166107f5576107ee8a83604001516000015161138c565b9050610895565b6000865111604051806040016040528060068152602001654e4f5f494d4d60d01b815250906108655760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b506108928a8360400151600001518860018d0360ff168151811061088557fe5b60200260200101516113f0565b90505b61089e81611474565b60408301515260005b838a0360ff168110156108e6576108de8782815181106108c357fe5b602002602001015184604001516115e190919063ffffffff16565b6001016108a7565b5060005b8860ff168110156109275761091f86828151811061090457fe5b602002602001015184604001516115fb90919063ffffffff16565b6001016108ea565b50909f9e505050505050505050505050505050565b6000806000613dfc61095585610160015160ff16611615565b9350935093509350600084118061096f5750846101400151155b80156109815750610100850151518410155b806109a957508461014001518015610997575083155b80156109a95750610100850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610a185760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b50610120850151516040805180820190915260088152674155585f4d414e5960c01b602082015290841015610a8e5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b5061010085015151841115610b4c57610aad610aa86116f1565b611474565b610abe866060015160200151611474565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b81525090610b315760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b50610b3d856005611738565b50610b47856117ad565b610c0c565b61012085015151831115610be757610b65610aa86116f1565b610b76866060015160400151611474565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b81525090610b315760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b610bf18583611738565b15610bff57610b47856117ad565b610c0c858263ffffffff16565b846101e0015115610cb15760408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051910120606086015160c001511415610c7357610c6e85606001516117b8565b610cb1565b60006101e0860152606085015160c081015190526101408501518015610c97575083155b610ca657610100850151600090525b610120850151600090525b60005b61010086015151811015610cfd57610cf5866101000151602001518281518110610cda57fe5b602002602001015187606001516115e190919063ffffffff16565b600101610cb4565b5060005b61012086015151811015610d4a57610d42866101200151602001518281518110610d2757fe5b602002602001015187606001516115fb90919063ffffffff16565b600101610d01565b505050505050565b600080610d5d613cb1565b8360e0015184608001516040518060800160405280610d7f88604001516117c2565b8152602001610d9188606001516117c2565b81526020018760a0015181526020018760c001518152509250925092509193909250565b6060610dc48260000151611886565b610dd9610dd48460200151611474565b611886565b610de9610dd48560400151611474565b610df9610dd48660600151611474565b610e09610dd48760800151611474565b610e168760a00151611955565b610e238860c00151611886565b60405160200180806709ac2c6d0d2dcca560c31b81525060080188805190602001908083835b60208310610e685780518252601f199092019160209182019101610e49565b51815160209384036101000a60001901801990921691161790526216100560e91b9190930190815289516003909101928a0191508083835b60208310610ebf5780518252601f199092019160209182019101610ea0565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528851600390910192890191508083835b60208310610f165780518252601f199092019160209182019101610ef7565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528751600390910192880191508083835b60208310610f6d5780518252601f199092019160209182019101610f4e565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528651600390910192870191508083835b60208310610fc45780518252601f199092019160209182019101610fa5565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528551600390910192860191508083835b6020831061101b5780518252601f199092019160209182019101610ffc565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528451600390910192850191508083835b602083106110725780518252601f199092019160209182019101611053565b6001836020036101000a0380198251168184511680821785525050505050509050018061148560f11b81525060020197505050505050505060405160208183030381529060405290505b919050565b60006110cb613d61565b83518310611111576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b60008061111e8686611a2f565b9150915061112a611a56565b60ff168160ff16141561115e5760006111438784611a5b565b90935090508261115282611acf565b9450945050505061127c565b611166611b8f565b60ff168160ff1614156111885761117d8683611b94565b93509350505061127c565b611190611c36565b60ff168160ff1614156111b85760006111a98784611a5b565b90935090508261115282611c3b565b6111c0611d27565b60ff168160ff1614156111d75761117d8683611d2c565b6111df611dc1565b60ff168160ff161015801561120057506111f7611dc6565b60ff168160ff16105b1561123c57600061120f611dc1565b820390506060611220828986611dcb565b90945090508361122f82611e73565b955095505050505061127c565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b600061128d613d9e565b611295613d9e565b600060e08201819052806112a98787611a5b565b90965091506112b88787611d2c565b602085015295506112c98787611d2c565b604085015295506112da87876110c1565b606085015295506112eb87876110c1565b608085015295506112fc8787611a5b565b60a0850152955061130d8787611a5b565b92845260c0840192909252509590945092505050565b61132b613d9e565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b611394613d61565b6040805160608101825260ff8516815260208082018590528251600080825291810184526113e7938301916113df565b6113cc613d61565b8152602001906001900390816113c45790505b509052611fb4565b90505b92915050565b6113f8613d61565b604080516001808252818301909252606091816020015b611417613d61565b81526020019060019003908161140f579050509050828160008151811061143a57fe5b602002602001018190525061146b60405180606001604052808760ff16815260200186815260200183815250611fb4565b95945050505050565b600061147e611a56565b60ff16826080015160ff1614156114a157815161149a90612044565b90506110bc565b6114a9611b8f565b60ff16826080015160ff1614156114c75761149a8260200151612068565b6114cf611d27565b60ff16826080015160ff1614156114f157815160a083015161149a9190612165565b6114f9611dc1565b60ff16826080015160ff16141561153257611512613d61565b61151f83604001516121b6565b905061152a81611474565b9150506110bc565b61153a61232e565b60ff16826080015160ff161415611553575080516110bc565b61155b611c36565b60ff16826080015160ff1614156115a0575060608082015160408051607b602080830191909152818301939093528151808203830181529301905281519101206110bc565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b6115ef826020015182612333565b82602001819052505050565b611609826040015182612333565b82604001819052505050565b60008080613dfc602085141561163a57506001925060009150600790506123b16116ea565b602185141561165857506001925060009150600390506123ec6116ea565b602285141561167657506002925060009150600890506124166116ea565b60238514156116955750600192506000915061025890506124b86116ea565b60248514156116b35750600392506000915060fa90506126a46116ea565b60405162461bcd60e51b815260040180806020018281038252602c815260200180613ed2602c913960400191505060405180910390fd5b9193509193565b6116f9613d61565b604080516000808252602082019092526117339161172d565b61171a613d61565b8152602001906001900390816117125790505b50611e73565b905090565b6000816001600160401b0316836060015160a00151101561177d575060e0820180516005016001600160401b03169052606082015160001960a09091015260016113ea565b5060e0820180516001600160401b039083018116909152606083015160a0018051918316909103905260006113ea565b60016101e090910152565b600160e090910152565b600060028260e0015114156117d9575060006110bc565b60018260e0015114156117ee575060016110bc565b815160208301516117fe90611474565b61180b8460400151611474565b6118188560600151611474565b6118258660800151611474565b8660a001518760c00151604051602001808881526020018781526020018681526020018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040528051906020012090506110bc565b60408051818152606081810183529182919060208201818036833701905050905060005b602081101561194e5760008482602081106118c157fe5b1a60f881811b9250601080830480831b9360ff9091169091029003901b6118e782612762565b8585600202815181106118f657fe5b60200101906001600160f81b031916908160001a90535061191681612762565b85856002026001018151811061192857fe5b60200101906001600160f81b031916908160001a90535050600190920191506118aa9050565b5092915050565b6060818061197c5750506040805180820190915260018152600360fc1b60208201526110bc565b8060005b811561199457600101600a82049150611980565b6060816001600160401b03811180156119ac57600080fd5b506040519080825280601f01601f1916602001820160405280156119d7576020820181803683370190505b50905060001982015b8415611a2557600a850660300160f81b82828060019003935081518110611a0357fe5b60200101906001600160f81b031916908160001a905350600a850494506119e0565b5095945050505050565b60008082600101848481518110611a4257fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015611a73575060208385510310155b611ab0576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301611ac4858563ffffffff61279316565b915091509250929050565b611ad7613d61565b6040805160c0810182528381528151606081018352600080825260208083018290528451828152808201865293949085019390830191611b2d565b611b1a613d61565b815260200190600190039081611b125790505b50905281526020016000604051908082528060200260200182016040528015611b7057816020015b611b5d613d61565b815260200190600190039081611b555790505b5081526000602082018190526040820152600160609091015292915050565b600190565b6000611b9e613d61565b82600080611baa613d61565b6000611bb68986611a2f565b9095509350611bc58986611a2f565b9095509250600160ff85161415611be657611be089866110c1565b90955091505b611bf089866127ec565b9095509050600160ff85161415611c1b5784611c0d8483856113f0565b96509650505050505061127c565b84611c26848361138c565b9650965050505050509250929050565b600c90565b611c43613d61565b6040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b0381118015611c8a57600080fd5b50604051908082528060200260200182016040528015611cc457816020015b611cb1613d61565b815260200190600190039081611ca95790505b50905281526020016000604051908082528060200260200182016040528015611d0757816020015b611cf4613d61565b815260200190600190039081611cec5790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b6000611d36613d61565b82845110158015611d4b575060408385510310155b611d88576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b600080611d9586866127ec565b9094509150611da48685611a5b565b909450905083611db48383612803565b9350935050509250929050565b600390565b600d90565b60006060828160ff87166001600160401b0381118015611dea57600080fd5b50604051908082528060200260200182016040528015611e2457816020015b611e11613d61565b815260200190600190039081611e095790505b50905060005b8760ff168160ff161015611e6657611e4287846110c1565b838360ff1681518110611e5157fe5b60209081029190910101529250600101611e2a565b5090969095509350505050565b611e7b613d61565b611e8582516128c2565b611ed6576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611f0d57838181518110611ef057fe5b602002602001015160a00151820191508080600101915050611edb565b506040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b0381118015611f5557600080fd5b50604051908082528060200260200182016040528015611f8f57816020015b611f7c613d61565b815260200190600190039081611f745790505b5090528152602081019490945260006040850152600360608501526080909301525090565b611fbc613d61565b6040518060c001604052806000815260200183815260200160006001600160401b0381118015611feb57600080fd5b5060405190808252806020026020018201604052801561202557816020015b612012613d61565b81526020019060019003908161200a5790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b600060028260400151511061207957fe5b6040820151516120de5761208b611b8f565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b9093166021850152602280850191909152825180850390910181526042909301909152815191012090506110bc565b6120e6611b8f565b826000015161210c84604001516000815181106120ff57fe5b6020026020010151611474565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b600061216f611dc1565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b6121be613d61565b60088251111561220c576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b606082516001600160401b038111801561222557600080fd5b5060405190808252806020026020018201604052801561224f578160200160208202803683370190505b508051909150600160005b828110156122b2576122718682815181106120ff57fe5b84828151811061227d57fe5b60200260200101818152505085818151811061229557fe5b602002602001015160a0015182019150808060010191505061225a565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b838110156122f75781810151838201526020016122df565b50505050905001925050506040516020818303038152906040528051906020012090506123248183612803565b9695505050505050565b606490565b61233b613d61565b6040805160028082526060828101909352816020015b612359613d61565b815260200190600190039081612351579050509050828160008151811061237c57fe5b6020026020010181905250838160018151811061239557fe5b60200260200101819052506123a9816121b6565b949350505050565b6123b9613d61565b6123c78261010001516128c9565b90506123e88261010001516123e36123de84611474565b611acf565b61290b565b5050565b6123f4613d61565b6124028261010001516128c9565b90506123e88261010001516123e383612935565b61241e613d61565b61242c8261010001516128c9565b9050612436613d61565b6124448361010001516128c9565b905061244f82612967565b1580612461575061245f81612967565b155b156124765761246f83612972565b50506124b5565b8151815160408051602080820185905281830184905282518083038401815260609092019092528051910120610100860151610d4a906123e383611acf565b50565b6124c0613d61565b6124ce8261010001516128c9565b90506124d98161297b565b15806124eb5750806040015151600714155b156124ff576124f982612972565b506124b5565b604081015160005b60078110156125495761252c82828151811061251f57fe5b6020026020010151612967565b6125415761253984612972565b5050506124b5565b600101612507565b50612552613dfe565b60005b60198110156125b6576040600382160283600483048151811061257457fe5b602002602001015160000151901c6001600160401b0316826005838161259657fe5b046005840660050201601981106125a957fe5b6020020152600101612555565b506125c081612988565b604080516007808252610100820190925291925060609190816020015b6125e5613d61565b8152602001906001900390816125dd57905050905060005b600781101561262f576126106000611acf565b82828151811061261c57fe5b60209081029190910101526001016125fd565b5060005b601981101561268a5760406003821602836005830460058406600502016019811061265a57fe5b6020020151901b82600483048151811061267057fe5b602090810291909101015180519091179052600101612633565b5061269d8561010001516123e383611e73565b5050505050565b6126ac613d61565b6126ba8261010001516128c9565b90506126c4613d61565b6126d28361010001516128c9565b90506126dc613d61565b6126ea8461010001516128c9565b90506126f583612967565b1580612707575061270582612967565b155b80612718575061271681612967565b155b156127265761253984612972565b825182518251610100870151604080518082019091528381526020810183905261275991906123e3906123de908761356d565b50505050505050565b6000600a60f883901c1015612782578160f81c60300160f81b90506110bc565b8160f81c60570160f81b90506110bc565b600081602001835110156127e3576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b60008060208301611ac4858563ffffffff61279316565b61280b613d61565b6040805160c0810182528481528151606081018352600080825260208083018290528451828152808201865293949085019390830191612861565b61284e613d61565b8152602001906001900390816128465790505b509052815260200160006040519080825280602002602001820160405280156128a457816020015b612891613d61565b8152602001906001900390816128895790505b50815260006020820152600260408201526060019290925250919050565b6008101590565b6128d1613d61565b6128d9613d61565b82602001516001846000015103815181106128f057fe5b60209081029190910101518351600019018452915050919050565b80826020015183600001518151811061292057fe5b60209081029190910101525080516001019052565b61293d613d61565b816080015160ff16600214156129575761149a6003611acf565b6113ea826080015160ff16611acf565b6080015160ff161590565b6124b5816117ad565b6080015160ff1660031490565b612990613dfe565b612998613e1d565b6129a0613e1d565b6129a8613dfe565b6129b0613e3b565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b6018811015613562576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b856003602002015181612bfc57fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b856004602002015181612c3757fe5b0485600460200201516002026001600160401b03161785600260058110612c5a57fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b03161783600260198110612ec457fe5b602002015260c08701516210000081046001602c1b9091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b909102169190041760808401526101608701516001603a1b906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036001602b1b90910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b03630200000090910216919004176101808401526102408701516001602b1b906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a08701516001602c1b906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600ffe5b60200201518751188752600101612ad7565b509495945050505050565b6000613577613e5a565b50604080516108008101825263428a2f9881526371374491602082015263b5c0fbcf9181019190915263e9b5dba56060820152633956c25b60808201526359f111f160a082015263923f82a460c082015263ab1c5ed560e082015263d807aa986101008201526312835b0161012082015263243185be61014082015263550c7dc36101608201526372be5d746101808201526380deb1fe6101a0820152639bdc06a76101c082015263c19bf1746101e082015263e49b69c161020082015263efbe4786610220820152630fc19dc661024082015263240ca1cc610260820152632de92c6f610280820152634a7484aa6102a0820152635cb0a9dc6102c08201526376f988da6102e082015263983e515261030082015263a831c66d61032082015263b00327c861034082015263bf597fc761036082015263c6e00bf361038082015263d5a791476103a08201526306ca63516103c082015263142929676103e08201526327b70a85610400820152632e1b2138610420820152634d2c6dfc6104408201526353380d1361046082015263650a735461048082015263766a0abb6104a08201526381c2c92e6104c08201526392722c856104e082015263a2bfe8a161050082015263a81a664b61052082015263c24b8b7061054082015263c76c51a361056082015263d192e81961058082015263d69906246105a082015263f40e35856105c082015263106aa0706105e08201526319a4c116610600820152631e376c08610620820152632748774c6106408201526334b0bcb561066082015263391c0cb3610680820152634ed8aa4a6106a0820152635b9cca4f6106c082015263682e6ff36106e082015263748f82ee6107008201526378a5636f6107208201526384c87814610740820152638cc702086107608201526390befffa61078082015263a4506ceb6107a082015263bef9a3f76107c082015263c67178f26107e0820152613842613e5a565b60005b60088163ffffffff1610156138cf5763ffffffff6020820260e003168660006020020151901c828263ffffffff166040811061387d57fe5b63ffffffff92831660209182029290920191909152820260e003168660016020020151901c828260080163ffffffff16604081106138b757fe5b63ffffffff9092166020929092020152600101613845565b5060106000805b60408363ffffffff161015613a2b57600384600f850363ffffffff16604081106138fc57fe5b602002015163ffffffff16901c61392d85600f860363ffffffff166040811061392157fe5b60200201516012613c8a565b61395186600f870363ffffffff166040811061394557fe5b60200201516007613c8a565b18189150600a846002850363ffffffff166040811061396c57fe5b602002015163ffffffff16901c61399d856002860363ffffffff166040811061399157fe5b60200201516013613c8a565b6139c1866002870363ffffffff16604081106139b557fe5b60200201516011613c8a565b1818905080846007850363ffffffff16604081106139db57fe5b602002015183866010870363ffffffff16604081106139f657fe5b6020020151010101848463ffffffff1660408110613a1057fe5b63ffffffff90921660209290920201526001909201916138d6565b613a33613e79565b600093505b60088463ffffffff161015613a84578360200260e00363ffffffff1688901c818563ffffffff1660088110613a6957fe5b63ffffffff9092166020929092020152600190930192613a38565b60008060008096505b60408763ffffffff161015613bd9576080840151613aac906019613c8a565b6080850151613abc90600b613c8a565b6080860151613acc906006613c8a565b18189450878763ffffffff1660408110613ae257fe5b6020020151898863ffffffff1660408110613af957fe5b6020020151608086015160a087015160c0880151613b18929190613ca8565b878760076020020151010101019250613b3984600060200201516016613c8a565b8451613b4690600d613c8a565b8551613b53906002613c8a565b6040870180516020890180518a5160c08c01805163ffffffff90811660e08f015260a08e018051821690925260808e018051821690925260608e0180518e01821690925280861690915280831690955284811690925280831891909116911618929091189290921881810186810190931687526001999099019897509092509050613a8d565b600096505b60088763ffffffff161015613c2d578660200260e00363ffffffff168b901c848863ffffffff1660088110613c0f57fe5b60200201805163ffffffff9201919091169052600190960195613bde565b60008097505b60088863ffffffff161015613c7a578760200260e00363ffffffff16858963ffffffff1660088110613c6157fe5b602002015160019099019863ffffffff16901b17613c33565b9c9b505050505050505050505050565b63ffffffff9182166020829003831681901b919092169190911c1790565b82191691161890565b60405180608001604052806004906020820280368337509192915050565b604080516102008101825260008082526020820152908101613cef613d9e565b8152602001613cfc613d9e565b81526000602082018190526040820181905260608201819052608082015260a001613d25613e98565b8152602001613d32613e98565b81526000602082018190526040820181905260608083018190526080830182905260a083015260c09091015290565b6040518060c0016040528060008152602001613d7b613eb2565b815260606020820181905260006040830181905290820181905260809091015290565b6040805161010081019091526000815260208101613dba613d61565b8152602001613dc7613d61565b8152602001613dd4613d61565b8152602001613de1613d61565b81526000602082018190526040820181905260609091015290565bfe5b6040518061032001604052806019906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b6040518061080001604052806040906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe75736520616e6f7468657220636f6e747261637420746f2068616e646c65206f74686572206f70636f646573a2646970667358221220fdd9b03af497ff0d0574082be690ded38011d4380b40f259f124c2e0de48904b64736f6c634300060b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806347dda1d61461003b578063eba67f6e14610157575b600080fd5b610107600480360360e081101561005157600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460018302840111600160201b831117156100ac57600080fd5b919390929091602081019035600160201b8111156100c957600080fd5b8201836020820111156100db57600080fd5b803590602001918460018302840111600160201b831117156100fc57600080fd5b509092509050610301565b604080516001600160401b03851681526020810184905290810182608080838360005b8381101561014257818101518382015260200161012a565b50505050905001935050505060405180910390f35b610223600480360360e081101561016d57600080fd5b604082013590606083019083018360c0810160a0820135600160201b81111561019557600080fd5b8201836020820111156101a757600080fd5b803590602001918460018302840111600160201b831117156101c857600080fd5b919390929091602081019035600160201b8111156101e557600080fd5b8201836020820111156101f757600080fd5b803590602001918460018302840111600160201b8311171561021857600080fd5b5090925090506103c0565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561026457818101518382015260200161024c565b50505050905090810190601f1680156102915780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156102c45781810151838201526020016102ac565b50505050905090810190601f1680156102f15780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b60008061030c613cb1565b610314613ccf565b6103988a8a8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b9081908401838280828437600081840152601f19601f820116905080830192505050505050508f610485565b90506103a38161093c565b6103ac81610d52565b935093509350509750975097945050505050565b6060806103cb613ccf565b61044f898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a9081908401838280828437600081840152601f19601f820116905080830192505050505050508e610485565b905061045a8161093c565b6104678160400151610db5565b92506104768160600151610db5565b91505097509795505050505050565b61048d613ccf565b60008460008151811061049c57fe5b602001015160f81c60f81b60f81c90506000856001815181106104bb57fe5b602001015160f81c60f81b60f81c90506000866002815181106104da57fe5b016020015160f81c9050600360606004840160ff166001600160401b038111801561050457600080fd5b5060405190808252806020026020018201604052801561053e57816020015b61052b613d61565b8152602001906001900390816105235790505b50905060608360040160ff166001600160401b038111801561055f57600080fd5b5060405190808252806020026020018201604052801561059957816020015b610586613d61565b81526020019060019003908161057e5790505b50905060005b8560ff168110156105d5576105b48b856110c1565b8483815181106105c057fe5b6020908102919091010152935060010161059f565b5060005b8460ff1681101561060f576105ee8b856110c1565b8383815181106105fa57fe5b602090810291909101015293506001016105d9565b50610618613d9e565b6106228b85611283565b809250819550505060008b858151811061063857fe5b01602001516001959095019460f81c9050610651613ccf565b6001600160a01b038b35811682526020808d0135909116908201526040810183905261067c83611323565b6060820152608081018f90528d3560a08201526020808f013560c0830152600060e0830181905260408051808201825260ff8c811682528185018a905261010086019190915281518083019092528a8116825292810187905261012084015283821660018114610140850152918b1661016084015261018083018f90526101c083018e90526101e08301526101a08201879052158061071e57508160ff166001145b6040518060400160405280600b81526020016a04241445f494d4d5f5459560ac1b815250906107cb5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610790578181015183820152602001610778565b50505050905090810190601f1680156107bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506107d4613d61565b60ff83166107f5576107ee8a83604001516000015161138c565b9050610895565b6000865111604051806040016040528060068152602001654e4f5f494d4d60d01b815250906108655760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b506108928a8360400151600001518860018d0360ff168151811061088557fe5b60200260200101516113f0565b90505b61089e81611474565b60408301515260005b838a0360ff168110156108e6576108de8782815181106108c357fe5b602002602001015184604001516115e190919063ffffffff16565b6001016108a7565b5060005b8860ff168110156109275761091f86828151811061090457fe5b602002602001015184604001516115fb90919063ffffffff16565b6001016108ea565b50909f9e505050505050505050505050505050565b6000806000613dfc61095585610160015160ff16611615565b9350935093509350600084118061096f5750846101400151155b80156109815750610100850151518410155b806109a957508461014001518015610997575083155b80156109a95750610100850151516001145b6040518060400160405280600a815260200169535441434b5f4d414e5960b01b81525090610a185760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b50610120850151516040805180820190915260088152674155585f4d414e5960c01b602082015290841015610a8e5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b5061010085015151841115610b4c57610aad610aa86116f1565b611474565b610abe866060015160200151611474565b146040518060400160405280600d81526020016c535441434b5f4d495353494e4760981b81525090610b315760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b50610b3d856005611738565b50610b47856117ad565b610c0c565b61012085015151831115610be757610b65610aa86116f1565b610b76866060015160400151611474565b146040518060400160405280600b81526020016a4155585f4d495353494e4760a81b81525090610b315760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610790578181015183820152602001610778565b610bf18583611738565b15610bff57610b47856117ad565b610c0c858263ffffffff16565b846101e0015115610cb15760408051600160f81b6020808301919091526000602183018190526022808401919091528351808403909101815260429092019092528051910120606086015160c001511415610c7357610c6e85606001516117b8565b610cb1565b60006101e0860152606085015160c081015190526101408501518015610c97575083155b610ca657610100850151600090525b610120850151600090525b60005b61010086015151811015610cfd57610cf5866101000151602001518281518110610cda57fe5b602002602001015187606001516115e190919063ffffffff16565b600101610cb4565b5060005b61012086015151811015610d4a57610d42866101200151602001518281518110610d2757fe5b602002602001015187606001516115fb90919063ffffffff16565b600101610d01565b505050505050565b600080610d5d613cb1565b8360e0015184608001516040518060800160405280610d7f88604001516117c2565b8152602001610d9188606001516117c2565b81526020018760a0015181526020018760c001518152509250925092509193909250565b6060610dc48260000151611886565b610dd9610dd48460200151611474565b611886565b610de9610dd48560400151611474565b610df9610dd48660600151611474565b610e09610dd48760800151611474565b610e168760a00151611955565b610e238860c00151611886565b60405160200180806709ac2c6d0d2dcca560c31b81525060080188805190602001908083835b60208310610e685780518252601f199092019160209182019101610e49565b51815160209384036101000a60001901801990921691161790526216100560e91b9190930190815289516003909101928a0191508083835b60208310610ebf5780518252601f199092019160209182019101610ea0565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528851600390910192890191508083835b60208310610f165780518252601f199092019160209182019101610ef7565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528751600390910192880191508083835b60208310610f6d5780518252601f199092019160209182019101610f4e565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528651600390910192870191508083835b60208310610fc45780518252601f199092019160209182019101610fa5565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528551600390910192860191508083835b6020831061101b5780518252601f199092019160209182019101610ffc565b51815160209384036101000a60001901801990921691161790526216100560e91b919093019081528451600390910192850191508083835b602083106110725780518252601f199092019160209182019101611053565b6001836020036101000a0380198251168184511680821785525050505050509050018061148560f11b81525060020197505050505050505060405160208183030381529060405290505b919050565b60006110cb613d61565b83518310611111576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a59081bd9999cd95d60921b604482015290519081900360640190fd5b60008061111e8686611a2f565b9150915061112a611a56565b60ff168160ff16141561115e5760006111438784611a5b565b90935090508261115282611acf565b9450945050505061127c565b611166611b8f565b60ff168160ff1614156111885761117d8683611b94565b93509350505061127c565b611190611c36565b60ff168160ff1614156111b85760006111a98784611a5b565b90935090508261115282611c3b565b6111c0611d27565b60ff168160ff1614156111d75761117d8683611d2c565b6111df611dc1565b60ff168160ff161015801561120057506111f7611dc6565b60ff168160ff16105b1561123c57600061120f611dc1565b820390506060611220828986611dcb565b90945090508361122f82611e73565b955095505050505061127c565b6040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642074797065636f646560801b604482015290519081900360640190fd5b9250929050565b600061128d613d9e565b611295613d9e565b600060e08201819052806112a98787611a5b565b90965091506112b88787611d2c565b602085015295506112c98787611d2c565b604085015295506112da87876110c1565b606085015295506112eb87876110c1565b608085015295506112fc8787611a5b565b60a0850152955061130d8787611a5b565b92845260c0840192909252509590945092505050565b61132b613d9e565b60405180610100016040528083600001518152602001836020015181526020018360400151815260200183606001518152602001836080015181526020018360a0015181526020018360c0015181526020018360e001518152509050919050565b611394613d61565b6040805160608101825260ff8516815260208082018590528251600080825291810184526113e7938301916113df565b6113cc613d61565b8152602001906001900390816113c45790505b509052611fb4565b90505b92915050565b6113f8613d61565b604080516001808252818301909252606091816020015b611417613d61565b81526020019060019003908161140f579050509050828160008151811061143a57fe5b602002602001018190525061146b60405180606001604052808760ff16815260200186815260200183815250611fb4565b95945050505050565b600061147e611a56565b60ff16826080015160ff1614156114a157815161149a90612044565b90506110bc565b6114a9611b8f565b60ff16826080015160ff1614156114c75761149a8260200151612068565b6114cf611d27565b60ff16826080015160ff1614156114f157815160a083015161149a9190612165565b6114f9611dc1565b60ff16826080015160ff16141561153257611512613d61565b61151f83604001516121b6565b905061152a81611474565b9150506110bc565b61153a61232e565b60ff16826080015160ff161415611553575080516110bc565b61155b611c36565b60ff16826080015160ff1614156115a0575060608082015160408051607b602080830191909152818301939093528151808203830181529301905281519101206110bc565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207479706520636f646560781b604482015290519081900360640190fd5b6115ef826020015182612333565b82602001819052505050565b611609826040015182612333565b82604001819052505050565b60008080613dfc602085141561163a57506001925060009150600790506123b16116ea565b602185141561165857506001925060009150600390506123ec6116ea565b602285141561167657506002925060009150600890506124166116ea565b60238514156116955750600192506000915061025890506124b86116ea565b60248514156116b35750600392506000915060fa90506126a46116ea565b60405162461bcd60e51b815260040180806020018281038252602c815260200180613ed2602c913960400191505060405180910390fd5b9193509193565b6116f9613d61565b604080516000808252602082019092526117339161172d565b61171a613d61565b8152602001906001900390816117125790505b50611e73565b905090565b6000816001600160401b0316836060015160a00151101561177d575060e0820180516005016001600160401b03169052606082015160001960a09091015260016113ea565b5060e0820180516001600160401b039083018116909152606083015160a0018051918316909103905260006113ea565b60016101e090910152565b600160e090910152565b600060028260e0015114156117d9575060006110bc565b60018260e0015114156117ee575060016110bc565b815160208301516117fe90611474565b61180b8460400151611474565b6118188560600151611474565b6118258660800151611474565b8660a001518760c00151604051602001808881526020018781526020018681526020018581526020018481526020018381526020018281526020019750505050505050506040516020818303038152906040528051906020012090506110bc565b60408051818152606081810183529182919060208201818036833701905050905060005b602081101561194e5760008482602081106118c157fe5b1a60f881811b9250601080830480831b9360ff9091169091029003901b6118e782612762565b8585600202815181106118f657fe5b60200101906001600160f81b031916908160001a90535061191681612762565b85856002026001018151811061192857fe5b60200101906001600160f81b031916908160001a90535050600190920191506118aa9050565b5092915050565b6060818061197c5750506040805180820190915260018152600360fc1b60208201526110bc565b8060005b811561199457600101600a82049150611980565b6060816001600160401b03811180156119ac57600080fd5b506040519080825280601f01601f1916602001820160405280156119d7576020820181803683370190505b50905060001982015b8415611a2557600a850660300160f81b82828060019003935081518110611a0357fe5b60200101906001600160f81b031916908160001a905350600a850494506119e0565b5095945050505050565b60008082600101848481518110611a4257fe5b016020015190925060f81c90509250929050565b600090565b60008082845110158015611a73575060208385510310155b611ab0576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b60208301611ac4858563ffffffff61279316565b915091509250929050565b611ad7613d61565b6040805160c0810182528381528151606081018352600080825260208083018290528451828152808201865293949085019390830191611b2d565b611b1a613d61565b815260200190600190039081611b125790505b50905281526020016000604051908082528060200260200182016040528015611b7057816020015b611b5d613d61565b815260200190600190039081611b555790505b5081526000602082018190526040820152600160609091015292915050565b600190565b6000611b9e613d61565b82600080611baa613d61565b6000611bb68986611a2f565b9095509350611bc58986611a2f565b9095509250600160ff85161415611be657611be089866110c1565b90955091505b611bf089866127ec565b9095509050600160ff85161415611c1b5784611c0d8483856113f0565b96509650505050505061127c565b84611c26848361138c565b9650965050505050509250929050565b600c90565b611c43613d61565b6040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b0381118015611c8a57600080fd5b50604051908082528060200260200182016040528015611cc457816020015b611cb1613d61565b815260200190600190039081611ca95790505b50905281526020016000604051908082528060200260200182016040528015611d0757816020015b611cf4613d61565b815260200190600190039081611cec5790505b50815260208101849052600c604082015260016060909101529050919050565b600290565b6000611d36613d61565b82845110158015611d4b575060408385510310155b611d88576040805162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b604482015290519081900360640190fd5b600080611d9586866127ec565b9094509150611da48685611a5b565b909450905083611db48383612803565b9350935050509250929050565b600390565b600d90565b60006060828160ff87166001600160401b0381118015611dea57600080fd5b50604051908082528060200260200182016040528015611e2457816020015b611e11613d61565b815260200190600190039081611e095790505b50905060005b8760ff168160ff161015611e6657611e4287846110c1565b838360ff1681518110611e5157fe5b60209081029190910101529250600101611e2a565b5090969095509350505050565b611e7b613d61565b611e8582516128c2565b611ed6576040805162461bcd60e51b815260206004820152601a60248201527f5475706c65206d75737420686176652076616c69642073697a65000000000000604482015290519081900360640190fd5b600160005b8351811015611f0d57838181518110611ef057fe5b602002602001015160a00151820191508080600101915050611edb565b506040518060c00160405280600081526020016040518060600160405280600060ff1681526020016000801b815260200160006001600160401b0381118015611f5557600080fd5b50604051908082528060200260200182016040528015611f8f57816020015b611f7c613d61565b815260200190600190039081611f745790505b5090528152602081019490945260006040850152600360608501526080909301525090565b611fbc613d61565b6040518060c001604052806000815260200183815260200160006001600160401b0381118015611feb57600080fd5b5060405190808252806020026020018201604052801561202557816020015b612012613d61565b81526020019060019003908161200a5790505b5081526000602082015260016040820181905260609091015292915050565b60408051602080820193909352815180820384018152908201909152805191012090565b600060028260400151511061207957fe5b6040820151516120de5761208b611b8f565b8251602080850151604080516001600160f81b031960f896871b8116828601529490951b9093166021850152602280850191909152825180850390910181526042909301909152815191012090506110bc565b6120e6611b8f565b826000015161210c84604001516000815181106120ff57fe5b6020026020010151611474565b8460200151604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b8152600101838152602001828152602001945050505050604051602081830303815290604052805190602001209050919050565b600061216f611dc1565b8383604051602001808460ff1660ff1660f81b8152600101838152602001828152602001935050505060405160208183030381529060405280519060200120905092915050565b6121be613d61565b60088251111561220c576040805162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e8eae0d8ca40d8cadccee8d60631b604482015290519081900360640190fd5b606082516001600160401b038111801561222557600080fd5b5060405190808252806020026020018201604052801561224f578160200160208202803683370190505b508051909150600160005b828110156122b2576122718682815181106120ff57fe5b84828151811061227d57fe5b60200260200101818152505085818151811061229557fe5b602002602001015160a0015182019150808060010191505061225a565b506000835184604051602001808360ff1660ff1660f81b8152600101828051906020019060200280838360005b838110156122f75781810151838201526020016122df565b50505050905001925050506040516020818303038152906040528051906020012090506123248183612803565b9695505050505050565b606490565b61233b613d61565b6040805160028082526060828101909352816020015b612359613d61565b815260200190600190039081612351579050509050828160008151811061237c57fe5b6020026020010181905250838160018151811061239557fe5b60200260200101819052506123a9816121b6565b949350505050565b6123b9613d61565b6123c78261010001516128c9565b90506123e88261010001516123e36123de84611474565b611acf565b61290b565b5050565b6123f4613d61565b6124028261010001516128c9565b90506123e88261010001516123e383612935565b61241e613d61565b61242c8261010001516128c9565b9050612436613d61565b6124448361010001516128c9565b905061244f82612967565b1580612461575061245f81612967565b155b156124765761246f83612972565b50506124b5565b8151815160408051602080820185905281830184905282518083038401815260609092019092528051910120610100860151610d4a906123e383611acf565b50565b6124c0613d61565b6124ce8261010001516128c9565b90506124d98161297b565b15806124eb5750806040015151600714155b156124ff576124f982612972565b506124b5565b604081015160005b60078110156125495761252c82828151811061251f57fe5b6020026020010151612967565b6125415761253984612972565b5050506124b5565b600101612507565b50612552613dfe565b60005b60198110156125b6576040600382160283600483048151811061257457fe5b602002602001015160000151901c6001600160401b0316826005838161259657fe5b046005840660050201601981106125a957fe5b6020020152600101612555565b506125c081612988565b604080516007808252610100820190925291925060609190816020015b6125e5613d61565b8152602001906001900390816125dd57905050905060005b600781101561262f576126106000611acf565b82828151811061261c57fe5b60209081029190910101526001016125fd565b5060005b601981101561268a5760406003821602836005830460058406600502016019811061265a57fe5b6020020151901b82600483048151811061267057fe5b602090810291909101015180519091179052600101612633565b5061269d8561010001516123e383611e73565b5050505050565b6126ac613d61565b6126ba8261010001516128c9565b90506126c4613d61565b6126d28361010001516128c9565b90506126dc613d61565b6126ea8461010001516128c9565b90506126f583612967565b1580612707575061270582612967565b155b80612718575061271681612967565b155b156127265761253984612972565b825182518251610100870151604080518082019091528381526020810183905261275991906123e3906123de908761356d565b50505050505050565b6000600a60f883901c1015612782578160f81c60300160f81b90506110bc565b8160f81c60570160f81b90506110bc565b600081602001835110156127e3576040805162461bcd60e51b815260206004820152601260248201527152656164206f7574206f6620626f756e647360701b604482015290519081900360640190fd5b50016020015190565b60008060208301611ac4858563ffffffff61279316565b61280b613d61565b6040805160c0810182528481528151606081018352600080825260208083018290528451828152808201865293949085019390830191612861565b61284e613d61565b8152602001906001900390816128465790505b509052815260200160006040519080825280602002602001820160405280156128a457816020015b612891613d61565b8152602001906001900390816128895790505b50815260006020820152600260408201526060019290925250919050565b6008101590565b6128d1613d61565b6128d9613d61565b82602001516001846000015103815181106128f057fe5b60209081029190910101518351600019018452915050919050565b80826020015183600001518151811061292057fe5b60209081029190910101525080516001019052565b61293d613d61565b816080015160ff16600214156129575761149a6003611acf565b6113ea826080015160ff16611acf565b6080015160ff161590565b6124b5816117ad565b6080015160ff1660031490565b612990613dfe565b612998613e1d565b6129a0613e1d565b6129a8613dfe565b6129b0613e3b565b60405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060008090505b6018811015613562576080878101516060808a01516040808c01516020808e01518e511890911890921890931889526101208b01516101008c015160e08d015160c08e015160a08f0151181818189089018190526101c08b01516101a08c01516101808d01516101608e01516101408f0151181818189289019283526102608b01516102408c01516102208d01516102008e01516101e08f015118181818918901919091526103008a01516102e08b01516102c08c01516102a08d01516102808e0151181818189288018390526001600160401b0360028202166001603f1b91829004179092188652510485600260200201516002026001600160401b03161785600060200201511884600160200201526001603f1b856003602002015181612bfc57fe5b0485600360200201516002026001600160401b03161785600160200201511884600260200201526001603f1b856004602002015181612c3757fe5b0485600460200201516002026001600160401b03161785600260058110612c5a57fe5b602002015118606085015284516001603f1b9086516060808901519390920460029091026001600160401b031617909118608086810191825286518a5118808b5287516020808d018051909218825289516040808f0180519092189091528a518e8801805190911890528a51948e0180519095189094528901805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291880180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292870180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529084525163100000009060208901516001600160401b03641000000000909102169190041761010084015260408701516001603d1b9060408901516001600160401b03600890910216919004176101608401526060870151628000009060608901516001600160401b036502000000000090910216919004176102608401526080870151654000000000009060808901516001600160401b036204000090910216919004176102c084015260a08701516001603f1b900487600560200201516002026001600160401b03161783600260198110612ec457fe5b602002015260c08701516210000081046001602c1b9091026001600160401b039081169190911760a085015260e0880151664000000000000081046104009091028216176101a08501526101008801516208000081046520000000000090910282161761020085015261012088015160048082029092166001603e1b909104176103008501526101408801516101408901516001600160401b036001603e1b909102169190041760808401526101608701516001603a1b906101608901516001600160401b036040909102169190041760e084015261018087015162200000906101808901516001600160401b036001602b1b90910216919004176101408401526101a08701516602000000000000906101a08901516001600160401b0361800090910216919004176102408401526101c08701516008906101c08901516001600160401b036001603d1b90910216919004176102a08401526101e0870151641000000000906101e08901516001600160401b03631000000090910216919004176020840152610200808801516102008901516001600160401b0366800000000000009091021691900417610120840152610220870151648000000000906102208901516001600160401b03630200000090910216919004176101808401526102408701516001602b1b906102408901516001600160401b036220000090910216919004176101e0840152610260870151610100906102608901516001600160401b03600160381b90910216919004176102e0840152610280870151642000000000906102808901516001600160401b036308000000909102169190041760608401526102a08701516001602c1b906102a08901516001600160401b0362100000909102169190041760c08401526102c08701516302000000906102c08901516001600160401b0364800000000090910216919004176101c08401526102e0870151600160381b906102e08901516001600160401b036101009091021691900417610220840152610300870151660400000000000090048760186020020151614000026001600160401b031617836014602002015282600a602002015183600560200201511916836000602002015118876000602002015282600b602002015183600660200201511916836001602002015118876001602002015282600c602002015183600760200201511916836002602002015118876002602002015282600d602002015183600860200201511916836003602002015118876003602002015282600e602002015183600960200201511916836004602002015118876004602002015282600f602002015183600a602002015119168360056020020151188760056020020152826010602002015183600b602002015119168360066020020151188760066020020152826011602002015183600c602002015119168360076020020151188760076020020152826012602002015183600d602002015119168360086020020151188760086020020152826013602002015183600e602002015119168360096020020151188760096020020152826014602002015183600f6020020151191683600a60200201511887600a602002015282601560200201518360106020020151191683600b60200201511887600b602002015282601660200201518360116020020151191683600c60200201511887600c602002015282601760200201518360126020020151191683600d60200201511887600d602002015282601860200201518360136020020151191683600e60200201511887600e602002015282600060200201518360146020020151191683600f60200201511887600ffe5b60200201518751188752600101612ad7565b509495945050505050565b6000613577613e5a565b50604080516108008101825263428a2f9881526371374491602082015263b5c0fbcf9181019190915263e9b5dba56060820152633956c25b60808201526359f111f160a082015263923f82a460c082015263ab1c5ed560e082015263d807aa986101008201526312835b0161012082015263243185be61014082015263550c7dc36101608201526372be5d746101808201526380deb1fe6101a0820152639bdc06a76101c082015263c19bf1746101e082015263e49b69c161020082015263efbe4786610220820152630fc19dc661024082015263240ca1cc610260820152632de92c6f610280820152634a7484aa6102a0820152635cb0a9dc6102c08201526376f988da6102e082015263983e515261030082015263a831c66d61032082015263b00327c861034082015263bf597fc761036082015263c6e00bf361038082015263d5a791476103a08201526306ca63516103c082015263142929676103e08201526327b70a85610400820152632e1b2138610420820152634d2c6dfc6104408201526353380d1361046082015263650a735461048082015263766a0abb6104a08201526381c2c92e6104c08201526392722c856104e082015263a2bfe8a161050082015263a81a664b61052082015263c24b8b7061054082015263c76c51a361056082015263d192e81961058082015263d69906246105a082015263f40e35856105c082015263106aa0706105e08201526319a4c116610600820152631e376c08610620820152632748774c6106408201526334b0bcb561066082015263391c0cb3610680820152634ed8aa4a6106a0820152635b9cca4f6106c082015263682e6ff36106e082015263748f82ee6107008201526378a5636f6107208201526384c87814610740820152638cc702086107608201526390befffa61078082015263a4506ceb6107a082015263bef9a3f76107c082015263c67178f26107e0820152613842613e5a565b60005b60088163ffffffff1610156138cf5763ffffffff6020820260e003168660006020020151901c828263ffffffff166040811061387d57fe5b63ffffffff92831660209182029290920191909152820260e003168660016020020151901c828260080163ffffffff16604081106138b757fe5b63ffffffff9092166020929092020152600101613845565b5060106000805b60408363ffffffff161015613a2b57600384600f850363ffffffff16604081106138fc57fe5b602002015163ffffffff16901c61392d85600f860363ffffffff166040811061392157fe5b60200201516012613c8a565b61395186600f870363ffffffff166040811061394557fe5b60200201516007613c8a565b18189150600a846002850363ffffffff166040811061396c57fe5b602002015163ffffffff16901c61399d856002860363ffffffff166040811061399157fe5b60200201516013613c8a565b6139c1866002870363ffffffff16604081106139b557fe5b60200201516011613c8a565b1818905080846007850363ffffffff16604081106139db57fe5b602002015183866010870363ffffffff16604081106139f657fe5b6020020151010101848463ffffffff1660408110613a1057fe5b63ffffffff90921660209290920201526001909201916138d6565b613a33613e79565b600093505b60088463ffffffff161015613a84578360200260e00363ffffffff1688901c818563ffffffff1660088110613a6957fe5b63ffffffff9092166020929092020152600190930192613a38565b60008060008096505b60408763ffffffff161015613bd9576080840151613aac906019613c8a565b6080850151613abc90600b613c8a565b6080860151613acc906006613c8a565b18189450878763ffffffff1660408110613ae257fe5b6020020151898863ffffffff1660408110613af957fe5b6020020151608086015160a087015160c0880151613b18929190613ca8565b878760076020020151010101019250613b3984600060200201516016613c8a565b8451613b4690600d613c8a565b8551613b53906002613c8a565b6040870180516020890180518a5160c08c01805163ffffffff90811660e08f015260a08e018051821690925260808e018051821690925260608e0180518e01821690925280861690915280831690955284811690925280831891909116911618929091189290921881810186810190931687526001999099019897509092509050613a8d565b600096505b60088763ffffffff161015613c2d578660200260e00363ffffffff168b901c848863ffffffff1660088110613c0f57fe5b60200201805163ffffffff9201919091169052600190960195613bde565b60008097505b60088863ffffffff161015613c7a578760200260e00363ffffffff16858963ffffffff1660088110613c6157fe5b602002015160019099019863ffffffff16901b17613c33565b9c9b505050505050505050505050565b63ffffffff9182166020829003831681901b919092169190911c1790565b82191691161890565b60405180608001604052806004906020820280368337509192915050565b604080516102008101825260008082526020820152908101613cef613d9e565b8152602001613cfc613d9e565b81526000602082018190526040820181905260608201819052608082015260a001613d25613e98565b8152602001613d32613e98565b81526000602082018190526040820181905260608083018190526080830182905260a083015260c09091015290565b6040518060c0016040528060008152602001613d7b613eb2565b815260606020820181905260006040830181905290820181905260809091015290565b6040805161010081019091526000815260208101613dba613d61565b8152602001613dc7613d61565b8152602001613dd4613d61565b8152602001613de1613d61565b81526000602082018190526040820181905260609091015290565bfe5b6040518061032001604052806019906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b6040518061080001604052806040906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b604051806040016040528060008152602001606081525090565b604080516060808201835260008083526020830152918101919091529056fe75736520616e6f7468657220636f6e747261637420746f2068616e646c65206f74686572206f70636f646573a2646970667358221220fdd9b03af497ff0d0574082be690ded38011d4380b40f259f124c2e0de48904b64736f6c634300060b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}