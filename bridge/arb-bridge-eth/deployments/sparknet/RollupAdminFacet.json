{
  "address": "0xb13C024a3ddc7c0D903935c12E8F9ebfb53F7Fc7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nodeNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "afterSendAcc",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "afterSendCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "afterLogAcc",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "afterLogCount",
          "type": "uint256"
        }
      ],
      "name": "NodeConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nodeNum",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "parentNodeHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nodeHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "executionHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inboxMaxCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "afterInboxBatchEndCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "afterInboxBatchAcc",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32[3][2]",
          "name": "assertionBytes32Fields",
          "type": "bytes32[3][2]"
        },
        {
          "indexed": false,
          "internalType": "uint256[4][2]",
          "name": "assertionIntFields",
          "type": "uint256[4][2]"
        }
      ],
      "name": "NodeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nodeNum",
          "type": "uint256"
        }
      ],
      "name": "NodeRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "OwnerFunctionCalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "challengeContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asserter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengedNode",
          "type": "uint256"
        }
      ],
      "name": "RollupChallengeStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "machineHash",
          "type": "bytes32"
        }
      ],
      "name": "RollupCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalBalance",
          "type": "uint256"
        }
      ],
      "name": "UserStakeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalBalance",
          "type": "uint256"
        }
      ],
      "name": "UserWithdrawableFundsUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "STORAGE_GAP_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STORAGE_GAP_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_stakerMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "latestStakedNode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountStaked",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currentChallenge",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isStaked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "amountStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbGasSpeedLimitPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "avmGasSpeedLimitPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challengeExecutionBisectionDegree",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challengeFactory",
      "outputs": [
        {
          "internalType": "contract IChallengeFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "confirmPeriodBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "currentChallenge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delayedBridge",
      "outputs": [
        {
          "internalType": "contract IBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraChallengeTimeBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstUnresolvedNode",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nodeNum",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "beforeSendAcc",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "sendsData",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "sendLengths",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "afterSendCount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "afterLogAcc",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "afterLogCount",
          "type": "uint256"
        }
      ],
      "name": "forceConfirmNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "expectedNodeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[3][2]",
          "name": "assertionBytes32Fields",
          "type": "bytes32[3][2]"
        },
        {
          "internalType": "uint256[4][2]",
          "name": "assertionIntFields",
          "type": "uint256[4][2]"
        },
        {
          "internalType": "bytes",
          "name": "sequencerBatchProof",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "beforeProposedBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "beforeInboxMaxCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevNode",
          "type": "uint256"
        }
      ],
      "name": "forceCreateNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "staker",
          "type": "address[]"
        }
      ],
      "name": "forceRefundStaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "stakerA",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "stakerB",
          "type": "address[]"
        }
      ],
      "name": "forceResolveChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nodeNum",
          "type": "uint256"
        }
      ],
      "name": "getNode",
      "outputs": [
        {
          "internalType": "contract INode",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getNodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakerNum",
          "type": "uint256"
        }
      ],
      "name": "getStakerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMaster",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "isStaked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "isZombie",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastStakeBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestConfirmed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestNodeCreated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "latestStakedNode",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumAssertionPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nodeFactory",
      "outputs": [
        {
          "internalType": "contract INodeFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "outbox",
      "outputs": [
        {
          "internalType": "contract IOutbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_outbox",
          "type": "address"
        }
      ],
      "name": "removeOldOutbox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resume",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rollupEventBridge",
      "outputs": [
        {
          "internalType": "contract RollupEventBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerBridge",
      "outputs": [
        {
          "internalType": "contract ISequencerInbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAvmGasSpeedLimitPerBlock",
          "type": "uint256"
        }
      ],
      "name": "setAvmGasSpeedLimitPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newBaseStake",
          "type": "uint256"
        }
      ],
      "name": "setBaseStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newChallengeExecutionBisectionDegree",
          "type": "uint256"
        }
      ],
      "name": "setChallengeExecutionBisectionDegree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newConfirmPeriod",
          "type": "uint256"
        }
      ],
      "name": "setConfirmPeriodBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newExtraTimeBlocks",
          "type": "uint256"
        }
      ],
      "name": "setExtraChallengeTimeBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdminFacet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newUserFacet",
          "type": "address"
        }
      ],
      "name": "setFacets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inbox",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "setInbox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSequencer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isSequencer",
          "type": "bool"
        }
      ],
      "name": "setIsSequencer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        }
      ],
      "name": "setMinimumAssertionPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOutbox",
          "name": "_outbox",
          "type": "address"
        }
      ],
      "name": "setOutbox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSequencerInboxMaxDelayBlocks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newSequencerInboxMaxDelaySeconds",
          "type": "uint256"
        }
      ],
      "name": "setSequencerInboxMaxDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newStakeToken",
          "type": "address"
        }
      ],
      "name": "setStakeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_validator",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_val",
          "type": "bool[]"
        }
      ],
      "name": "setValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "whitelist",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "user",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "val",
          "type": "bool[]"
        }
      ],
      "name": "setWhitelistEntries",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "whitelist",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newWhitelist",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        }
      ],
      "name": "updateWhitelistConsumers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeBeacon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdrawableFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "zombieNum",
          "type": "uint256"
        }
      ],
      "name": "zombieAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zombieCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "zombieNum",
          "type": "uint256"
        }
      ],
      "name": "zombieLatestStakedNode",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b790225787347e76534831c6826b975ebc210fa809f2164db5cdd1a98a0c710",
  "receipt": {
    "to": null,
    "from": "0x7D3D3955Fd31f22709335474e80736dd0D433cF3",
    "contractAddress": "0xb13C024a3ddc7c0D903935c12E8F9ebfb53F7Fc7",
    "transactionIndex": 0,
    "gasUsed": "3167086",
    "logsBloom": "0x
    "blockHash": "0x9f5a7fad802620cd934cb87b0a4b0d513dcf521987017fc6b2156387317a3dbf",
    "transactionHash": "0x6b790225787347e76534831c6826b975ebc210fa809f2164db5cdd1a98a0c710",
    "logs": [],
    "blockNumber": 3216428,
    "cumulativeGasUsed": "3167086",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5f404ffad369d1e6fd2cf1f0ce010b90",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterSendAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"afterSendCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterLogAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"afterLogCount\",\"type\":\"uint256\"}],\"name\":\"NodeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentNodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inboxMaxCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"afterInboxBatchEndCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"afterInboxBatchAcc\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[3][2]\",\"name\":\"assertionBytes32Fields\",\"type\":\"bytes32[3][2]\"},{\"indexed\":false,\"internalType\":\"uint256[4][2]\",\"name\":\"assertionIntFields\",\"type\":\"uint256[4][2]\"}],\"name\":\"NodeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"}],\"name\":\"NodeRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OwnerFunctionCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challengeContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengedNode\",\"type\":\"uint256\"}],\"name\":\"RollupChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"machineHash\",\"type\":\"bytes32\"}],\"name\":\"RollupCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawableFundsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"STORAGE_GAP_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STORAGE_GAP_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestStakedNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentChallenge\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbGasSpeedLimitPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avmGasSpeedLimitPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeExecutionBisectionDegree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeFactory\",\"outputs\":[{\"internalType\":\"contract IChallengeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayedBridge\",\"outputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraChallengeTimeBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnresolvedNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"beforeSendAcc\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sendsData\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"sendLengths\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"afterSendCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"afterLogAcc\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"afterLogCount\",\"type\":\"uint256\"}],\"name\":\"forceConfirmNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expectedNodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[3][2]\",\"name\":\"assertionBytes32Fields\",\"type\":\"bytes32[3][2]\"},{\"internalType\":\"uint256[4][2]\",\"name\":\"assertionIntFields\",\"type\":\"uint256[4][2]\"},{\"internalType\":\"bytes\",\"name\":\"sequencerBatchProof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"beforeProposedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beforeInboxMaxCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevNode\",\"type\":\"uint256\"}],\"name\":\"forceCreateNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"staker\",\"type\":\"address[]\"}],\"name\":\"forceRefundStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakerA\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"stakerB\",\"type\":\"address[]\"}],\"name\":\"forceResolveChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeNum\",\"type\":\"uint256\"}],\"name\":\"getNode\",\"outputs\":[{\"internalType\":\"contract INode\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getNodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakerNum\",\"type\":\"uint256\"}],\"name\":\"getStakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMaster\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isZombie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStakeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNodeCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"latestStakedNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeFactory\",\"outputs\":[{\"internalType\":\"contract INodeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contract IOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"removeOldOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupEventBridge\",\"outputs\":[{\"internalType\":\"contract RollupEventBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerBridge\",\"outputs\":[{\"internalType\":\"contract ISequencerInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAvmGasSpeedLimitPerBlock\",\"type\":\"uint256\"}],\"name\":\"setAvmGasSpeedLimitPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBaseStake\",\"type\":\"uint256\"}],\"name\":\"setBaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newChallengeExecutionBisectionDegree\",\"type\":\"uint256\"}],\"name\":\"setChallengeExecutionBisectionDegree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newConfirmPeriod\",\"type\":\"uint256\"}],\"name\":\"setConfirmPeriodBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newExtraTimeBlocks\",\"type\":\"uint256\"}],\"name\":\"setExtraChallengeTimeBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdminFacet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newUserFacet\",\"type\":\"address\"}],\"name\":\"setFacets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setInbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSequencer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSequencer\",\"type\":\"bool\"}],\"name\":\"setIsSequencer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinimumAssertionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOutbox\",\"name\":\"_outbox\",\"type\":\"address\"}],\"name\":\"setOutbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSequencerInboxMaxDelayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSequencerInboxMaxDelaySeconds\",\"type\":\"uint256\"}],\"name\":\"setSequencerInboxMaxDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakeToken\",\"type\":\"address\"}],\"name\":\"setStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validator\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_val\",\"type\":\"bool[]\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whitelist\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"val\",\"type\":\"bool[]\"}],\"name\":\"setWhitelistEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whitelist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newWhitelist\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"name\":\"updateWhitelistConsumers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zombieCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zombieNum\",\"type\":\"uint256\"}],\"name\":\"zombieLatestStakedNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"amountStaked(address)\":{\"params\":{\"staker\":\"Staker address to lookup\"},\"returns\":{\"_0\":\"Amount staked of the staker\"}},\"arbGasSpeedLimitPerBlock()\":{\"details\":\"this actually returns the avmGasSpeedLimitPerBlock\",\"returns\":{\"_0\":\"this actually returns the avmGasSpeedLimitPerBlock\"}},\"currentChallenge(address)\":{\"params\":{\"staker\":\"Staker address to lookup\"},\"returns\":{\"_0\":\"Current challenge of the staker\"}},\"firstUnresolvedNode()\":{\"details\":\"If all nodes have been resolved, this will be latestNodeCreated + 1\",\"returns\":{\"_0\":\"Index of the first unresolved node\"}},\"getNode(uint256)\":{\"params\":{\"nodeNum\":\"Index of the node\"},\"returns\":{\"_0\":\"Address of the Node contract\"}},\"getNodeHash(uint256)\":{\"returns\":{\"_0\":\"Node hash as of this node number\"}},\"getStakerAddress(uint256)\":{\"params\":{\"stakerNum\":\"Index of the staker\"},\"returns\":{\"_0\":\"Address of the staker\"}},\"isStaked(address)\":{\"params\":{\"staker\":\"Staker address to check\"},\"returns\":{\"_0\":\"True or False for whether the staker was staked\"}},\"lastStakeBlock()\":{\"returns\":{\"_0\":\"Ethereum block that the most recent stake was created\"}},\"latestConfirmed()\":{\"returns\":{\"_0\":\"Index of the latest confirmed node\"}},\"latestNodeCreated()\":{\"returns\":{\"_0\":\"Index of the latest rollup node created\"}},\"latestStakedNode(address)\":{\"params\":{\"staker\":\"Staker address to lookup\"},\"returns\":{\"_0\":\"Latest node staked of the staker\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeOldOutbox(address)\":{\"params\":{\"_outbox\":\"Outbox contract to remove\"}},\"setAvmGasSpeedLimitPerBlock(uint256)\":{\"params\":{\"newAvmGasSpeedLimitPerBlock\":\"maximum avmgas to be used per block\"}},\"setBaseStake(uint256)\":{\"params\":{\"newBaseStake\":\"minimum amount of stake required\"}},\"setChallengeExecutionBisectionDegree(uint256)\":{\"params\":{\"newChallengeExecutionBisectionDegree\":\"execution bisection degree\"}},\"setConfirmPeriodBlocks(uint256)\":{\"params\":{\"newConfirmPeriod\":\"new number of blocks\"}},\"setExtraChallengeTimeBlocks(uint256)\":{\"params\":{\"newExtraTimeBlocks\":\"new number of blocks\"}},\"setFacets(address,address)\":{\"params\":{\"newAdminFacet\":\"address of logic that owner of rollup calls\",\"newUserFacet\":\"address of logic that user of rollup calls\"}},\"setInbox(address,bool)\":{\"params\":{\"_enabled\":\"New status of inbox\",\"_inbox\":\"Inbox contract to add or remove\"}},\"setIsSequencer(address,bool)\":{\"params\":{\"newSequencer\":\"new sequencer address to be used\"}},\"setMinimumAssertionPeriod(uint256)\":{\"params\":{\"newPeriod\":\"new minimum period for assertions\"}},\"setOutbox(address)\":{\"params\":{\"_outbox\":\"Outbox contract to add\"}},\"setOwner(address)\":{\"params\":{\"newOwner\":\"address of new rollup owner\"}},\"setSequencerInboxMaxDelay(uint256,uint256)\":{\"params\":{\"newSequencerInboxMaxDelayBlocks\":\"max number of blocks\",\"newSequencerInboxMaxDelaySeconds\":\"max number of seconds\"}},\"setStakeToken(address)\":{\"details\":\"Before changing the base stake token, you might need to change the implementation of the Rollup User facet!\",\"params\":{\"newStakeToken\":\"address of token used for staking\"}},\"setValidator(address[],bool[])\":{\"details\":\"It is expected that both arrays are same length, and validator at position i corresponds to the value at position i\",\"params\":{\"_val\":\"value to set in the whitelist for corresponding address\",\"_validator\":\"addresses to set in the whitelist\"}},\"setWhitelistEntries(address,address[],bool[])\":{\"details\":\"user at position i will be assigned value i\",\"params\":{\"user\":\"users to be updated in the whitelist\",\"val\":\"if user is or not allowed in the whitelist\",\"whitelist\":\"whitelist to be updated\"}},\"stakerCount()\":{\"returns\":{\"_0\":\"Number of active stakers currently staked\"}},\"updateWhitelistConsumers(address,address,address[])\":{\"details\":\"setting the newWhitelist to address(0) disables it for consumers\",\"params\":{\"newWhitelist\":\"new whitelist to be used\",\"targets\":\"whitelist consumers to be triggered\",\"whitelist\":\"old whitelist to be deprecated\"}},\"upgradeBeacon(address,address)\":{\"params\":{\"beacon\":\"address of beacon to be upgraded\",\"newImplementation\":\"new address of implementation\"}},\"withdrawableFunds(address)\":{\"params\":{\"owner\":\"Address to check the funds of\"},\"returns\":{\"_0\":\"Amount of funds withdrawable by owner\"}},\"zombieAddress(uint256)\":{\"params\":{\"zombieNum\":\"Index of the zombie to lookup\"},\"returns\":{\"_0\":\"Original staker address of the zombie\"}},\"zombieCount()\":{\"returns\":{\"_0\":\"Current number of un-removed zombies\"}},\"zombieLatestStakedNode(uint256)\":{\"params\":{\"zombieNum\":\"Index of the zombie to lookup\"},\"returns\":{\"_0\":\"Latest node that the given zombie is staked on\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"amountStaked(address)\":{\"notice\":\"Get the amount staked of the given staker\"},\"arbGasSpeedLimitPerBlock()\":{\"notice\":\"DEPRECATED -- this method is deprecated but still mantained for backward compatibility\"},\"currentChallenge(address)\":{\"notice\":\"Get the current challenge of the given staker\"},\"getNode(uint256)\":{\"notice\":\"Get the address of the Node contract for the given node\"},\"getStakerAddress(uint256)\":{\"notice\":\"Get the address of the staker at the given index\"},\"isStaked(address)\":{\"notice\":\"Check whether the given staker is staked\"},\"latestStakedNode(address)\":{\"notice\":\"Get the latest staked node of the given staker\"},\"pause()\":{\"notice\":\"Pause interaction with the rollup contract. The time spent paused is not incremented in the rollup's timing for node validation.\"},\"removeOldOutbox(address)\":{\"notice\":\"Disable an old outbox from interacting with the bridge\"},\"resume()\":{\"notice\":\"Resume interaction with the rollup contract\"},\"setAvmGasSpeedLimitPerBlock(uint256)\":{\"notice\":\"Set speed limit per block\"},\"setBaseStake(uint256)\":{\"notice\":\"Set base stake required for an assertion\"},\"setChallengeExecutionBisectionDegree(uint256)\":{\"notice\":\"Set execution bisection degree\"},\"setConfirmPeriodBlocks(uint256)\":{\"notice\":\"Set number of blocks until a node is considered confirmed\"},\"setExtraChallengeTimeBlocks(uint256)\":{\"notice\":\"Set number of extra blocks after a challenge\"},\"setFacets(address,address)\":{\"notice\":\"Set the addresses of rollup logic facets called\"},\"setInbox(address,bool)\":{\"notice\":\"Enable or disable an inbox contract\"},\"setIsSequencer(address,bool)\":{\"notice\":\"Updates a sequencer address at the sequencer inbox\"},\"setMinimumAssertionPeriod(uint256)\":{\"notice\":\"Set minimum assertion period for the rollup\"},\"setOutbox(address)\":{\"notice\":\"Add a contract authorized to put messages into this rollup's inbox\"},\"setOwner(address)\":{\"notice\":\"Set a new owner address for the rollup\"},\"setSequencerInboxMaxDelay(uint256,uint256)\":{\"notice\":\"Set max delay for sequencer inbox\"},\"setStakeToken(address)\":{\"notice\":\"Set the token used for stake, where address(0) == eth\"},\"setValidator(address[],bool[])\":{\"notice\":\"Set the addresses of the validator whitelist\"},\"setWhitelistEntries(address,address[],bool[])\":{\"notice\":\"Updates a whitelist's entries\"},\"updateWhitelistConsumers(address,address,address[])\":{\"notice\":\"Updates a whitelist address for its consumers\"},\"upgradeBeacon(address,address)\":{\"notice\":\"Upgrades the implementation of a beacon controlled by the rollup\"},\"withdrawableFunds(address)\":{\"notice\":\"Get the amount of funds withdrawable by the given address\"},\"zombieAddress(uint256)\":{\"notice\":\"Get the original staker address of the zombie at the given index\"},\"zombieLatestStakedNode(uint256)\":{\"notice\":\"Get Latest node that the given zombie at the given index is staked on\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rollup/facets/RollupAdmin.sol\":\"RollupAdminFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x77c167740c8227e2569064dabdb2d683800f409743bda1bab8d66d5a2dae3674\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\",\"keccak256\":\"0x0414d54056b3d8f9102ae1142264e9361408397878148203ab7a25cbf6248f08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) public {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0xf847ef1384c87c1484b3989ce81c6dab106a9b4e519eb587ad0e897bdf62c3f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"contracts/arch/IOneStepProof.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"../bridge/interfaces/IBridge.sol\\\";\\nimport \\\"../bridge/interfaces/ISequencerInbox.sol\\\";\\n\\ninterface IOneStepProof {\\n    // Bridges is sequencer bridge then delayed bridge\\n    function executeStep(\\n        address[2] calldata bridges,\\n        uint256 initialMessagesRead,\\n        bytes32[2] calldata accs,\\n        bytes calldata proof,\\n        bytes calldata bproof\\n    )\\n        external\\n        view\\n        returns (\\n            uint64 gas,\\n            uint256 afterMessagesRead,\\n            bytes32[4] memory fields\\n        );\\n\\n    function executeStepDebug(\\n        address[2] calldata bridges,\\n        uint256 initialMessagesRead,\\n        bytes32[2] calldata accs,\\n        bytes calldata proof,\\n        bytes calldata bproof\\n    ) external view returns (string memory startMachine, string memory afterMachine);\\n}\\n\",\"keccak256\":\"0xfe54321c0cc929daa79d94c379630ac3106c0e040e7cfd1db4821257b4919808\",\"license\":\"Apache-2.0\"},\"contracts/bridge/Messages.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nlibrary Messages {\\n    function messageHash(\\n        uint8 kind,\\n        address sender,\\n        uint256 blockNumber,\\n        uint256 timestamp,\\n        uint256 inboxSeqNum,\\n        uint256 gasPriceL1,\\n        bytes32 messageDataHash\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    kind,\\n                    sender,\\n                    blockNumber,\\n                    timestamp,\\n                    inboxSeqNum,\\n                    gasPriceL1,\\n                    messageDataHash\\n                )\\n            );\\n    }\\n\\n    function addMessageToInbox(bytes32 inbox, bytes32 message) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(inbox, message));\\n    }\\n}\\n\",\"keccak256\":\"0xb552340ca4b43016b6bc1fb09345319f6b5e372661d5356f228489ee9a40e79f\",\"license\":\"Apache-2.0\"},\"contracts/bridge/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    );\\n\\n    event BridgeCallTriggered(\\n        address indexed outbox,\\n        address indexed destAddr,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    event InboxToggle(address indexed inbox, bool enabled);\\n\\n    event OutboxToggle(address indexed outbox, bool enabled);\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5a30299074a31b02824bdf7fe779c8baed4385a0a340c8294de6669a2c77d478\",\"license\":\"Apache-2.0\"},\"contracts/bridge/interfaces/IMessageProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IMessageProvider {\\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\\n\\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\\n}\\n\",\"keccak256\":\"0x24dcb49eccb029b7bd2a398919c05227cc87d0ead7f07d524c97944873a898f6\",\"license\":\"Apache-2.0\"},\"contracts/bridge/interfaces/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IOutbox {\\n    event OutboxEntryCreated(\\n        uint256 indexed batchNum,\\n        uint256 outboxEntryIndex,\\n        bytes32 outputRoot,\\n        uint256 numInBatch\\n    );\\n    event OutBoxTransactionExecuted(\\n        address indexed destAddr,\\n        address indexed l2Sender,\\n        uint256 indexed outboxEntryIndex,\\n        uint256 transactionIndex\\n    );\\n\\n    function l2ToL1Sender() external view returns (address);\\n\\n    function l2ToL1Block() external view returns (uint256);\\n\\n    function l2ToL1EthBlock() external view returns (uint256);\\n\\n    function l2ToL1Timestamp() external view returns (uint256);\\n\\n    function l2ToL1BatchNum() external view returns (uint256);\\n\\n    function l2ToL1OutputId() external view returns (bytes32);\\n\\n    function processOutgoingMessages(bytes calldata sendsData, uint256[] calldata sendLengths)\\n        external;\\n\\n    function outboxEntryExists(uint256 batchNum) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc9afce24d902eb8617dc6d31d7ea5afcb22c7d4ce1988d744bbae5b2445d8f22\",\"license\":\"Apache-2.0\"},\"contracts/bridge/interfaces/ISequencerInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface ISequencerInbox {\\n    event SequencerBatchDelivered(\\n        uint256 indexed firstMessageNum,\\n        bytes32 indexed beforeAcc,\\n        uint256 newMessageCount,\\n        bytes32 afterAcc,\\n        bytes transactions,\\n        uint256[] lengths,\\n        uint256[] sectionsMetadata,\\n        uint256 seqBatchIndex,\\n        address sequencer\\n    );\\n\\n    event SequencerBatchDeliveredFromOrigin(\\n        uint256 indexed firstMessageNum,\\n        bytes32 indexed beforeAcc,\\n        uint256 newMessageCount,\\n        bytes32 afterAcc,\\n        uint256 seqBatchIndex\\n    );\\n\\n    event DelayedInboxForced(\\n        uint256 indexed firstMessageNum,\\n        bytes32 indexed beforeAcc,\\n        uint256 newMessageCount,\\n        uint256 totalDelayedMessagesRead,\\n        bytes32[2] afterAccAndDelayed,\\n        uint256 seqBatchIndex\\n    );\\n\\n    /// @notice DEPRECATED - look at IsSequencerUpdated for new updates\\n    // event SequencerAddressUpdated(address newAddress);\\n\\n    event IsSequencerUpdated(address addr, bool isSequencer);\\n    event MaxDelayUpdated(uint256 newMaxDelayBlocks, uint256 newMaxDelaySeconds);\\n\\n    /// @notice DEPRECATED - look at MaxDelayUpdated for new updates\\n    // event MaxDelayBlocksUpdated(uint256 newValue);\\n    /// @notice DEPRECATED - look at MaxDelayUpdated for new updates\\n    // event MaxDelaySecondsUpdated(uint256 newValue);\\n\\n    function setMaxDelay(uint256 newMaxDelayBlocks, uint256 newMaxDelaySeconds) external;\\n\\n    function setIsSequencer(address addr, bool isSequencer) external;\\n\\n    function messageCount() external view returns (uint256);\\n\\n    function maxDelayBlocks() external view returns (uint256);\\n\\n    function maxDelaySeconds() external view returns (uint256);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function getInboxAccsLength() external view returns (uint256);\\n\\n    function proveInboxContainsMessage(bytes calldata proof, uint256 inboxCount)\\n        external\\n        view\\n        returns (uint256, bytes32);\\n\\n    /// @notice DEPRECATED - use isSequencer instead\\n    function sequencer() external view returns (address);\\n\\n    function isSequencer(address seq) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7bd1af4a70730841feaa73e6113f14048e3bb2edf168cb4e96083d5432a98688\",\"license\":\"Apache-2.0\"},\"contracts/challenge/ChallengeLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"../libraries/MerkleLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary ChallengeLib {\\n    using SafeMath for uint256;\\n\\n    function firstSegmentSize(uint256 totalCount, uint256 bisectionCount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return totalCount / bisectionCount + (totalCount % bisectionCount);\\n    }\\n\\n    function otherSegmentSize(uint256 totalCount, uint256 bisectionCount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return totalCount / bisectionCount;\\n    }\\n\\n    function bisectionChunkHash(\\n        uint256 _segmentStart,\\n        uint256 _segmentLength,\\n        bytes32 _startHash,\\n        bytes32 _endHash\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_segmentStart, _segmentLength, _startHash, _endHash));\\n    }\\n\\n    function assertionHash(uint256 _avmGasUsed, bytes32 _restHash) internal pure returns (bytes32) {\\n        // Note: make sure this doesn't return Challenge.UNREACHABLE_ASSERTION (currently 0)\\n        return keccak256(abi.encodePacked(_avmGasUsed, _restHash));\\n    }\\n\\n    function assertionRestHash(\\n        uint256 _totalMessagesRead,\\n        bytes32 _machineState,\\n        bytes32 _sendAcc,\\n        uint256 _sendCount,\\n        bytes32 _logAcc,\\n        uint256 _logCount\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    _totalMessagesRead,\\n                    _machineState,\\n                    _sendAcc,\\n                    _sendCount,\\n                    _logAcc,\\n                    _logCount\\n                )\\n            );\\n    }\\n\\n    function updatedBisectionRoot(\\n        bytes32[] memory _chainHashes,\\n        uint256 _challengedSegmentStart,\\n        uint256 _challengedSegmentLength\\n    ) internal pure returns (bytes32) {\\n        uint256 bisectionCount = _chainHashes.length - 1;\\n        bytes32[] memory hashes = new bytes32[](bisectionCount);\\n        uint256 chunkSize = ChallengeLib.firstSegmentSize(_challengedSegmentLength, bisectionCount);\\n        uint256 segmentStart = _challengedSegmentStart;\\n        hashes[0] = ChallengeLib.bisectionChunkHash(\\n            segmentStart,\\n            chunkSize,\\n            _chainHashes[0],\\n            _chainHashes[1]\\n        );\\n        segmentStart = segmentStart.add(chunkSize);\\n        chunkSize = ChallengeLib.otherSegmentSize(_challengedSegmentLength, bisectionCount);\\n        for (uint256 i = 1; i < bisectionCount; i++) {\\n            hashes[i] = ChallengeLib.bisectionChunkHash(\\n                segmentStart,\\n                chunkSize,\\n                _chainHashes[i],\\n                _chainHashes[i + 1]\\n            );\\n            segmentStart = segmentStart.add(chunkSize);\\n        }\\n        return MerkleLib.generateRoot(hashes);\\n    }\\n\\n    function verifySegmentProof(\\n        bytes32 challengeState,\\n        bytes32 item,\\n        bytes32[] calldata _merkleNodes,\\n        uint256 _merkleRoute\\n    ) internal pure returns (bool) {\\n        return challengeState == MerkleLib.calculateRoot(_merkleNodes, _merkleRoute, item);\\n    }\\n}\\n\",\"keccak256\":\"0x0a9a956201d4c84621916601a1f73ff76e5a20059b75d61551039e6270535295\",\"license\":\"Apache-2.0\"},\"contracts/challenge/IChallenge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"../bridge/interfaces/IBridge.sol\\\";\\nimport \\\"../bridge/interfaces/ISequencerInbox.sol\\\";\\nimport \\\"../arch/IOneStepProof.sol\\\";\\n\\ninterface IChallenge {\\n    function initializeChallenge(\\n        IOneStepProof[] calldata _executors,\\n        address _resultReceiver,\\n        bytes32 _executionHash,\\n        uint256 _maxMessageCount,\\n        address _asserter,\\n        address _challenger,\\n        uint256 _asserterTimeLeft,\\n        uint256 _challengerTimeLeft,\\n        ISequencerInbox _sequencerBridge,\\n        IBridge _delayedBridge\\n    ) external;\\n\\n    function currentResponderTimeLeft() external view returns (uint256);\\n\\n    function lastMoveBlock() external view returns (uint256);\\n\\n    function timeout() external;\\n\\n    function asserter() external view returns (address);\\n\\n    function challenger() external view returns (address);\\n\\n    function clearChallenge() external;\\n}\\n\",\"keccak256\":\"0x501c4975c47da9fb00659717a8ab920ad1b4b18765656a73ee3b5fab32eab33f\",\"license\":\"Apache-2.0\"},\"contracts/challenge/IChallengeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"../bridge/interfaces/IBridge.sol\\\";\\nimport \\\"../bridge/interfaces/ISequencerInbox.sol\\\";\\n\\ninterface IChallengeFactory {\\n    function createChallenge(\\n        address _resultReceiver,\\n        bytes32 _executionHash,\\n        uint256 _maxMessageCount,\\n        address _asserter,\\n        address _challenger,\\n        uint256 _asserterTimeLeft,\\n        uint256 _challengerTimeLeft,\\n        ISequencerInbox _sequencerBridge,\\n        IBridge _delayedBridge\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x152834185809e80f31c3f675c29cbfd2d0bafa3af817bf4ef6535636f81046c5\",\"license\":\"Apache-2.0\"},\"contracts/libraries/Cloneable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./ICloneable.sol\\\";\\n\\ncontract Cloneable is ICloneable {\\n    string private constant NOT_CLONE = \\\"NOT_CLONE\\\";\\n\\n    bool private isMasterCopy;\\n\\n    constructor() public {\\n        isMasterCopy = true;\\n    }\\n\\n    function isMaster() external view override returns (bool) {\\n        return isMasterCopy;\\n    }\\n\\n    function safeSelfDestruct(address payable dest) internal {\\n        require(!isMasterCopy, NOT_CLONE);\\n        selfdestruct(dest);\\n    }\\n}\\n\",\"keccak256\":\"0x09c1eaa640c6dd52b54ef8cbb114a5e99c73c065989eb04c351204b91652cc67\",\"license\":\"Apache-2.0\"},\"contracts/libraries/ICloneable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface ICloneable {\\n    function isMaster() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6caf0d6558086827bd5384a4f52dfceb6af2ab284f381829d4e2cc641ef59b1e\",\"license\":\"Apache-2.0\"},\"contracts/libraries/MerkleLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nlibrary MerkleLib {\\n    function generateRoot(bytes32[] memory _hashes) internal pure returns (bytes32) {\\n        bytes32[] memory prevLayer = _hashes;\\n        while (prevLayer.length > 1) {\\n            bytes32[] memory nextLayer = new bytes32[]((prevLayer.length + 1) / 2);\\n            for (uint256 i = 0; i < nextLayer.length; i++) {\\n                if (2 * i + 1 < prevLayer.length) {\\n                    nextLayer[i] = keccak256(\\n                        abi.encodePacked(prevLayer[2 * i], prevLayer[2 * i + 1])\\n                    );\\n                } else {\\n                    nextLayer[i] = prevLayer[2 * i];\\n                }\\n            }\\n            prevLayer = nextLayer;\\n        }\\n        return prevLayer[0];\\n    }\\n\\n    function calculateRoot(\\n        bytes32[] memory nodes,\\n        uint256 route,\\n        bytes32 item\\n    ) internal pure returns (bytes32) {\\n        uint256 proofItems = nodes.length;\\n        require(proofItems <= 256);\\n        bytes32 h = item;\\n        for (uint256 i = 0; i < proofItems; i++) {\\n            if (route % 2 == 0) {\\n                h = keccak256(abi.encodePacked(nodes[i], h));\\n            } else {\\n                h = keccak256(abi.encodePacked(h, nodes[i]));\\n            }\\n            route /= 2;\\n        }\\n        return h;\\n    }\\n}\\n\",\"keccak256\":\"0x0b02c397678cea90c70c3c654c675596f943d9db13377a4ac9663809ad3a1a13\",\"license\":\"Apache-2.0\"},\"contracts/libraries/ProxyUtil.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nlibrary ProxyUtil {\\n    function getProxyAdmin() internal view returns (address admin) {\\n        // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/proxy/TransparentUpgradeableProxy.sol#L48\\n        // Storage slot with the admin of the proxy contract.\\n        // This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n        bytes32 slot = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n        assembly {\\n            admin := sload(slot)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc725942e1ca60255de51b86b001ed9656752454e7c5cd526ecfe90efe3da159a\",\"license\":\"Apache-2.0\"},\"contracts/libraries/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nabstract contract WhitelistConsumer {\\n    address public whitelist;\\n\\n    event WhitelistSourceUpdated(address newSource);\\n\\n    modifier onlyWhitelisted() {\\n        if (whitelist != address(0)) {\\n            require(Whitelist(whitelist).isAllowed(msg.sender), \\\"NOT_WHITELISTED\\\");\\n        }\\n        _;\\n    }\\n\\n    function updateWhitelistSource(address newSource) external {\\n        require(msg.sender == whitelist, \\\"NOT_FROM_LIST\\\");\\n        whitelist = newSource;\\n        emit WhitelistSourceUpdated(newSource);\\n    }\\n}\\n\\ncontract Whitelist {\\n    address public owner;\\n    mapping(address => bool) public isAllowed;\\n\\n    event OwnerUpdated(address newOwner);\\n    event WhitelistUpgraded(address newWhitelist, address[] targets);\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"ONLY_OWNER\\\");\\n        _;\\n    }\\n\\n    function setOwner(address newOwner) external onlyOwner {\\n        owner = newOwner;\\n        emit OwnerUpdated(newOwner);\\n    }\\n\\n    function setWhitelist(address[] memory user, bool[] memory val) external onlyOwner {\\n        require(user.length == val.length, \\\"INVALID_INPUT\\\");\\n\\n        for (uint256 i = 0; i < user.length; i++) {\\n            isAllowed[user[i]] = val[i];\\n        }\\n    }\\n\\n    // set new whitelist to address(0) to disable whitelist\\n    function triggerConsumers(address newWhitelist, address[] memory targets) external onlyOwner {\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            WhitelistConsumer(targets[i]).updateWhitelistSource(newWhitelist);\\n        }\\n        emit WhitelistUpgraded(newWhitelist, targets);\\n    }\\n}\\n\",\"keccak256\":\"0xb54538aa4794e04ce41bf4159bef4151583a3cae261cafd006ad74c2f33d36de\",\"license\":\"Apache-2.0\"},\"contracts/rollup/INode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface INode {\\n    function initialize(\\n        address _rollup,\\n        bytes32 _stateHash,\\n        bytes32 _challengeHash,\\n        bytes32 _confirmData,\\n        uint256 _prev,\\n        uint256 _deadlineBlock\\n    ) external;\\n\\n    function destroy() external;\\n\\n    function addStaker(address staker) external returns (uint256);\\n\\n    function removeStaker(address staker) external;\\n\\n    function childCreated(uint256) external;\\n\\n    function newChildConfirmDeadline(uint256 deadline) external;\\n\\n    function stateHash() external view returns (bytes32);\\n\\n    function challengeHash() external view returns (bytes32);\\n\\n    function confirmData() external view returns (bytes32);\\n\\n    function prev() external view returns (uint256);\\n\\n    function deadlineBlock() external view returns (uint256);\\n\\n    function noChildConfirmedBeforeBlock() external view returns (uint256);\\n\\n    function stakerCount() external view returns (uint256);\\n\\n    function stakers(address staker) external view returns (bool);\\n\\n    function firstChildBlock() external view returns (uint256);\\n\\n    function latestChildNumber() external view returns (uint256);\\n\\n    function requirePastDeadline() external view;\\n\\n    function requirePastChildConfirmDeadline() external view;\\n}\\n\",\"keccak256\":\"0x26bd57351e141832bc45dffe316884bbe36d27529215b023bc6013c910e1343c\",\"license\":\"Apache-2.0\"},\"contracts/rollup/INodeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface INodeFactory {\\n    function createNode(\\n        bytes32 _stateHash,\\n        bytes32 _challengeHash,\\n        bytes32 _confirmData,\\n        uint256 _prev,\\n        uint256 _deadlineBlock\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x8126cffd549e748f3e8be08db2be0a0a961299de54885572ff60895b76eb5c3c\",\"license\":\"Apache-2.0\"},\"contracts/rollup/IRollupCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./INode.sol\\\";\\n\\ninterface IRollupCore {\\n    function _stakerMap(address stakerAddress)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            bool\\n        );\\n\\n    event RollupCreated(bytes32 machineHash);\\n\\n    event NodeCreated(\\n        uint256 indexed nodeNum,\\n        bytes32 indexed parentNodeHash,\\n        bytes32 nodeHash,\\n        bytes32 executionHash,\\n        uint256 inboxMaxCount,\\n        uint256 afterInboxBatchEndCount,\\n        bytes32 afterInboxBatchAcc,\\n        bytes32[3][2] assertionBytes32Fields,\\n        uint256[4][2] assertionIntFields\\n    );\\n\\n    event NodeConfirmed(\\n        uint256 indexed nodeNum,\\n        bytes32 afterSendAcc,\\n        uint256 afterSendCount,\\n        bytes32 afterLogAcc,\\n        uint256 afterLogCount\\n    );\\n\\n    event NodeRejected(uint256 indexed nodeNum);\\n\\n    event RollupChallengeStarted(\\n        address indexed challengeContract,\\n        address asserter,\\n        address challenger,\\n        uint256 challengedNode\\n    );\\n\\n    event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance);\\n\\n    event UserWithdrawableFundsUpdated(\\n        address indexed user,\\n        uint256 initialBalance,\\n        uint256 finalBalance\\n    );\\n\\n    function getNode(uint256 nodeNum) external view returns (INode);\\n\\n    /**\\n     * @notice Get the address of the staker at the given index\\n     * @param stakerNum Index of the staker\\n     * @return Address of the staker\\n     */\\n    function getStakerAddress(uint256 stakerNum) external view returns (address);\\n\\n    /**\\n     * @notice Check whether the given staker is staked\\n     * @param staker Staker address to check\\n     * @return True or False for whether the staker was staked\\n     */\\n    function isStaked(address staker) external view returns (bool);\\n\\n    /**\\n     * @notice Get the latest staked node of the given staker\\n     * @param staker Staker address to lookup\\n     * @return Latest node staked of the staker\\n     */\\n    function latestStakedNode(address staker) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the current challenge of the given staker\\n     * @param staker Staker address to lookup\\n     * @return Current challenge of the staker\\n     */\\n    function currentChallenge(address staker) external view returns (address);\\n\\n    /**\\n     * @notice Get the amount staked of the given staker\\n     * @param staker Staker address to lookup\\n     * @return Amount staked of the staker\\n     */\\n    function amountStaked(address staker) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the original staker address of the zombie at the given index\\n     * @param zombieNum Index of the zombie to lookup\\n     * @return Original staker address of the zombie\\n     */\\n    function zombieAddress(uint256 zombieNum) external view returns (address);\\n\\n    /**\\n     * @notice Get Latest node that the given zombie at the given index is staked on\\n     * @param zombieNum Index of the zombie to lookup\\n     * @return Latest node that the given zombie is staked on\\n     */\\n    function zombieLatestStakedNode(uint256 zombieNum) external view returns (uint256);\\n\\n    /// @return Current number of un-removed zombies\\n    function zombieCount() external view returns (uint256);\\n\\n    function isZombie(address staker) external view returns (bool);\\n\\n    /**\\n     * @notice Get the amount of funds withdrawable by the given address\\n     * @param owner Address to check the funds of\\n     * @return Amount of funds withdrawable by owner\\n     */\\n    function withdrawableFunds(address owner) external view returns (uint256);\\n\\n    /**\\n     * @return Index of the first unresolved node\\n     * @dev If all nodes have been resolved, this will be latestNodeCreated + 1\\n     */\\n    function firstUnresolvedNode() external view returns (uint256);\\n\\n    /// @return Index of the latest confirmed node\\n    function latestConfirmed() external view returns (uint256);\\n\\n    /// @return Index of the latest rollup node created\\n    function latestNodeCreated() external view returns (uint256);\\n\\n    /// @return Ethereum block that the most recent stake was created\\n    function lastStakeBlock() external view returns (uint256);\\n\\n    /// @return Number of active stakers currently staked\\n    function stakerCount() external view returns (uint256);\\n\\n    /// @return Node hash as of this node number\\n    function getNodeHash(uint256 index) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xfb9cf4d73dd17b1c3369c7197126c67650588d6bd241c713a2c780dcdee9e10c\",\"license\":\"Apache-2.0\"},\"contracts/rollup/Rollup.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./RollupEventBridge.sol\\\";\\nimport \\\"./RollupCore.sol\\\";\\nimport \\\"./RollupLib.sol\\\";\\nimport \\\"./INode.sol\\\";\\nimport \\\"./INodeFactory.sol\\\";\\n\\nimport \\\"../challenge/IChallenge.sol\\\";\\nimport \\\"../challenge/IChallengeFactory.sol\\\";\\n\\nimport \\\"../bridge/interfaces/IBridge.sol\\\";\\nimport \\\"../bridge/interfaces/IOutbox.sol\\\";\\nimport \\\"../bridge/Messages.sol\\\";\\n\\nimport \\\"../libraries/ProxyUtil.sol\\\";\\nimport \\\"../libraries/Cloneable.sol\\\";\\nimport \\\"./facets/IRollupFacets.sol\\\";\\n\\nabstract contract RollupBase is Cloneable, RollupCore, Pausable {\\n    // Rollup Config\\n    uint256 public confirmPeriodBlocks;\\n    uint256 public extraChallengeTimeBlocks;\\n    uint256 public avmGasSpeedLimitPerBlock;\\n    uint256 public baseStake;\\n\\n    // Bridge is an IInbox and IOutbox\\n    IBridge public delayedBridge;\\n    ISequencerInbox public sequencerBridge;\\n    IOutbox public outbox;\\n    RollupEventBridge public rollupEventBridge;\\n    IChallengeFactory public challengeFactory;\\n    INodeFactory public nodeFactory;\\n    address public owner;\\n    address public stakeToken;\\n    uint256 public minimumAssertionPeriod;\\n\\n    uint256 public STORAGE_GAP_1;\\n    uint256 public STORAGE_GAP_2;\\n    uint256 public challengeExecutionBisectionDegree;\\n\\n    address[] internal facets;\\n\\n    mapping(address => bool) isValidator;\\n\\n    /// @notice DEPRECATED -- this method is deprecated but still mantained for backward compatibility\\n    /// @dev this actually returns the avmGasSpeedLimitPerBlock\\n    /// @return this actually returns the avmGasSpeedLimitPerBlock\\n    function arbGasSpeedLimitPerBlock() external view returns (uint256) {\\n        return avmGasSpeedLimitPerBlock;\\n    }\\n}\\n\\ncontract Rollup is Proxy, RollupBase {\\n    using Address for address;\\n\\n    constructor(uint256 _confirmPeriodBlocks) public Cloneable() Pausable() {\\n        // constructor is used so logic contract can't be init'ed\\n        confirmPeriodBlocks = _confirmPeriodBlocks;\\n        require(isInit(), \\\"CONSTRUCTOR_NOT_INIT\\\");\\n    }\\n\\n    function isInit() internal view returns (bool) {\\n        return confirmPeriodBlocks != 0;\\n    }\\n\\n    // _rollupParams = [ confirmPeriodBlocks, extraChallengeTimeBlocks, avmGasSpeedLimitPerBlock, baseStake ]\\n    // connectedContracts = [delayedBridge, sequencerInbox, outbox, rollupEventBridge, challengeFactory, nodeFactory]\\n    function initialize(\\n        bytes32 _machineHash,\\n        uint256[4] calldata _rollupParams,\\n        address _stakeToken,\\n        address _owner,\\n        bytes calldata _extraConfig,\\n        address[6] calldata connectedContracts,\\n        address[2] calldata _facets,\\n        uint256[2] calldata sequencerInboxParams\\n    ) public {\\n        require(!isInit(), \\\"ALREADY_INIT\\\");\\n\\n        // calls initialize method in user facet\\n        require(_facets[0].isContract(), \\\"FACET_0_NOT_CONTRACT\\\");\\n        require(_facets[1].isContract(), \\\"FACET_1_NOT_CONTRACT\\\");\\n        (bool success, ) = _facets[1].delegatecall(\\n            abi.encodeWithSelector(IRollupUser.initialize.selector, _stakeToken)\\n        );\\n        require(success, \\\"FAIL_INIT_FACET\\\");\\n\\n        delayedBridge = IBridge(connectedContracts[0]);\\n        sequencerBridge = ISequencerInbox(connectedContracts[1]);\\n        outbox = IOutbox(connectedContracts[2]);\\n        delayedBridge.setOutbox(connectedContracts[2], true);\\n        rollupEventBridge = RollupEventBridge(connectedContracts[3]);\\n        delayedBridge.setInbox(connectedContracts[3], true);\\n\\n        rollupEventBridge.rollupInitialized(\\n            _rollupParams[0],\\n            _rollupParams[2],\\n            _owner,\\n            _extraConfig\\n        );\\n\\n        challengeFactory = IChallengeFactory(connectedContracts[4]);\\n        nodeFactory = INodeFactory(connectedContracts[5]);\\n\\n        INode node = createInitialNode(_machineHash);\\n        initializeCore(node);\\n\\n        confirmPeriodBlocks = _rollupParams[0];\\n        extraChallengeTimeBlocks = _rollupParams[1];\\n        avmGasSpeedLimitPerBlock = _rollupParams[2];\\n        baseStake = _rollupParams[3];\\n        owner = _owner;\\n        // A little over 15 minutes\\n        minimumAssertionPeriod = 75;\\n        challengeExecutionBisectionDegree = 400;\\n\\n        sequencerBridge.setMaxDelay(sequencerInboxParams[0], sequencerInboxParams[1]);\\n\\n        // facets[0] == admin, facets[1] == user\\n        facets = _facets;\\n\\n        emit RollupCreated(_machineHash);\\n        require(isInit(), \\\"INITIALIZE_NOT_INIT\\\");\\n    }\\n\\n    function postUpgradeInit() external {\\n        // it is assumed the rollup contract is behind a Proxy controlled by a proxy admin\\n        // this function can only be called by the proxy admin contract\\n        address proxyAdmin = ProxyUtil.getProxyAdmin();\\n        require(msg.sender == proxyAdmin, \\\"NOT_FROM_ADMIN\\\");\\n\\n        // this upgrade moves the delay blocks and seconds tracking to the sequencer inbox\\n        // because of that we need to update the admin facet logic to allow the owner to set\\n        // these values in the sequencer inbox\\n\\n        STORAGE_GAP_1 = 0;\\n        STORAGE_GAP_2 = 0;\\n    }\\n\\n    function createInitialNode(bytes32 _machineHash) private returns (INode) {\\n        bytes32 state = RollupLib.stateHash(\\n            RollupLib.ExecutionState(\\n                0, // total gas used\\n                _machineHash,\\n                0, // inbox count\\n                0, // send count\\n                0, // log count\\n                0, // send acc\\n                0, // log acc\\n                block.number, // block proposed\\n                1 // Initialization message already in inbox\\n            )\\n        );\\n        return\\n            INode(\\n                nodeFactory.createNode(\\n                    state,\\n                    0, // challenge hash (not challengeable)\\n                    0, // confirm data\\n                    0, // prev node\\n                    block.number // deadline block (not challengeable)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * This contract uses a dispatch pattern from EIP-2535: Diamonds\\n     * together with Open Zeppelin's proxy\\n     */\\n\\n    function getFacets() external view returns (address, address) {\\n        return (getAdminFacet(), getUserFacet());\\n    }\\n\\n    function getAdminFacet() public view returns (address) {\\n        return facets[0];\\n    }\\n\\n    function getUserFacet() public view returns (address) {\\n        return facets[1];\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        require(msg.data.length >= 4, \\\"NO_FUNC_SIG\\\");\\n        address rollupOwner = owner;\\n        // if there is an owner and it is the sender, delegate to admin facet\\n        address target = rollupOwner != address(0) && rollupOwner == msg.sender\\n            ? getAdminFacet()\\n            : getUserFacet();\\n        require(target.isContract(), \\\"TARGET_NOT_CONTRACT\\\");\\n        return target;\\n    }\\n}\\n\",\"keccak256\":\"0x8fb3705f2bd54a0450e0245fbb8f17c215b825a57300491fbf3d39266cb8a97e\",\"license\":\"Apache-2.0\"},\"contracts/rollup/RollupCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./INode.sol\\\";\\nimport \\\"./IRollupCore.sol\\\";\\nimport \\\"./RollupLib.sol\\\";\\nimport \\\"./INodeFactory.sol\\\";\\nimport \\\"./RollupEventBridge.sol\\\";\\nimport \\\"../bridge/interfaces/ISequencerInbox.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract RollupCore is IRollupCore {\\n    using SafeMath for uint256;\\n\\n    // Stakers become Zombies after losing a challenge\\n    struct Zombie {\\n        address stakerAddress;\\n        uint256 latestStakedNode;\\n    }\\n\\n    struct Staker {\\n        uint256 index;\\n        uint256 latestStakedNode;\\n        uint256 amountStaked;\\n        // currentChallenge is 0 if staker is not in a challenge\\n        address currentChallenge;\\n        bool isStaked;\\n    }\\n\\n    uint256 private _latestConfirmed;\\n    uint256 private _firstUnresolvedNode;\\n    uint256 private _latestNodeCreated;\\n    uint256 private _lastStakeBlock;\\n    mapping(uint256 => INode) private _nodes;\\n    mapping(uint256 => bytes32) private _nodeHashes;\\n\\n    address payable[] private _stakerList;\\n    mapping(address => Staker) public override _stakerMap;\\n\\n    Zombie[] private _zombies;\\n\\n    mapping(address => uint256) private _withdrawableFunds;\\n\\n    /**\\n     * @notice Get the address of the Node contract for the given node\\n     * @param nodeNum Index of the node\\n     * @return Address of the Node contract\\n     */\\n    function getNode(uint256 nodeNum) public view override returns (INode) {\\n        return _nodes[nodeNum];\\n    }\\n\\n    /**\\n     * @notice Get the address of the staker at the given index\\n     * @param stakerNum Index of the staker\\n     * @return Address of the staker\\n     */\\n    function getStakerAddress(uint256 stakerNum) external view override returns (address) {\\n        return _stakerList[stakerNum];\\n    }\\n\\n    /**\\n     * @notice Check whether the given staker is staked\\n     * @param staker Staker address to check\\n     * @return True or False for whether the staker was staked\\n     */\\n    function isStaked(address staker) public view override returns (bool) {\\n        return _stakerMap[staker].isStaked;\\n    }\\n\\n    /**\\n     * @notice Get the latest staked node of the given staker\\n     * @param staker Staker address to lookup\\n     * @return Latest node staked of the staker\\n     */\\n    function latestStakedNode(address staker) public view override returns (uint256) {\\n        return _stakerMap[staker].latestStakedNode;\\n    }\\n\\n    /**\\n     * @notice Get the current challenge of the given staker\\n     * @param staker Staker address to lookup\\n     * @return Current challenge of the staker\\n     */\\n    function currentChallenge(address staker) public view override returns (address) {\\n        return _stakerMap[staker].currentChallenge;\\n    }\\n\\n    /**\\n     * @notice Get the amount staked of the given staker\\n     * @param staker Staker address to lookup\\n     * @return Amount staked of the staker\\n     */\\n    function amountStaked(address staker) public view override returns (uint256) {\\n        return _stakerMap[staker].amountStaked;\\n    }\\n\\n    /**\\n     * @notice Get the original staker address of the zombie at the given index\\n     * @param zombieNum Index of the zombie to lookup\\n     * @return Original staker address of the zombie\\n     */\\n    function zombieAddress(uint256 zombieNum) public view override returns (address) {\\n        return _zombies[zombieNum].stakerAddress;\\n    }\\n\\n    /**\\n     * @notice Get Latest node that the given zombie at the given index is staked on\\n     * @param zombieNum Index of the zombie to lookup\\n     * @return Latest node that the given zombie is staked on\\n     */\\n    function zombieLatestStakedNode(uint256 zombieNum) public view override returns (uint256) {\\n        return _zombies[zombieNum].latestStakedNode;\\n    }\\n\\n    /// @return Current number of un-removed zombies\\n    function zombieCount() public view override returns (uint256) {\\n        return _zombies.length;\\n    }\\n\\n    function isZombie(address staker) public view override returns (bool) {\\n        for (uint256 i = 0; i < _zombies.length; i++) {\\n            if (staker == _zombies[i].stakerAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Get the amount of funds withdrawable by the given address\\n     * @param owner Address to check the funds of\\n     * @return Amount of funds withdrawable by owner\\n     */\\n    function withdrawableFunds(address owner) external view override returns (uint256) {\\n        return _withdrawableFunds[owner];\\n    }\\n\\n    /**\\n     * @return Index of the first unresolved node\\n     * @dev If all nodes have been resolved, this will be latestNodeCreated + 1\\n     */\\n    function firstUnresolvedNode() public view override returns (uint256) {\\n        return _firstUnresolvedNode;\\n    }\\n\\n    /// @return Index of the latest confirmed node\\n    function latestConfirmed() public view override returns (uint256) {\\n        return _latestConfirmed;\\n    }\\n\\n    /// @return Index of the latest rollup node created\\n    function latestNodeCreated() public view override returns (uint256) {\\n        return _latestNodeCreated;\\n    }\\n\\n    /// @return Ethereum block that the most recent stake was created\\n    function lastStakeBlock() external view override returns (uint256) {\\n        return _lastStakeBlock;\\n    }\\n\\n    /// @return Number of active stakers currently staked\\n    function stakerCount() public view override returns (uint256) {\\n        return _stakerList.length;\\n    }\\n\\n    /**\\n     * @notice Initialize the core with an initial node\\n     * @param initialNode Initial node to start the chain with\\n     */\\n    function initializeCore(INode initialNode) internal {\\n        _nodes[0] = initialNode;\\n        _firstUnresolvedNode = 1;\\n    }\\n\\n    /**\\n     * @notice React to a new node being created by storing it an incrementing the latest node counter\\n     * @param node Node that was newly created\\n     * @param nodeHash The hash of said node\\n     */\\n    function nodeCreated(INode node, bytes32 nodeHash) internal {\\n        _latestNodeCreated++;\\n        _nodes[_latestNodeCreated] = node;\\n        _nodeHashes[_latestNodeCreated] = nodeHash;\\n    }\\n\\n    /// @return Node hash as of this node number\\n    function getNodeHash(uint256 index) public view override returns (bytes32) {\\n        return _nodeHashes[index];\\n    }\\n\\n    /// @notice Reject the next unresolved node\\n    function _rejectNextNode() internal {\\n        destroyNode(_firstUnresolvedNode);\\n        _firstUnresolvedNode++;\\n    }\\n\\n    /// @notice Confirm the next unresolved node\\n    function confirmNextNode(\\n        bytes32 beforeSendAcc,\\n        bytes calldata sendsData,\\n        uint256[] calldata sendLengths,\\n        uint256 afterSendCount,\\n        bytes32 afterLogAcc,\\n        uint256 afterLogCount,\\n        IOutbox outbox,\\n        RollupEventBridge rollupEventBridge\\n    ) internal {\\n        confirmNode(\\n            _firstUnresolvedNode,\\n            beforeSendAcc,\\n            sendsData,\\n            sendLengths,\\n            afterSendCount,\\n            afterLogAcc,\\n            afterLogCount,\\n            outbox,\\n            rollupEventBridge\\n        );\\n    }\\n\\n    function confirmNode(\\n        uint256 nodeNum,\\n        bytes32 beforeSendAcc,\\n        bytes calldata sendsData,\\n        uint256[] calldata sendLengths,\\n        uint256 afterSendCount,\\n        bytes32 afterLogAcc,\\n        uint256 afterLogCount,\\n        IOutbox outbox,\\n        RollupEventBridge rollupEventBridge\\n    ) internal {\\n        bytes32 afterSendAcc = RollupLib.feedAccumulator(sendsData, sendLengths, beforeSendAcc);\\n\\n        INode node = getNode(nodeNum);\\n        // Authenticate data against node's confirm data pre-image\\n        require(\\n            node.confirmData() ==\\n                RollupLib.confirmHash(\\n                    beforeSendAcc,\\n                    afterSendAcc,\\n                    afterLogAcc,\\n                    afterSendCount,\\n                    afterLogCount\\n                ),\\n            \\\"CONFIRM_DATA\\\"\\n        );\\n\\n        // trusted external call to outbox\\n        outbox.processOutgoingMessages(sendsData, sendLengths);\\n\\n        destroyNode(_latestConfirmed);\\n        _latestConfirmed = nodeNum;\\n        _firstUnresolvedNode = nodeNum + 1;\\n\\n        rollupEventBridge.nodeConfirmed(nodeNum);\\n        emit NodeConfirmed(nodeNum, afterSendAcc, afterSendCount, afterLogAcc, afterLogCount);\\n    }\\n\\n    /**\\n     * @notice Create a new stake at latest confirmed node\\n     * @param stakerAddress Address of the new staker\\n     * @param depositAmount Stake amount of the new staker\\n     */\\n    function createNewStake(address payable stakerAddress, uint256 depositAmount) internal {\\n        uint256 stakerIndex = _stakerList.length;\\n        _stakerList.push(stakerAddress);\\n        _stakerMap[stakerAddress] = Staker(\\n            stakerIndex,\\n            _latestConfirmed,\\n            depositAmount,\\n            address(0), // new staker is not in challenge\\n            true\\n        );\\n        _lastStakeBlock = block.number;\\n        emit UserStakeUpdated(stakerAddress, 0, depositAmount);\\n    }\\n\\n    /**\\n     * @notice Check to see whether the two stakers are in the same challenge\\n     * @param stakerAddress1 Address of the first staker\\n     * @param stakerAddress2 Address of the second staker\\n     * @return Address of the challenge that the two stakers are in\\n     */\\n    function inChallenge(address stakerAddress1, address stakerAddress2)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        Staker storage staker1 = _stakerMap[stakerAddress1];\\n        Staker storage staker2 = _stakerMap[stakerAddress2];\\n        address challenge = staker1.currentChallenge;\\n        require(challenge != address(0), \\\"NO_CHAL\\\");\\n        require(challenge == staker2.currentChallenge, \\\"DIFF_IN_CHAL\\\");\\n        return challenge;\\n    }\\n\\n    /**\\n     * @notice Make the given staker as not being in a challenge\\n     * @param stakerAddress Address of the staker to remove from a challenge\\n     */\\n    function clearChallenge(address stakerAddress) internal {\\n        Staker storage staker = _stakerMap[stakerAddress];\\n        staker.currentChallenge = address(0);\\n    }\\n\\n    /**\\n     * @notice Mark both the given stakers as engaged in the challenge\\n     * @param staker1 Address of the first staker\\n     * @param staker2 Address of the second staker\\n     * @param challenge Address of the challenge both stakers are now in\\n     */\\n    function challengeStarted(\\n        address staker1,\\n        address staker2,\\n        address challenge\\n    ) internal {\\n        _stakerMap[staker1].currentChallenge = challenge;\\n        _stakerMap[staker2].currentChallenge = challenge;\\n    }\\n\\n    /**\\n     * @notice Add to the stake of the given staker by the given amount\\n     * @param stakerAddress Address of the staker to increase the stake of\\n     * @param amountAdded Amount of stake to add to the staker\\n     */\\n    function increaseStakeBy(address stakerAddress, uint256 amountAdded) internal {\\n        Staker storage staker = _stakerMap[stakerAddress];\\n        uint256 initialStaked = staker.amountStaked;\\n        uint256 finalStaked = initialStaked.add(amountAdded);\\n        staker.amountStaked = finalStaked;\\n        emit UserStakeUpdated(stakerAddress, initialStaked, finalStaked);\\n    }\\n\\n    /**\\n     * @notice Reduce the stake of the given staker to the given target\\n     * @param stakerAddress Address of the staker to reduce the stake of\\n     * @param target Amount of stake to leave with the staker\\n     * @return Amount of value released from the stake\\n     */\\n    function reduceStakeTo(address stakerAddress, uint256 target) internal returns (uint256) {\\n        Staker storage staker = _stakerMap[stakerAddress];\\n        uint256 current = staker.amountStaked;\\n        require(target <= current, \\\"TOO_LITTLE_STAKE\\\");\\n        uint256 amountWithdrawn = current.sub(target);\\n        staker.amountStaked = target;\\n        increaseWithdrawableFunds(stakerAddress, amountWithdrawn);\\n        emit UserStakeUpdated(stakerAddress, current, target);\\n        return amountWithdrawn;\\n    }\\n\\n    /**\\n     * @notice Remove the given staker and turn them into a zombie\\n     * @param stakerAddress Address of the staker to remove\\n     */\\n    function turnIntoZombie(address stakerAddress) internal {\\n        Staker storage staker = _stakerMap[stakerAddress];\\n        _zombies.push(Zombie(stakerAddress, staker.latestStakedNode));\\n        deleteStaker(stakerAddress);\\n    }\\n\\n    /**\\n     * @notice Update the latest staked node of the zombie at the given index\\n     * @param zombieNum Index of the zombie to move\\n     * @param latest New latest node the zombie is staked on\\n     */\\n    function zombieUpdateLatestStakedNode(uint256 zombieNum, uint256 latest) internal {\\n        _zombies[zombieNum].latestStakedNode = latest;\\n    }\\n\\n    /**\\n     * @notice Remove the zombie at the given index\\n     * @param zombieNum Index of the zombie to remove\\n     */\\n    function removeZombie(uint256 zombieNum) internal {\\n        _zombies[zombieNum] = _zombies[_zombies.length - 1];\\n        _zombies.pop();\\n    }\\n\\n    /**\\n     * @notice Remove the given staker and return their stake\\n     * @param stakerAddress Address of the staker withdrawing their stake\\n     */\\n    function withdrawStaker(address stakerAddress) internal {\\n        Staker storage staker = _stakerMap[stakerAddress];\\n        uint256 initialStaked = staker.amountStaked;\\n        increaseWithdrawableFunds(stakerAddress, initialStaked);\\n        deleteStaker(stakerAddress);\\n        emit UserStakeUpdated(stakerAddress, initialStaked, 0);\\n    }\\n\\n    /**\\n     * @notice Advance the given staker to the given node\\n     * @param stakerAddress Address of the staker adding their stake\\n     * @param nodeNum Index of the node to stake on\\n     */\\n    function stakeOnNode(\\n        address stakerAddress,\\n        uint256 nodeNum,\\n        uint256 confirmPeriodBlocks\\n    ) internal {\\n        Staker storage staker = _stakerMap[stakerAddress];\\n        INode node = _nodes[nodeNum];\\n        uint256 newStakerCount = node.addStaker(stakerAddress);\\n        staker.latestStakedNode = nodeNum;\\n        if (newStakerCount == 1) {\\n            INode parent = _nodes[node.prev()];\\n            parent.newChildConfirmDeadline(block.number.add(confirmPeriodBlocks));\\n        }\\n    }\\n\\n    /**\\n     * @notice Clear the withdrawable funds for the given address\\n     * @param owner Address of the account to remove funds from\\n     * @return Amount of funds removed from account\\n     */\\n    function withdrawFunds(address owner) internal returns (uint256) {\\n        uint256 amount = _withdrawableFunds[owner];\\n        _withdrawableFunds[owner] = 0;\\n        emit UserWithdrawableFundsUpdated(owner, amount, 0);\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Increase the withdrawable funds for the given address\\n     * @param owner Address of the account to add withdrawable funds to\\n     */\\n    function increaseWithdrawableFunds(address owner, uint256 amount) internal {\\n        uint256 initialWithdrawable = _withdrawableFunds[owner];\\n        uint256 finalWithdrawable = initialWithdrawable.add(amount);\\n        _withdrawableFunds[owner] = finalWithdrawable;\\n        emit UserWithdrawableFundsUpdated(owner, initialWithdrawable, finalWithdrawable);\\n    }\\n\\n    /**\\n     * @notice Remove the given staker\\n     * @param stakerAddress Address of the staker to remove\\n     */\\n    function deleteStaker(address stakerAddress) private {\\n        Staker storage staker = _stakerMap[stakerAddress];\\n        uint256 stakerIndex = staker.index;\\n        _stakerList[stakerIndex] = _stakerList[_stakerList.length - 1];\\n        _stakerMap[_stakerList[stakerIndex]].index = stakerIndex;\\n        _stakerList.pop();\\n        delete _stakerMap[stakerAddress];\\n    }\\n\\n    /**\\n     * @notice Destroy the given node and clear out its address\\n     * @param nodeNum Index of the node to remove\\n     */\\n    function destroyNode(uint256 nodeNum) internal {\\n        _nodes[nodeNum].destroy();\\n        _nodes[nodeNum] = INode(0);\\n    }\\n\\n    function nodeDeadline(\\n        uint256 avmGasSpeedLimitPerBlock,\\n        uint256 gasUsed,\\n        uint256 confirmPeriodBlocks,\\n        INode prevNode\\n    ) internal view returns (uint256 deadlineBlock) {\\n        // Set deadline rounding up to the nearest block\\n        uint256 checkTime = gasUsed.add(avmGasSpeedLimitPerBlock.sub(1)).div(\\n            avmGasSpeedLimitPerBlock\\n        );\\n\\n        deadlineBlock = max(block.number.add(confirmPeriodBlocks), prevNode.deadlineBlock()).add(\\n            checkTime\\n        );\\n\\n        uint256 olderSibling = prevNode.latestChildNumber();\\n        if (olderSibling != 0) {\\n            deadlineBlock = max(deadlineBlock, getNode(olderSibling).deadlineBlock());\\n        }\\n        return deadlineBlock;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    struct StakeOnNewNodeFrame {\\n        uint256 currentInboxSize;\\n        INode node;\\n        bytes32 executionHash;\\n        INode prevNode;\\n        bytes32 lastHash;\\n        bool hasSibling;\\n        uint256 deadlineBlock;\\n        uint256 gasUsed;\\n        uint256 sequencerBatchEnd;\\n        bytes32 sequencerBatchAcc;\\n    }\\n\\n    struct CreateNodeDataFrame {\\n        uint256 prevNode;\\n        uint256 confirmPeriodBlocks;\\n        uint256 avmGasSpeedLimitPerBlock;\\n        ISequencerInbox sequencerInbox;\\n        RollupEventBridge rollupEventBridge;\\n        INodeFactory nodeFactory;\\n    }\\n\\n    uint8 internal constant MAX_SEND_COUNT = 100;\\n\\n    function createNewNode(\\n        RollupLib.Assertion memory assertion,\\n        bytes32[3][2] calldata assertionBytes32Fields,\\n        uint256[4][2] calldata assertionIntFields,\\n        bytes calldata sequencerBatchProof,\\n        CreateNodeDataFrame memory inputDataFrame,\\n        bytes32 expectedNodeHash\\n    ) internal returns (bytes32 newNodeHash) {\\n        StakeOnNewNodeFrame memory memoryFrame;\\n        {\\n            // validate data\\n            memoryFrame.gasUsed = RollupLib.assertionGasUsed(assertion);\\n            memoryFrame.prevNode = getNode(inputDataFrame.prevNode);\\n            memoryFrame.currentInboxSize = inputDataFrame.sequencerInbox.messageCount();\\n\\n            // Make sure the previous state is correct against the node being built on\\n            require(\\n                RollupLib.stateHash(assertion.beforeState) == memoryFrame.prevNode.stateHash(),\\n                \\\"PREV_STATE_HASH\\\"\\n            );\\n\\n            // Ensure that the assertion doesn't read past the end of the current inbox\\n            require(\\n                assertion.afterState.inboxCount <= memoryFrame.currentInboxSize,\\n                \\\"INBOX_PAST_END\\\"\\n            );\\n            // Insure inbox tip after assertion is included in a sequencer-inbox batch and return inbox acc; this gives replay protection against the state of the inbox\\n            (memoryFrame.sequencerBatchEnd, memoryFrame.sequencerBatchAcc) = inputDataFrame\\n                .sequencerInbox\\n                .proveInboxContainsMessage(sequencerBatchProof, assertion.afterState.inboxCount);\\n        }\\n\\n        {\\n            memoryFrame.executionHash = RollupLib.executionHash(assertion);\\n\\n            memoryFrame.deadlineBlock = nodeDeadline(\\n                inputDataFrame.avmGasSpeedLimitPerBlock,\\n                memoryFrame.gasUsed,\\n                inputDataFrame.confirmPeriodBlocks,\\n                memoryFrame.prevNode\\n            );\\n\\n            memoryFrame.hasSibling = memoryFrame.prevNode.latestChildNumber() > 0;\\n            // here we don't use ternacy operator to remain compatible with slither\\n            if (memoryFrame.hasSibling) {\\n                memoryFrame.lastHash = getNodeHash(memoryFrame.prevNode.latestChildNumber());\\n            } else {\\n                memoryFrame.lastHash = getNodeHash(inputDataFrame.prevNode);\\n            }\\n\\n            memoryFrame.node = INode(\\n                inputDataFrame.nodeFactory.createNode(\\n                    RollupLib.stateHash(assertion.afterState),\\n                    RollupLib.challengeRoot(assertion, memoryFrame.executionHash, block.number),\\n                    RollupLib.confirmHash(assertion),\\n                    inputDataFrame.prevNode,\\n                    memoryFrame.deadlineBlock\\n                )\\n            );\\n        }\\n\\n        {\\n            uint256 nodeNum = latestNodeCreated() + 1;\\n            memoryFrame.prevNode.childCreated(nodeNum);\\n\\n            newNodeHash = RollupLib.nodeHash(\\n                memoryFrame.hasSibling,\\n                memoryFrame.lastHash,\\n                memoryFrame.executionHash,\\n                memoryFrame.sequencerBatchAcc\\n            );\\n            require(newNodeHash == expectedNodeHash, \\\"UNEXPECTED_NODE_HASH\\\");\\n\\n            nodeCreated(memoryFrame.node, newNodeHash);\\n            inputDataFrame.rollupEventBridge.nodeCreated(\\n                nodeNum,\\n                inputDataFrame.prevNode,\\n                memoryFrame.deadlineBlock,\\n                msg.sender\\n            );\\n        }\\n\\n        emit NodeCreated(\\n            latestNodeCreated(),\\n            getNodeHash(inputDataFrame.prevNode),\\n            newNodeHash,\\n            memoryFrame.executionHash,\\n            memoryFrame.currentInboxSize,\\n            memoryFrame.sequencerBatchEnd,\\n            memoryFrame.sequencerBatchAcc,\\n            assertionBytes32Fields,\\n            assertionIntFields\\n        );\\n\\n        return newNodeHash;\\n    }\\n}\\n\",\"keccak256\":\"0xb07efbc017c1f0ff3c538fad17d6e6f8075d2ab17c0d0edf075e8cd996503e87\",\"license\":\"Apache-2.0\"},\"contracts/rollup/RollupEventBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./Rollup.sol\\\";\\nimport \\\"./facets/IRollupFacets.sol\\\";\\n\\nimport \\\"../bridge/interfaces/IBridge.sol\\\";\\nimport \\\"../bridge/interfaces/IMessageProvider.sol\\\";\\nimport \\\"./INode.sol\\\";\\nimport \\\"../libraries/Cloneable.sol\\\";\\n\\ncontract RollupEventBridge is IMessageProvider, Cloneable {\\n    uint8 internal constant INITIALIZATION_MSG_TYPE = 11;\\n    uint8 internal constant ROLLUP_PROTOCOL_EVENT_TYPE = 8;\\n\\n    uint8 internal constant CREATE_NODE_EVENT = 0;\\n    uint8 internal constant CONFIRM_NODE_EVENT = 1;\\n    uint8 internal constant REJECT_NODE_EVENT = 2;\\n    uint8 internal constant STAKE_CREATED_EVENT = 3;\\n\\n    IBridge bridge;\\n    address rollup;\\n\\n    modifier onlyRollup() {\\n        require(msg.sender == rollup, \\\"ONLY_ROLLUP\\\");\\n        _;\\n    }\\n\\n    function initialize(address _bridge, address _rollup) external {\\n        require(rollup == address(0), \\\"ALREADY_INIT\\\");\\n        bridge = IBridge(_bridge);\\n        rollup = _rollup;\\n    }\\n\\n    function rollupInitialized(\\n        uint256 confirmPeriodBlocks,\\n        uint256 avmGasSpeedLimitPerBlock,\\n        address owner,\\n        bytes calldata extraConfig\\n    ) external onlyRollup {\\n        bytes memory initMsg = abi.encodePacked(\\n            keccak256(\\\"ChallengePeriodEthBlocks\\\"),\\n            confirmPeriodBlocks,\\n            keccak256(\\\"SpeedLimitPerSecond\\\"),\\n            avmGasSpeedLimitPerBlock / 100, // convert avm gas to arbgas\\n            keccak256(\\\"ChainOwner\\\"),\\n            uint256(uint160(bytes20(owner))),\\n            extraConfig\\n        );\\n        uint256 num = bridge.deliverMessageToInbox(\\n            INITIALIZATION_MSG_TYPE,\\n            address(0),\\n            keccak256(initMsg)\\n        );\\n        emit InboxMessageDelivered(num, initMsg);\\n    }\\n\\n    function nodeCreated(\\n        uint256 nodeNum,\\n        uint256 prev,\\n        uint256 deadline,\\n        address asserter\\n    ) external onlyRollup {\\n        deliverToBridge(\\n            abi.encodePacked(\\n                CREATE_NODE_EVENT,\\n                nodeNum,\\n                prev,\\n                block.number,\\n                deadline,\\n                uint256(uint160(bytes20(asserter)))\\n            )\\n        );\\n    }\\n\\n    function nodeConfirmed(uint256 nodeNum) external onlyRollup {\\n        deliverToBridge(abi.encodePacked(CONFIRM_NODE_EVENT, nodeNum));\\n    }\\n\\n    function nodeRejected(uint256 nodeNum) external onlyRollup {\\n        deliverToBridge(abi.encodePacked(REJECT_NODE_EVENT, nodeNum));\\n    }\\n\\n    function stakeCreated(address staker, uint256 nodeNum) external onlyRollup {\\n        deliverToBridge(\\n            abi.encodePacked(\\n                STAKE_CREATED_EVENT,\\n                uint256(uint160(bytes20(staker))),\\n                nodeNum,\\n                block.number\\n            )\\n        );\\n    }\\n\\n    function deliverToBridge(bytes memory message) private {\\n        emit InboxMessageDelivered(\\n            bridge.deliverMessageToInbox(\\n                ROLLUP_PROTOCOL_EVENT_TYPE,\\n                msg.sender,\\n                keccak256(message)\\n            ),\\n            message\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf6ae9ec53ae34b3cbdf797dc6258cbd73cc8afdb62bc0a8bbbb8a8a473519150\",\"license\":\"Apache-2.0\"},\"contracts/rollup/RollupLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"../challenge/ChallengeLib.sol\\\";\\nimport \\\"./INode.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary RollupLib {\\n    using SafeMath for uint256;\\n\\n    struct Config {\\n        bytes32 machineHash;\\n        uint256 confirmPeriodBlocks;\\n        uint256 extraChallengeTimeBlocks;\\n        uint256 avmGasSpeedLimitPerBlock;\\n        uint256 baseStake;\\n        address stakeToken;\\n        address owner;\\n        address sequencer;\\n        uint256 sequencerDelayBlocks;\\n        uint256 sequencerDelaySeconds;\\n        bytes extraConfig;\\n    }\\n\\n    struct ExecutionState {\\n        uint256 gasUsed;\\n        bytes32 machineHash;\\n        uint256 inboxCount;\\n        uint256 sendCount;\\n        uint256 logCount;\\n        bytes32 sendAcc;\\n        bytes32 logAcc;\\n        uint256 proposedBlock;\\n        uint256 inboxMaxCount;\\n    }\\n\\n    function stateHash(ExecutionState memory execState) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    execState.gasUsed,\\n                    execState.machineHash,\\n                    execState.inboxCount,\\n                    execState.sendCount,\\n                    execState.logCount,\\n                    execState.sendAcc,\\n                    execState.logAcc,\\n                    execState.proposedBlock,\\n                    execState.inboxMaxCount\\n                )\\n            );\\n    }\\n\\n    struct Assertion {\\n        ExecutionState beforeState;\\n        ExecutionState afterState;\\n    }\\n\\n    function decodeExecutionState(\\n        bytes32[3] memory bytes32Fields,\\n        uint256[4] memory intFields,\\n        uint256 proposedBlock,\\n        uint256 inboxMaxCount\\n    ) internal pure returns (ExecutionState memory) {\\n        return\\n            ExecutionState(\\n                intFields[0],\\n                bytes32Fields[0],\\n                intFields[1],\\n                intFields[2],\\n                intFields[3],\\n                bytes32Fields[1],\\n                bytes32Fields[2],\\n                proposedBlock,\\n                inboxMaxCount\\n            );\\n    }\\n\\n    function decodeAssertion(\\n        bytes32[3][2] memory bytes32Fields,\\n        uint256[4][2] memory intFields,\\n        uint256 beforeProposedBlock,\\n        uint256 beforeInboxMaxCount,\\n        uint256 inboxMaxCount\\n    ) internal view returns (Assertion memory) {\\n        return\\n            Assertion(\\n                decodeExecutionState(\\n                    bytes32Fields[0],\\n                    intFields[0],\\n                    beforeProposedBlock,\\n                    beforeInboxMaxCount\\n                ),\\n                decodeExecutionState(bytes32Fields[1], intFields[1], block.number, inboxMaxCount)\\n            );\\n    }\\n\\n    function executionStateChallengeHash(ExecutionState memory state)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            ChallengeLib.assertionHash(\\n                state.gasUsed,\\n                ChallengeLib.assertionRestHash(\\n                    state.inboxCount,\\n                    state.machineHash,\\n                    state.sendAcc,\\n                    state.sendCount,\\n                    state.logAcc,\\n                    state.logCount\\n                )\\n            );\\n    }\\n\\n    function executionHash(Assertion memory assertion) internal pure returns (bytes32) {\\n        return\\n            ChallengeLib.bisectionChunkHash(\\n                assertion.beforeState.gasUsed,\\n                assertion.afterState.gasUsed - assertion.beforeState.gasUsed,\\n                RollupLib.executionStateChallengeHash(assertion.beforeState),\\n                RollupLib.executionStateChallengeHash(assertion.afterState)\\n            );\\n    }\\n\\n    function assertionGasUsed(RollupLib.Assertion memory assertion)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return assertion.afterState.gasUsed.sub(assertion.beforeState.gasUsed);\\n    }\\n\\n    function challengeRoot(\\n        Assertion memory assertion,\\n        bytes32 assertionExecHash,\\n        uint256 blockProposed\\n    ) internal pure returns (bytes32) {\\n        return challengeRootHash(assertionExecHash, blockProposed, assertion.afterState.inboxCount);\\n    }\\n\\n    function challengeRootHash(\\n        bytes32 execution,\\n        uint256 proposedTime,\\n        uint256 maxMessageCount\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(execution, proposedTime, maxMessageCount));\\n    }\\n\\n    function confirmHash(Assertion memory assertion) internal pure returns (bytes32) {\\n        return\\n            confirmHash(\\n                assertion.beforeState.sendAcc,\\n                assertion.afterState.sendAcc,\\n                assertion.afterState.logAcc,\\n                assertion.afterState.sendCount,\\n                assertion.afterState.logCount\\n            );\\n    }\\n\\n    function confirmHash(\\n        bytes32 beforeSendAcc,\\n        bytes32 afterSendAcc,\\n        bytes32 afterLogAcc,\\n        uint256 afterSendCount,\\n        uint256 afterLogCount\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    beforeSendAcc,\\n                    afterSendAcc,\\n                    afterSendCount,\\n                    afterLogAcc,\\n                    afterLogCount\\n                )\\n            );\\n    }\\n\\n    function feedAccumulator(\\n        bytes memory messageData,\\n        uint256[] memory messageLengths,\\n        bytes32 beforeAcc\\n    ) internal pure returns (bytes32) {\\n        uint256 offset = 0;\\n        uint256 messageCount = messageLengths.length;\\n        uint256 dataLength = messageData.length;\\n        bytes32 messageAcc = beforeAcc;\\n        for (uint256 i = 0; i < messageCount; i++) {\\n            uint256 messageLength = messageLengths[i];\\n            require(offset + messageLength <= dataLength, \\\"DATA_OVERRUN\\\");\\n            bytes32 messageHash;\\n            assembly {\\n                messageHash := keccak256(add(messageData, add(offset, 32)), messageLength)\\n            }\\n            messageAcc = keccak256(abi.encodePacked(messageAcc, messageHash));\\n            offset += messageLength;\\n        }\\n        require(offset == dataLength, \\\"DATA_LENGTH\\\");\\n        return messageAcc;\\n    }\\n\\n    function nodeHash(\\n        bool hasSibling,\\n        bytes32 lastHash,\\n        bytes32 assertionExecHash,\\n        bytes32 inboxAcc\\n    ) internal pure returns (bytes32) {\\n        uint8 hasSiblingInt = hasSibling ? 1 : 0;\\n        return keccak256(abi.encodePacked(hasSiblingInt, lastHash, assertionExecHash, inboxAcc));\\n    }\\n}\\n\",\"keccak256\":\"0x46b7c619e27f36a6ed2082aebf54a177806292c9a4b2eb1c531fdf2bf0077db9\",\"license\":\"Apache-2.0\"},\"contracts/rollup/facets/IRollupFacets.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"../INode.sol\\\";\\nimport \\\"../../bridge/interfaces/IOutbox.sol\\\";\\n\\ninterface IRollupUser {\\n    function initialize(address _stakeToken) external;\\n\\n    function completeChallenge(address winningStaker, address losingStaker) external;\\n\\n    function returnOldDeposit(address stakerAddress) external;\\n\\n    function requireUnresolved(uint256 nodeNum) external view;\\n\\n    function requireUnresolvedExists() external view;\\n\\n    function countStakedZombies(INode node) external view returns (uint256);\\n}\\n\\ninterface IRollupAdmin {\\n    event OwnerFunctionCalled(uint256 indexed id);\\n\\n    /**\\n     * @notice Add a contract authorized to put messages into this rollup's inbox\\n     * @param _outbox Outbox contract to add\\n     */\\n    function setOutbox(IOutbox _outbox) external;\\n\\n    /**\\n     * @notice Disable an old outbox from interacting with the bridge\\n     * @param _outbox Outbox contract to remove\\n     */\\n    function removeOldOutbox(address _outbox) external;\\n\\n    /**\\n     * @notice Enable or disable an inbox contract\\n     * @param _inbox Inbox contract to add or remove\\n     * @param _enabled New status of inbox\\n     */\\n    function setInbox(address _inbox, bool _enabled) external;\\n\\n    /**\\n     * @notice Pause interaction with the rollup contract\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @notice Resume interaction with the rollup contract\\n     */\\n    function resume() external;\\n\\n    /**\\n     * @notice Set the addresses of rollup logic facets called\\n     * @param newAdminFacet address of logic that owner of rollup calls\\n     * @param newUserFacet ddress of logic that user of rollup calls\\n     */\\n    function setFacets(address newAdminFacet, address newUserFacet) external;\\n\\n    /**\\n     * @notice Set the addresses of the validator whitelist\\n     * @dev It is expected that both arrays are same length, and validator at\\n     * position i corresponds to the value at position i\\n     * @param _validator addresses to set in the whitelist\\n     * @param _val value to set in the whitelist for corresponding address\\n     */\\n    function setValidator(address[] memory _validator, bool[] memory _val) external;\\n\\n    /**\\n     * @notice Set a new owner address for the rollup\\n     * @param newOwner address of new rollup owner\\n     */\\n    function setOwner(address newOwner) external;\\n\\n    /**\\n     * @notice Set minimum assertion period for the rollup\\n     * @param newPeriod new minimum period for assertions\\n     */\\n    function setMinimumAssertionPeriod(uint256 newPeriod) external;\\n\\n    /**\\n     * @notice Set number of blocks until a node is considered confirmed\\n     * @param newConfirmPeriod new number of blocks until a node is confirmed\\n     */\\n    function setConfirmPeriodBlocks(uint256 newConfirmPeriod) external;\\n\\n    /**\\n     * @notice Set number of extra blocks after a challenge\\n     * @param newExtraTimeBlocks new number of blocks\\n     */\\n    function setExtraChallengeTimeBlocks(uint256 newExtraTimeBlocks) external;\\n\\n    /**\\n     * @notice Set speed limit per block\\n     * @param newAvmGasSpeedLimitPerBlock maximum avmgas to be used per block\\n     */\\n    function setAvmGasSpeedLimitPerBlock(uint256 newAvmGasSpeedLimitPerBlock) external;\\n\\n    /**\\n     * @notice Set base stake required for an assertion\\n     * @param newBaseStake maximum avmgas to be used per block\\n     */\\n    function setBaseStake(uint256 newBaseStake) external;\\n\\n    /**\\n     * @notice Set the token used for stake, where address(0) == eth\\n     * @dev Before changing the base stake token, you might need to change the\\n     * implementation of the Rollup User facet!\\n     * @param newStakeToken address of token used for staking\\n     */\\n    function setStakeToken(address newStakeToken) external;\\n\\n    /**\\n     * @notice Set max delay for sequencer inbox\\n     * @param newSequencerInboxMaxDelayBlocks max number of blocks\\n     * @param newSequencerInboxMaxDelaySeconds max number of seconds\\n     */\\n    function setSequencerInboxMaxDelay(\\n        uint256 newSequencerInboxMaxDelayBlocks,\\n        uint256 newSequencerInboxMaxDelaySeconds\\n    ) external;\\n\\n    /**\\n     * @notice Set execution bisection degree\\n     * @param newChallengeExecutionBisectionDegree execution bisection degree\\n     */\\n    function setChallengeExecutionBisectionDegree(uint256 newChallengeExecutionBisectionDegree)\\n        external;\\n\\n    /**\\n     * @notice Updates a whitelist address for its consumers\\n     * @dev setting the newWhitelist to address(0) disables it for consumers\\n     * @param whitelist old whitelist to be deprecated\\n     * @param newWhitelist new whitelist to be used\\n     * @param targets whitelist consumers to be triggered\\n     */\\n    function updateWhitelistConsumers(\\n        address whitelist,\\n        address newWhitelist,\\n        address[] memory targets\\n    ) external;\\n\\n    /**\\n     * @notice Updates a whitelist's entries\\n     * @dev user at position i will be assigned value i\\n     * @param whitelist whitelist to be updated\\n     * @param user users to be updated in the whitelist\\n     * @param val if user is or not allowed in the whitelist\\n     */\\n    function setWhitelistEntries(\\n        address whitelist,\\n        address[] memory user,\\n        bool[] memory val\\n    ) external;\\n\\n    /**\\n     * @notice Updates whether an address is a sequencer at the sequencer inbox\\n     * @param newSequencer address to be modified\\n     * @param isSequencer whether this address should be authorized as a sequencer\\n     */\\n    function setIsSequencer(address newSequencer, bool isSequencer) external;\\n\\n    /**\\n     * @notice Upgrades the implementation of a beacon controlled by the rollup\\n     * @param beacon address of beacon to be upgraded\\n     * @param newImplementation new address of implementation\\n     */\\n    function upgradeBeacon(address beacon, address newImplementation) external;\\n\\n    function forceResolveChallenge(address[] memory stackerA, address[] memory stackerB) external;\\n\\n    function forceRefundStaker(address[] memory stacker) external;\\n\\n    function forceCreateNode(\\n        bytes32 expectedNodeHash,\\n        bytes32[3][2] calldata assertionBytes32Fields,\\n        uint256[4][2] calldata assertionIntFields,\\n        bytes calldata sequencerBatchProof,\\n        uint256 beforeProposedBlock,\\n        uint256 beforeInboxMaxCount,\\n        uint256 prevNode\\n    ) external;\\n\\n    function forceConfirmNode(\\n        uint256 nodeNum,\\n        bytes32 beforeSendAcc,\\n        bytes calldata sendsData,\\n        uint256[] calldata sendLengths,\\n        uint256 afterSendCount,\\n        bytes32 afterLogAcc,\\n        uint256 afterLogCount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x83a4823330b905aee4e801f339c164efa91e6517809c6e5ad9f45a5fc3b216e5\",\"license\":\"Apache-2.0\"},\"contracts/rollup/facets/RollupAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"../Rollup.sol\\\";\\nimport \\\"./IRollupFacets.sol\\\";\\nimport \\\"../../bridge/interfaces/IOutbox.sol\\\";\\nimport \\\"../../bridge/interfaces/ISequencerInbox.sol\\\";\\nimport \\\"../../libraries/Whitelist.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/proxy/UpgradeableBeacon.sol\\\";\\n\\ncontract RollupAdminFacet is RollupBase, IRollupAdmin {\\n    /**\\n     * Functions are only to reach this facet if the caller is the owner\\n     * so there is no need for a redundant onlyOwner check\\n     */\\n\\n    /**\\n     * @notice Add a contract authorized to put messages into this rollup's inbox\\n     * @param _outbox Outbox contract to add\\n     */\\n    function setOutbox(IOutbox _outbox) external override {\\n        outbox = _outbox;\\n        delayedBridge.setOutbox(address(_outbox), true);\\n        emit OwnerFunctionCalled(0);\\n    }\\n\\n    /**\\n     * @notice Disable an old outbox from interacting with the bridge\\n     * @param _outbox Outbox contract to remove\\n     */\\n    function removeOldOutbox(address _outbox) external override {\\n        require(_outbox != address(outbox), \\\"CUR_OUTBOX\\\");\\n        delayedBridge.setOutbox(_outbox, false);\\n        emit OwnerFunctionCalled(1);\\n    }\\n\\n    /**\\n     * @notice Enable or disable an inbox contract\\n     * @param _inbox Inbox contract to add or remove\\n     * @param _enabled New status of inbox\\n     */\\n    function setInbox(address _inbox, bool _enabled) external override {\\n        delayedBridge.setInbox(address(_inbox), _enabled);\\n        emit OwnerFunctionCalled(2);\\n    }\\n\\n    /**\\n     * @notice Pause interaction with the rollup contract.\\n     * The time spent paused is not incremented in the rollup's timing for node validation.\\n     */\\n    function pause() external override {\\n        _pause();\\n        emit OwnerFunctionCalled(3);\\n    }\\n\\n    /**\\n     * @notice Resume interaction with the rollup contract\\n     */\\n    function resume() external override {\\n        _unpause();\\n        emit OwnerFunctionCalled(4);\\n    }\\n\\n    /**\\n     * @notice Set the addresses of rollup logic facets called\\n     * @param newAdminFacet address of logic that owner of rollup calls\\n     * @param newUserFacet address of logic that user of rollup calls\\n     */\\n    function setFacets(address newAdminFacet, address newUserFacet) external override {\\n        facets[0] = newAdminFacet;\\n        facets[1] = newUserFacet;\\n        emit OwnerFunctionCalled(5);\\n    }\\n\\n    /**\\n     * @notice Set the addresses of the validator whitelist\\n     * @dev It is expected that both arrays are same length, and validator at\\n     * position i corresponds to the value at position i\\n     * @param _validator addresses to set in the whitelist\\n     * @param _val value to set in the whitelist for corresponding address\\n     */\\n    function setValidator(address[] memory _validator, bool[] memory _val) external override {\\n        require(_validator.length == _val.length, \\\"WRONG_LENGTH\\\");\\n\\n        for (uint256 i = 0; i < _validator.length; i++) {\\n            isValidator[_validator[i]] = _val[i];\\n        }\\n        emit OwnerFunctionCalled(6);\\n    }\\n\\n    /**\\n     * @notice Set a new owner address for the rollup\\n     * @param newOwner address of new rollup owner\\n     */\\n    function setOwner(address newOwner) external override {\\n        owner = newOwner;\\n        emit OwnerFunctionCalled(7);\\n    }\\n\\n    /**\\n     * @notice Set minimum assertion period for the rollup\\n     * @param newPeriod new minimum period for assertions\\n     */\\n    function setMinimumAssertionPeriod(uint256 newPeriod) external override {\\n        minimumAssertionPeriod = newPeriod;\\n        emit OwnerFunctionCalled(8);\\n    }\\n\\n    /**\\n     * @notice Set number of blocks until a node is considered confirmed\\n     * @param newConfirmPeriod new number of blocks\\n     */\\n    function setConfirmPeriodBlocks(uint256 newConfirmPeriod) external override {\\n        confirmPeriodBlocks = newConfirmPeriod;\\n        emit OwnerFunctionCalled(9);\\n    }\\n\\n    /**\\n     * @notice Set number of extra blocks after a challenge\\n     * @param newExtraTimeBlocks new number of blocks\\n     */\\n    function setExtraChallengeTimeBlocks(uint256 newExtraTimeBlocks) external override {\\n        extraChallengeTimeBlocks = newExtraTimeBlocks;\\n        emit OwnerFunctionCalled(10);\\n    }\\n\\n    /**\\n     * @notice Set speed limit per block\\n     * @param newAvmGasSpeedLimitPerBlock maximum avmgas to be used per block\\n     */\\n    function setAvmGasSpeedLimitPerBlock(uint256 newAvmGasSpeedLimitPerBlock) external override {\\n        avmGasSpeedLimitPerBlock = newAvmGasSpeedLimitPerBlock;\\n        emit OwnerFunctionCalled(11);\\n    }\\n\\n    /**\\n     * @notice Set base stake required for an assertion\\n     * @param newBaseStake minimum amount of stake required\\n     */\\n    function setBaseStake(uint256 newBaseStake) external override {\\n        baseStake = newBaseStake;\\n        emit OwnerFunctionCalled(12);\\n    }\\n\\n    /**\\n     * @notice Set the token used for stake, where address(0) == eth\\n     * @dev Before changing the base stake token, you might need to change the\\n     * implementation of the Rollup User facet!\\n     * @param newStakeToken address of token used for staking\\n     */\\n    function setStakeToken(address newStakeToken) external override {\\n        stakeToken = newStakeToken;\\n        emit OwnerFunctionCalled(13);\\n    }\\n\\n    /**\\n     * @notice Set max delay for sequencer inbox\\n     * @param newSequencerInboxMaxDelayBlocks max number of blocks\\n     * @param newSequencerInboxMaxDelaySeconds max number of seconds\\n     */\\n    function setSequencerInboxMaxDelay(\\n        uint256 newSequencerInboxMaxDelayBlocks,\\n        uint256 newSequencerInboxMaxDelaySeconds\\n    ) external override {\\n        ISequencerInbox(sequencerBridge).setMaxDelay(\\n            newSequencerInboxMaxDelayBlocks,\\n            newSequencerInboxMaxDelaySeconds\\n        );\\n        emit OwnerFunctionCalled(14);\\n    }\\n\\n    /**\\n     * @notice Set execution bisection degree\\n     * @param newChallengeExecutionBisectionDegree execution bisection degree\\n     */\\n    function setChallengeExecutionBisectionDegree(uint256 newChallengeExecutionBisectionDegree)\\n        external\\n        override\\n    {\\n        challengeExecutionBisectionDegree = newChallengeExecutionBisectionDegree;\\n        emit OwnerFunctionCalled(16);\\n    }\\n\\n    /**\\n     * @notice Updates a whitelist address for its consumers\\n     * @dev setting the newWhitelist to address(0) disables it for consumers\\n     * @param whitelist old whitelist to be deprecated\\n     * @param newWhitelist new whitelist to be used\\n     * @param targets whitelist consumers to be triggered\\n     */\\n    function updateWhitelistConsumers(\\n        address whitelist,\\n        address newWhitelist,\\n        address[] memory targets\\n    ) external override {\\n        Whitelist(whitelist).triggerConsumers(newWhitelist, targets);\\n        emit OwnerFunctionCalled(17);\\n    }\\n\\n    /**\\n     * @notice Updates a whitelist's entries\\n     * @dev user at position i will be assigned value i\\n     * @param whitelist whitelist to be updated\\n     * @param user users to be updated in the whitelist\\n     * @param val if user is or not allowed in the whitelist\\n     */\\n    function setWhitelistEntries(\\n        address whitelist,\\n        address[] memory user,\\n        bool[] memory val\\n    ) external override {\\n        require(user.length == val.length, \\\"INVALID_INPUT\\\");\\n        Whitelist(whitelist).setWhitelist(user, val);\\n        emit OwnerFunctionCalled(18);\\n    }\\n\\n    /**\\n     * @notice Updates a sequencer address at the sequencer inbox\\n     * @param newSequencer new sequencer address to be used\\n     */\\n    function setIsSequencer(address newSequencer, bool isSequencer) external override {\\n        ISequencerInbox(sequencerBridge).setIsSequencer(newSequencer, isSequencer);\\n        emit OwnerFunctionCalled(19);\\n    }\\n\\n    /**\\n     * @notice Upgrades the implementation of a beacon controlled by the rollup\\n     * @param beacon address of beacon to be upgraded\\n     * @param newImplementation new address of implementation\\n     */\\n    function upgradeBeacon(address beacon, address newImplementation) external override {\\n        UpgradeableBeacon(beacon).upgradeTo(newImplementation);\\n        emit OwnerFunctionCalled(20);\\n    }\\n\\n    function forceResolveChallenge(address[] memory stakerA, address[] memory stakerB)\\n        external\\n        override\\n        whenPaused\\n    {\\n        require(stakerA.length == stakerB.length, \\\"WRONG_LENGTH\\\");\\n        for (uint256 i = 0; i < stakerA.length; i++) {\\n            address chall = inChallenge(stakerA[i], stakerB[i]);\\n\\n            require(address(0) != chall, \\\"NOT_IN_CHALL\\\");\\n            clearChallenge(stakerA[i]);\\n            clearChallenge(stakerB[i]);\\n\\n            IChallenge(chall).clearChallenge();\\n        }\\n        emit OwnerFunctionCalled(21);\\n    }\\n\\n    function forceRefundStaker(address[] memory staker) external override whenPaused {\\n        for (uint256 i = 0; i < staker.length; i++) {\\n            reduceStakeTo(staker[i], 0);\\n            turnIntoZombie(staker[i]);\\n        }\\n        emit OwnerFunctionCalled(22);\\n    }\\n\\n    function forceCreateNode(\\n        bytes32 expectedNodeHash,\\n        bytes32[3][2] calldata assertionBytes32Fields,\\n        uint256[4][2] calldata assertionIntFields,\\n        bytes calldata sequencerBatchProof,\\n        uint256 beforeProposedBlock,\\n        uint256 beforeInboxMaxCount,\\n        uint256 prevNode\\n    ) external override whenPaused {\\n        require(prevNode == latestConfirmed(), \\\"ONLY_LATEST_CONFIRMED\\\");\\n\\n        RollupLib.Assertion memory assertion = RollupLib.decodeAssertion(\\n            assertionBytes32Fields,\\n            assertionIntFields,\\n            beforeProposedBlock,\\n            beforeInboxMaxCount,\\n            sequencerBridge.messageCount()\\n        );\\n\\n        createNewNode(\\n            assertion,\\n            assertionBytes32Fields,\\n            assertionIntFields,\\n            sequencerBatchProof,\\n            CreateNodeDataFrame({\\n                avmGasSpeedLimitPerBlock: avmGasSpeedLimitPerBlock,\\n                confirmPeriodBlocks: confirmPeriodBlocks,\\n                prevNode: prevNode,\\n                sequencerInbox: sequencerBridge,\\n                rollupEventBridge: rollupEventBridge,\\n                nodeFactory: nodeFactory\\n            }),\\n            expectedNodeHash\\n        );\\n\\n        emit OwnerFunctionCalled(23);\\n    }\\n\\n    function forceConfirmNode(\\n        uint256 nodeNum,\\n        bytes32 beforeSendAcc,\\n        bytes calldata sendsData,\\n        uint256[] calldata sendLengths,\\n        uint256 afterSendCount,\\n        bytes32 afterLogAcc,\\n        uint256 afterLogCount\\n    ) external override whenPaused {\\n        // this skips deadline, staker and zombie validation\\n        confirmNode(\\n            nodeNum,\\n            beforeSendAcc,\\n            sendsData,\\n            sendLengths,\\n            afterSendCount,\\n            afterLogAcc,\\n            afterLogCount,\\n            outbox,\\n            rollupEventBridge\\n        );\\n        emit OwnerFunctionCalled(24);\\n    }\\n}\\n\",\"keccak256\":\"0xc82f7fb95d01606e37f1f99b68da4933b1a6346425b997e86a3d1c0dc90b0dd3\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "amountStaked(address)": {
        "params": {
          "staker": "Staker address to lookup"
        },
        "returns": {
          "_0": "Amount staked of the staker"
        }
      },
      "arbGasSpeedLimitPerBlock()": {
        "details": "this actually returns the avmGasSpeedLimitPerBlock",
        "returns": {
          "_0": "this actually returns the avmGasSpeedLimitPerBlock"
        }
      },
      "currentChallenge(address)": {
        "params": {
          "staker": "Staker address to lookup"
        },
        "returns": {
          "_0": "Current challenge of the staker"
        }
      },
      "firstUnresolvedNode()": {
        "details": "If all nodes have been resolved, this will be latestNodeCreated + 1",
        "returns": {
          "_0": "Index of the first unresolved node"
        }
      },
      "getNode(uint256)": {
        "params": {
          "nodeNum": "Index of the node"
        },
        "returns": {
          "_0": "Address of the Node contract"
        }
      },
      "getNodeHash(uint256)": {
        "returns": {
          "_0": "Node hash as of this node number"
        }
      },
      "getStakerAddress(uint256)": {
        "params": {
          "stakerNum": "Index of the staker"
        },
        "returns": {
          "_0": "Address of the staker"
        }
      },
      "isStaked(address)": {
        "params": {
          "staker": "Staker address to check"
        },
        "returns": {
          "_0": "True or False for whether the staker was staked"
        }
      },
      "lastStakeBlock()": {
        "returns": {
          "_0": "Ethereum block that the most recent stake was created"
        }
      },
      "latestConfirmed()": {
        "returns": {
          "_0": "Index of the latest confirmed node"
        }
      },
      "latestNodeCreated()": {
        "returns": {
          "_0": "Index of the latest rollup node created"
        }
      },
      "latestStakedNode(address)": {
        "params": {
          "staker": "Staker address to lookup"
        },
        "returns": {
          "_0": "Latest node staked of the staker"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeOldOutbox(address)": {
        "params": {
          "_outbox": "Outbox contract to remove"
        }
      },
      "setAvmGasSpeedLimitPerBlock(uint256)": {
        "params": {
          "newAvmGasSpeedLimitPerBlock": "maximum avmgas to be used per block"
        }
      },
      "setBaseStake(uint256)": {
        "params": {
          "newBaseStake": "minimum amount of stake required"
        }
      },
      "setChallengeExecutionBisectionDegree(uint256)": {
        "params": {
          "newChallengeExecutionBisectionDegree": "execution bisection degree"
        }
      },
      "setConfirmPeriodBlocks(uint256)": {
        "params": {
          "newConfirmPeriod": "new number of blocks"
        }
      },
      "setExtraChallengeTimeBlocks(uint256)": {
        "params": {
          "newExtraTimeBlocks": "new number of blocks"
        }
      },
      "setFacets(address,address)": {
        "params": {
          "newAdminFacet": "address of logic that owner of rollup calls",
          "newUserFacet": "address of logic that user of rollup calls"
        }
      },
      "setInbox(address,bool)": {
        "params": {
          "_enabled": "New status of inbox",
          "_inbox": "Inbox contract to add or remove"
        }
      },
      "setIsSequencer(address,bool)": {
        "params": {
          "newSequencer": "new sequencer address to be used"
        }
      },
      "setMinimumAssertionPeriod(uint256)": {
        "params": {
          "newPeriod": "new minimum period for assertions"
        }
      },
      "setOutbox(address)": {
        "params": {
          "_outbox": "Outbox contract to add"
        }
      },
      "setOwner(address)": {
        "params": {
          "newOwner": "address of new rollup owner"
        }
      },
      "setSequencerInboxMaxDelay(uint256,uint256)": {
        "params": {
          "newSequencerInboxMaxDelayBlocks": "max number of blocks",
          "newSequencerInboxMaxDelaySeconds": "max number of seconds"
        }
      },
      "setStakeToken(address)": {
        "details": "Before changing the base stake token, you might need to change the implementation of the Rollup User facet!",
        "params": {
          "newStakeToken": "address of token used for staking"
        }
      },
      "setValidator(address[],bool[])": {
        "details": "It is expected that both arrays are same length, and validator at position i corresponds to the value at position i",
        "params": {
          "_val": "value to set in the whitelist for corresponding address",
          "_validator": "addresses to set in the whitelist"
        }
      },
      "setWhitelistEntries(address,address[],bool[])": {
        "details": "user at position i will be assigned value i",
        "params": {
          "user": "users to be updated in the whitelist",
          "val": "if user is or not allowed in the whitelist",
          "whitelist": "whitelist to be updated"
        }
      },
      "stakerCount()": {
        "returns": {
          "_0": "Number of active stakers currently staked"
        }
      },
      "updateWhitelistConsumers(address,address,address[])": {
        "details": "setting the newWhitelist to address(0) disables it for consumers",
        "params": {
          "newWhitelist": "new whitelist to be used",
          "targets": "whitelist consumers to be triggered",
          "whitelist": "old whitelist to be deprecated"
        }
      },
      "upgradeBeacon(address,address)": {
        "params": {
          "beacon": "address of beacon to be upgraded",
          "newImplementation": "new address of implementation"
        }
      },
      "withdrawableFunds(address)": {
        "params": {
          "owner": "Address to check the funds of"
        },
        "returns": {
          "_0": "Amount of funds withdrawable by owner"
        }
      },
      "zombieAddress(uint256)": {
        "params": {
          "zombieNum": "Index of the zombie to lookup"
        },
        "returns": {
          "_0": "Original staker address of the zombie"
        }
      },
      "zombieCount()": {
        "returns": {
          "_0": "Current number of un-removed zombies"
        }
      },
      "zombieLatestStakedNode(uint256)": {
        "params": {
          "zombieNum": "Index of the zombie to lookup"
        },
        "returns": {
          "_0": "Latest node that the given zombie is staked on"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "amountStaked(address)": {
        "notice": "Get the amount staked of the given staker"
      },
      "arbGasSpeedLimitPerBlock()": {
        "notice": "DEPRECATED -- this method is deprecated but still mantained for backward compatibility"
      },
      "currentChallenge(address)": {
        "notice": "Get the current challenge of the given staker"
      },
      "getNode(uint256)": {
        "notice": "Get the address of the Node contract for the given node"
      },
      "getStakerAddress(uint256)": {
        "notice": "Get the address of the staker at the given index"
      },
      "isStaked(address)": {
        "notice": "Check whether the given staker is staked"
      },
      "latestStakedNode(address)": {
        "notice": "Get the latest staked node of the given staker"
      },
      "pause()": {
        "notice": "Pause interaction with the rollup contract. The time spent paused is not incremented in the rollup's timing for node validation."
      },
      "removeOldOutbox(address)": {
        "notice": "Disable an old outbox from interacting with the bridge"
      },
      "resume()": {
        "notice": "Resume interaction with the rollup contract"
      },
      "setAvmGasSpeedLimitPerBlock(uint256)": {
        "notice": "Set speed limit per block"
      },
      "setBaseStake(uint256)": {
        "notice": "Set base stake required for an assertion"
      },
      "setChallengeExecutionBisectionDegree(uint256)": {
        "notice": "Set execution bisection degree"
      },
      "setConfirmPeriodBlocks(uint256)": {
        "notice": "Set number of blocks until a node is considered confirmed"
      },
      "setExtraChallengeTimeBlocks(uint256)": {
        "notice": "Set number of extra blocks after a challenge"
      },
      "setFacets(address,address)": {
        "notice": "Set the addresses of rollup logic facets called"
      },
      "setInbox(address,bool)": {
        "notice": "Enable or disable an inbox contract"
      },
      "setIsSequencer(address,bool)": {
        "notice": "Updates a sequencer address at the sequencer inbox"
      },
      "setMinimumAssertionPeriod(uint256)": {
        "notice": "Set minimum assertion period for the rollup"
      },
      "setOutbox(address)": {
        "notice": "Add a contract authorized to put messages into this rollup's inbox"
      },
      "setOwner(address)": {
        "notice": "Set a new owner address for the rollup"
      },
      "setSequencerInboxMaxDelay(uint256,uint256)": {
        "notice": "Set max delay for sequencer inbox"
      },
      "setStakeToken(address)": {
        "notice": "Set the token used for stake, where address(0) == eth"
      },
      "setValidator(address[],bool[])": {
        "notice": "Set the addresses of the validator whitelist"
      },
      "setWhitelistEntries(address,address[],bool[])": {
        "notice": "Updates a whitelist's entries"
      },
      "updateWhitelistConsumers(address,address,address[])": {
        "notice": "Updates a whitelist address for its consumers"
      },
      "upgradeBeacon(address,address)": {
        "notice": "Upgrades the implementation of a beacon controlled by the rollup"
      },
      "withdrawableFunds(address)": {
        "notice": "Get the amount of funds withdrawable by the given address"
      },
      "zombieAddress(uint256)": {
        "notice": "Get the original staker address of the zombie at the given index"
      },
      "zombieLatestStakedNode(uint256)": {
        "notice": "Get Latest node that the given zombie at the given index is staked on"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18568,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "isMasterCopy",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 23182,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "_latestConfirmed",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 23184,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "_firstUnresolvedNode",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 23186,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "_latestNodeCreated",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 23188,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "_lastStakeBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 23192,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "_nodes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_contract(INode)22076)"
      },
      {
        "astId": 23196,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "_nodeHashes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 23199,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "_stakerList",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 23204,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "_stakerMap",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Staker)23180_storage)"
      },
      {
        "astId": 23207,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "_zombies",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Zombie)23169_storage)dyn_storage"
      },
      {
        "astId": 23211,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "_withdrawableFunds",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2064,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "_paused",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 22693,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "confirmPeriodBlocks",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 22695,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "extraChallengeTimeBlocks",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 22697,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "avmGasSpeedLimitPerBlock",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 22699,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "baseStake",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 22701,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "delayedBridge",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IBridge)16694"
      },
      {
        "astId": 22703,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "sequencerBridge",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(ISequencerInbox)17026"
      },
      {
        "astId": 22705,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "outbox",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IOutbox)16894"
      },
      {
        "astId": 22707,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "rollupEventBridge",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(RollupEventBridge)25104"
      },
      {
        "astId": 22709,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "challengeFactory",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IChallengeFactory)18396"
      },
      {
        "astId": 22711,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "nodeFactory",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(INodeFactory)22094"
      },
      {
        "astId": 22713,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "owner",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 22715,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "stakeToken",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 22717,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "minimumAssertionPeriod",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 22719,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "STORAGE_GAP_1",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 22721,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "STORAGE_GAP_2",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 22723,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "challengeExecutionBisectionDegree",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 22726,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "facets",
        "offset": 0,
        "slot": "28",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 22730,
        "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
        "label": "isValidator",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Zombie)23169_storage)dyn_storage": {
        "base": "t_struct(Zombie)23169_storage",
        "encoding": "dynamic_array",
        "label": "struct RollupCore.Zombie[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBridge)16694": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      },
      "t_contract(IChallengeFactory)18396": {
        "encoding": "inplace",
        "label": "contract IChallengeFactory",
        "numberOfBytes": "20"
      },
      "t_contract(INode)22076": {
        "encoding": "inplace",
        "label": "contract INode",
        "numberOfBytes": "20"
      },
      "t_contract(INodeFactory)22094": {
        "encoding": "inplace",
        "label": "contract INodeFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IOutbox)16894": {
        "encoding": "inplace",
        "label": "contract IOutbox",
        "numberOfBytes": "20"
      },
      "t_contract(ISequencerInbox)17026": {
        "encoding": "inplace",
        "label": "contract ISequencerInbox",
        "numberOfBytes": "20"
      },
      "t_contract(RollupEventBridge)25104": {
        "encoding": "inplace",
        "label": "contract RollupEventBridge",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Staker)23180_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RollupCore.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)23180_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_contract(INode)22076)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract INode)",
        "numberOfBytes": "32",
        "value": "t_contract(INode)22076"
      },
      "t_struct(Staker)23180_storage": {
        "encoding": "inplace",
        "label": "struct RollupCore.Staker",
        "members": [
          {
            "astId": 23171,
            "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23173,
            "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
            "label": "latestStakedNode",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 23175,
            "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
            "label": "amountStaked",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 23177,
            "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
            "label": "currentChallenge",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 23179,
            "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
            "label": "isStaked",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Zombie)23169_storage": {
        "encoding": "inplace",
        "label": "struct RollupCore.Zombie",
        "members": [
          {
            "astId": 23166,
            "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
            "label": "stakerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 23168,
            "contract": "contracts/rollup/facets/RollupAdmin.sol:RollupAdminFacet",
            "label": "latestStakedNode",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}